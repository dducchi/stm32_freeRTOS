
freeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d44  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08006ee4  08006ee4  00016ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800703c  0800703c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800703c  0800703c  0001703c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007044  08007044  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007044  08007044  00017044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007048  08007048  00017048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800704c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b3c  20000074  080070c0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004bb0  080070c0  00024bb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015ec3  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003173  00000000  00000000  00035f67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a0  00000000  00000000  000390e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f78  00000000  00000000  0003a180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004766  00000000  00000000  0003b0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000132c4  00000000  00000000  0003f85e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d672  00000000  00000000  00052b22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f0194  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c44  00000000  00000000  000f01e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006ecc 	.word	0x08006ecc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08006ecc 	.word	0x08006ecc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f000 fbac 	bl	8000ce4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f832 	bl	80005f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 f938 	bl	8000804 <MX_GPIO_Init>
  MX_DMA_Init();
 8000594:	f000 f916 	bl	80007c4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000598:	f000 f8ea 	bl	8000770 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800059c:	f000 f888 	bl	80006b0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
HAL_ADC_Start_DMA(&hadc1, valueAdc, 2);
 80005a0:	2202      	movs	r2, #2
 80005a2:	490c      	ldr	r1, [pc, #48]	; (80005d4 <main+0x50>)
 80005a4:	480c      	ldr	r0, [pc, #48]	; (80005d8 <main+0x54>)
 80005a6:	f000 fc53 	bl	8000e50 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005aa:	f002 fe63 	bl	8003274 <osKernelInitialize>
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
  TaskAHandle = osThreadNew(FunctionA, 0, &TaskA_attributes);
 80005ae:	4a0b      	ldr	r2, [pc, #44]	; (80005dc <main+0x58>)
 80005b0:	2100      	movs	r1, #0
 80005b2:	480b      	ldr	r0, [pc, #44]	; (80005e0 <main+0x5c>)
 80005b4:	f002 fea8 	bl	8003308 <osThreadNew>
 80005b8:	4603      	mov	r3, r0
 80005ba:	4a0a      	ldr	r2, [pc, #40]	; (80005e4 <main+0x60>)
 80005bc:	6013      	str	r3, [r2, #0]
  TaskBHandle = osThreadNew(FunctionB, 0, &TaskB_attributes);
 80005be:	4a0a      	ldr	r2, [pc, #40]	; (80005e8 <main+0x64>)
 80005c0:	2100      	movs	r1, #0
 80005c2:	480a      	ldr	r0, [pc, #40]	; (80005ec <main+0x68>)
 80005c4:	f002 fea0 	bl	8003308 <osThreadNew>
 80005c8:	4603      	mov	r3, r0
 80005ca:	4a09      	ldr	r2, [pc, #36]	; (80005f0 <main+0x6c>)
 80005cc:	6013      	str	r3, [r2, #0]
/**
* @}
*/

  /* Start scheduler */
  osKernelStart();
 80005ce:	f002 fe75 	bl	80032bc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d2:	e7fe      	b.n	80005d2 <main+0x4e>
 80005d4:	20000184 	.word	0x20000184
 80005d8:	20000090 	.word	0x20000090
 80005dc:	08006f3c 	.word	0x08006f3c
 80005e0:	08000839 	.word	0x08000839
 80005e4:	2000017c 	.word	0x2000017c
 80005e8:	08006f60 	.word	0x08006f60
 80005ec:	08000865 	.word	0x08000865
 80005f0:	20000180 	.word	0x20000180

080005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b094      	sub	sp, #80	; 0x50
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 0320 	add.w	r3, r7, #32
 80005fe:	2230      	movs	r2, #48	; 0x30
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f005 fce3 	bl	8005fce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000618:	2300      	movs	r3, #0
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	4b22      	ldr	r3, [pc, #136]	; (80006a8 <SystemClock_Config+0xb4>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	4a21      	ldr	r2, [pc, #132]	; (80006a8 <SystemClock_Config+0xb4>)
 8000622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000626:	6413      	str	r3, [r2, #64]	; 0x40
 8000628:	4b1f      	ldr	r3, [pc, #124]	; (80006a8 <SystemClock_Config+0xb4>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000634:	2300      	movs	r3, #0
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	4b1c      	ldr	r3, [pc, #112]	; (80006ac <SystemClock_Config+0xb8>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a1b      	ldr	r2, [pc, #108]	; (80006ac <SystemClock_Config+0xb8>)
 800063e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000642:	6013      	str	r3, [r2, #0]
 8000644:	4b19      	ldr	r3, [pc, #100]	; (80006ac <SystemClock_Config+0xb8>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000650:	2302      	movs	r3, #2
 8000652:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000654:	2301      	movs	r3, #1
 8000656:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000658:	2310      	movs	r3, #16
 800065a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800065c:	2300      	movs	r3, #0
 800065e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000660:	f107 0320 	add.w	r3, r7, #32
 8000664:	4618      	mov	r0, r3
 8000666:	f001 fdb7 	bl	80021d8 <HAL_RCC_OscConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000670:	f000 f940 	bl	80008f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000674:	230f      	movs	r3, #15
 8000676:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000678:	2300      	movs	r3, #0
 800067a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f002 f81a 	bl	80026c8 <HAL_RCC_ClockConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800069a:	f000 f92b 	bl	80008f4 <Error_Handler>
  }
}
 800069e:	bf00      	nop
 80006a0:	3750      	adds	r7, #80	; 0x50
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40007000 	.word	0x40007000

080006b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006b6:	463b      	mov	r3, r7
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006c2:	4b28      	ldr	r3, [pc, #160]	; (8000764 <MX_ADC1_Init+0xb4>)
 80006c4:	4a28      	ldr	r2, [pc, #160]	; (8000768 <MX_ADC1_Init+0xb8>)
 80006c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006c8:	4b26      	ldr	r3, [pc, #152]	; (8000764 <MX_ADC1_Init+0xb4>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006ce:	4b25      	ldr	r3, [pc, #148]	; (8000764 <MX_ADC1_Init+0xb4>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80006d4:	4b23      	ldr	r3, [pc, #140]	; (8000764 <MX_ADC1_Init+0xb4>)
 80006d6:	2201      	movs	r2, #1
 80006d8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006da:	4b22      	ldr	r3, [pc, #136]	; (8000764 <MX_ADC1_Init+0xb4>)
 80006dc:	2201      	movs	r2, #1
 80006de:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006e0:	4b20      	ldr	r3, [pc, #128]	; (8000764 <MX_ADC1_Init+0xb4>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006e8:	4b1e      	ldr	r3, [pc, #120]	; (8000764 <MX_ADC1_Init+0xb4>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006ee:	4b1d      	ldr	r3, [pc, #116]	; (8000764 <MX_ADC1_Init+0xb4>)
 80006f0:	4a1e      	ldr	r2, [pc, #120]	; (800076c <MX_ADC1_Init+0xbc>)
 80006f2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006f4:	4b1b      	ldr	r3, [pc, #108]	; (8000764 <MX_ADC1_Init+0xb4>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80006fa:	4b1a      	ldr	r3, [pc, #104]	; (8000764 <MX_ADC1_Init+0xb4>)
 80006fc:	2202      	movs	r2, #2
 80006fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000700:	4b18      	ldr	r3, [pc, #96]	; (8000764 <MX_ADC1_Init+0xb4>)
 8000702:	2201      	movs	r2, #1
 8000704:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000708:	4b16      	ldr	r3, [pc, #88]	; (8000764 <MX_ADC1_Init+0xb4>)
 800070a:	2201      	movs	r2, #1
 800070c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800070e:	4815      	ldr	r0, [pc, #84]	; (8000764 <MX_ADC1_Init+0xb4>)
 8000710:	f000 fb5a 	bl	8000dc8 <HAL_ADC_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800071a:	f000 f8eb 	bl	80008f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800071e:	2300      	movs	r3, #0
 8000720:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000722:	2301      	movs	r3, #1
 8000724:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000726:	2307      	movs	r3, #7
 8000728:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800072a:	463b      	mov	r3, r7
 800072c:	4619      	mov	r1, r3
 800072e:	480d      	ldr	r0, [pc, #52]	; (8000764 <MX_ADC1_Init+0xb4>)
 8000730:	f000 fc9c 	bl	800106c <HAL_ADC_ConfigChannel>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800073a:	f000 f8db 	bl	80008f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800073e:	2301      	movs	r3, #1
 8000740:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000742:	2302      	movs	r3, #2
 8000744:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000746:	463b      	mov	r3, r7
 8000748:	4619      	mov	r1, r3
 800074a:	4806      	ldr	r0, [pc, #24]	; (8000764 <MX_ADC1_Init+0xb4>)
 800074c:	f000 fc8e 	bl	800106c <HAL_ADC_ConfigChannel>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000756:	f000 f8cd 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	3710      	adds	r7, #16
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000090 	.word	0x20000090
 8000768:	40012000 	.word	0x40012000
 800076c:	0f000001 	.word	0x0f000001

08000770 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000774:	4b11      	ldr	r3, [pc, #68]	; (80007bc <MX_USART1_UART_Init+0x4c>)
 8000776:	4a12      	ldr	r2, [pc, #72]	; (80007c0 <MX_USART1_UART_Init+0x50>)
 8000778:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800077a:	4b10      	ldr	r3, [pc, #64]	; (80007bc <MX_USART1_UART_Init+0x4c>)
 800077c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000780:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <MX_USART1_UART_Init+0x4c>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000788:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <MX_USART1_UART_Init+0x4c>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <MX_USART1_UART_Init+0x4c>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000794:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_USART1_UART_Init+0x4c>)
 8000796:	220c      	movs	r2, #12
 8000798:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079a:	4b08      	ldr	r3, [pc, #32]	; (80007bc <MX_USART1_UART_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <MX_USART1_UART_Init+0x4c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007a6:	4805      	ldr	r0, [pc, #20]	; (80007bc <MX_USART1_UART_Init+0x4c>)
 80007a8:	f002 f96e 	bl	8002a88 <HAL_UART_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007b2:	f000 f89f 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000138 	.word	0x20000138
 80007c0:	40011000 	.word	0x40011000

080007c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <MX_DMA_Init+0x3c>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a0b      	ldr	r2, [pc, #44]	; (8000800 <MX_DMA_Init+0x3c>)
 80007d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <MX_DMA_Init+0x3c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2105      	movs	r1, #5
 80007ea:	2038      	movs	r0, #56	; 0x38
 80007ec:	f000 ffc9 	bl	8001782 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80007f0:	2038      	movs	r0, #56	; 0x38
 80007f2:	f000 ffe2 	bl	80017ba <HAL_NVIC_EnableIRQ>

}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40023800 	.word	0x40023800

08000804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	4b09      	ldr	r3, [pc, #36]	; (8000834 <MX_GPIO_Init+0x30>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a08      	ldr	r2, [pc, #32]	; (8000834 <MX_GPIO_Init+0x30>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b06      	ldr	r3, [pc, #24]	; (8000834 <MX_GPIO_Init+0x30>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]

}
 8000826:	bf00      	nop
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	40023800 	.word	0x40023800

08000838 <FunctionA>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_FunctionA */
void FunctionA(void *argument)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
	printf("%d %d\n", valueAdc[0], valueAdc[1]);
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <FunctionA+0x24>)
 8000842:	881b      	ldrh	r3, [r3, #0]
 8000844:	4619      	mov	r1, r3
 8000846:	4b05      	ldr	r3, [pc, #20]	; (800085c <FunctionA+0x24>)
 8000848:	885b      	ldrh	r3, [r3, #2]
 800084a:	461a      	mov	r2, r3
 800084c:	4804      	ldr	r0, [pc, #16]	; (8000860 <FunctionA+0x28>)
 800084e:	f005 fc5b 	bl	8006108 <iprintf>
    osDelay(320);
 8000852:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8000856:	f002 fde9 	bl	800342c <osDelay>
  {
 800085a:	e7f1      	b.n	8000840 <FunctionA+0x8>
 800085c:	20000184 	.word	0x20000184
 8000860:	08006ef4 	.word	0x08006ef4

08000864 <FunctionB>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FunctionB */
void FunctionB(void *argument)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	//PA1 : CDS
  for(;;)
  {
	  //count ++;
	  //osthreadflagsset(taskahandle, count);
	if(valueAdc[0] < 300 && valueAdc[1] < 500) printf("heater on\n");
 800086c:	4b1c      	ldr	r3, [pc, #112]	; (80008e0 <FunctionB+0x7c>)
 800086e:	881b      	ldrh	r3, [r3, #0]
 8000870:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000874:	d207      	bcs.n	8000886 <FunctionB+0x22>
 8000876:	4b1a      	ldr	r3, [pc, #104]	; (80008e0 <FunctionB+0x7c>)
 8000878:	885b      	ldrh	r3, [r3, #2]
 800087a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800087e:	d202      	bcs.n	8000886 <FunctionB+0x22>
 8000880:	4818      	ldr	r0, [pc, #96]	; (80008e4 <FunctionB+0x80>)
 8000882:	f005 fcc7 	bl	8006214 <puts>
	if(valueAdc[0] > 400 && valueAdc[1] < 500) printf("heater off\n");
 8000886:	4b16      	ldr	r3, [pc, #88]	; (80008e0 <FunctionB+0x7c>)
 8000888:	881b      	ldrh	r3, [r3, #0]
 800088a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800088e:	d907      	bls.n	80008a0 <FunctionB+0x3c>
 8000890:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <FunctionB+0x7c>)
 8000892:	885b      	ldrh	r3, [r3, #2]
 8000894:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000898:	d202      	bcs.n	80008a0 <FunctionB+0x3c>
 800089a:	4813      	ldr	r0, [pc, #76]	; (80008e8 <FunctionB+0x84>)
 800089c:	f005 fcba 	bl	8006214 <puts>
	if(valueAdc[0] < 380 && valueAdc[1] > 500) printf("fan off\n");
 80008a0:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <FunctionB+0x7c>)
 80008a2:	881b      	ldrh	r3, [r3, #0]
 80008a4:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
 80008a8:	d207      	bcs.n	80008ba <FunctionB+0x56>
 80008aa:	4b0d      	ldr	r3, [pc, #52]	; (80008e0 <FunctionB+0x7c>)
 80008ac:	885b      	ldrh	r3, [r3, #2]
 80008ae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80008b2:	d902      	bls.n	80008ba <FunctionB+0x56>
 80008b4:	480d      	ldr	r0, [pc, #52]	; (80008ec <FunctionB+0x88>)
 80008b6:	f005 fcad 	bl	8006214 <puts>
	if(valueAdc[0] > 400 && valueAdc[1] > 550) printf("fan on\n");
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <FunctionB+0x7c>)
 80008bc:	881b      	ldrh	r3, [r3, #0]
 80008be:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80008c2:	d908      	bls.n	80008d6 <FunctionB+0x72>
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <FunctionB+0x7c>)
 80008c6:	885b      	ldrh	r3, [r3, #2]
 80008c8:	f240 2226 	movw	r2, #550	; 0x226
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d902      	bls.n	80008d6 <FunctionB+0x72>
 80008d0:	4807      	ldr	r0, [pc, #28]	; (80008f0 <FunctionB+0x8c>)
 80008d2:	f005 fc9f 	bl	8006214 <puts>
    osDelay(1000);
 80008d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008da:	f002 fda7 	bl	800342c <osDelay>
	if(valueAdc[0] < 300 && valueAdc[1] < 500) printf("heater on\n");
 80008de:	e7c5      	b.n	800086c <FunctionB+0x8>
 80008e0:	20000184 	.word	0x20000184
 80008e4:	08006efc 	.word	0x08006efc
 80008e8:	08006f08 	.word	0x08006f08
 80008ec:	08006f14 	.word	0x08006f14
 80008f0:	08006f1c 	.word	0x08006f1c

080008f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f8:	b672      	cpsid	i
}
 80008fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008fc:	e7fe      	b.n	80008fc <Error_Handler+0x8>
	...

08000900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	4b12      	ldr	r3, [pc, #72]	; (8000954 <HAL_MspInit+0x54>)
 800090c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090e:	4a11      	ldr	r2, [pc, #68]	; (8000954 <HAL_MspInit+0x54>)
 8000910:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000914:	6453      	str	r3, [r2, #68]	; 0x44
 8000916:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <HAL_MspInit+0x54>)
 8000918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	603b      	str	r3, [r7, #0]
 8000926:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <HAL_MspInit+0x54>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092a:	4a0a      	ldr	r2, [pc, #40]	; (8000954 <HAL_MspInit+0x54>)
 800092c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000930:	6413      	str	r3, [r2, #64]	; 0x40
 8000932:	4b08      	ldr	r3, [pc, #32]	; (8000954 <HAL_MspInit+0x54>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093a:	603b      	str	r3, [r7, #0]
 800093c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800093e:	2200      	movs	r2, #0
 8000940:	210f      	movs	r1, #15
 8000942:	f06f 0001 	mvn.w	r0, #1
 8000946:	f000 ff1c 	bl	8001782 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40023800 	.word	0x40023800

08000958 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08a      	sub	sp, #40	; 0x28
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a2f      	ldr	r2, [pc, #188]	; (8000a34 <HAL_ADC_MspInit+0xdc>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d157      	bne.n	8000a2a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	613b      	str	r3, [r7, #16]
 800097e:	4b2e      	ldr	r3, [pc, #184]	; (8000a38 <HAL_ADC_MspInit+0xe0>)
 8000980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000982:	4a2d      	ldr	r2, [pc, #180]	; (8000a38 <HAL_ADC_MspInit+0xe0>)
 8000984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000988:	6453      	str	r3, [r2, #68]	; 0x44
 800098a:	4b2b      	ldr	r3, [pc, #172]	; (8000a38 <HAL_ADC_MspInit+0xe0>)
 800098c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000992:	613b      	str	r3, [r7, #16]
 8000994:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	4b27      	ldr	r3, [pc, #156]	; (8000a38 <HAL_ADC_MspInit+0xe0>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a26      	ldr	r2, [pc, #152]	; (8000a38 <HAL_ADC_MspInit+0xe0>)
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b24      	ldr	r3, [pc, #144]	; (8000a38 <HAL_ADC_MspInit+0xe0>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80009b2:	2303      	movs	r3, #3
 80009b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009b6:	2303      	movs	r3, #3
 80009b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	4619      	mov	r1, r3
 80009c4:	481d      	ldr	r0, [pc, #116]	; (8000a3c <HAL_ADC_MspInit+0xe4>)
 80009c6:	f001 fa83 	bl	8001ed0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80009ca:	4b1d      	ldr	r3, [pc, #116]	; (8000a40 <HAL_ADC_MspInit+0xe8>)
 80009cc:	4a1d      	ldr	r2, [pc, #116]	; (8000a44 <HAL_ADC_MspInit+0xec>)
 80009ce:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80009d0:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <HAL_ADC_MspInit+0xe8>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009d6:	4b1a      	ldr	r3, [pc, #104]	; (8000a40 <HAL_ADC_MspInit+0xe8>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80009dc:	4b18      	ldr	r3, [pc, #96]	; (8000a40 <HAL_ADC_MspInit+0xe8>)
 80009de:	2200      	movs	r2, #0
 80009e0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80009e2:	4b17      	ldr	r3, [pc, #92]	; (8000a40 <HAL_ADC_MspInit+0xe8>)
 80009e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009e8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009ea:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <HAL_ADC_MspInit+0xe8>)
 80009ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009f0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009f2:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <HAL_ADC_MspInit+0xe8>)
 80009f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009f8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80009fa:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <HAL_ADC_MspInit+0xe8>)
 80009fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a00:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a02:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <HAL_ADC_MspInit+0xe8>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a08:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <HAL_ADC_MspInit+0xe8>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a0e:	480c      	ldr	r0, [pc, #48]	; (8000a40 <HAL_ADC_MspInit+0xe8>)
 8000a10:	f000 feee 	bl	80017f0 <HAL_DMA_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000a1a:	f7ff ff6b 	bl	80008f4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4a07      	ldr	r2, [pc, #28]	; (8000a40 <HAL_ADC_MspInit+0xe8>)
 8000a22:	639a      	str	r2, [r3, #56]	; 0x38
 8000a24:	4a06      	ldr	r2, [pc, #24]	; (8000a40 <HAL_ADC_MspInit+0xe8>)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a2a:	bf00      	nop
 8000a2c:	3728      	adds	r7, #40	; 0x28
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40012000 	.word	0x40012000
 8000a38:	40023800 	.word	0x40023800
 8000a3c:	40020000 	.word	0x40020000
 8000a40:	200000d8 	.word	0x200000d8
 8000a44:	40026410 	.word	0x40026410

08000a48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	; 0x28
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a19      	ldr	r2, [pc, #100]	; (8000acc <HAL_UART_MspInit+0x84>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d12c      	bne.n	8000ac4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	613b      	str	r3, [r7, #16]
 8000a6e:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <HAL_UART_MspInit+0x88>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a72:	4a17      	ldr	r2, [pc, #92]	; (8000ad0 <HAL_UART_MspInit+0x88>)
 8000a74:	f043 0310 	orr.w	r3, r3, #16
 8000a78:	6453      	str	r3, [r2, #68]	; 0x44
 8000a7a:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <HAL_UART_MspInit+0x88>)
 8000a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7e:	f003 0310 	and.w	r3, r3, #16
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <HAL_UART_MspInit+0x88>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a10      	ldr	r2, [pc, #64]	; (8000ad0 <HAL_UART_MspInit+0x88>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <HAL_UART_MspInit+0x88>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000aa2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000aa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ab4:	2307      	movs	r3, #7
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	4619      	mov	r1, r3
 8000abe:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <HAL_UART_MspInit+0x8c>)
 8000ac0:	f001 fa06 	bl	8001ed0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ac4:	bf00      	nop
 8000ac6:	3728      	adds	r7, #40	; 0x28
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40011000 	.word	0x40011000
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40020000 	.word	0x40020000

08000ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000adc:	e7fe      	b.n	8000adc <NMI_Handler+0x4>

08000ade <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae2:	e7fe      	b.n	8000ae2 <HardFault_Handler+0x4>

08000ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <MemManage_Handler+0x4>

08000aea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aee:	e7fe      	b.n	8000aee <BusFault_Handler+0x4>

08000af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <UsageFault_Handler+0x4>

08000af6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b08:	f000 f93e 	bl	8000d88 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b0c:	f004 f8c6 	bl	8004c9c <xTaskGetSchedulerState>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d001      	beq.n	8000b1a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b16:	f004 feaf 	bl	8005878 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
	...

08000b20 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000b24:	4802      	ldr	r0, [pc, #8]	; (8000b30 <DMA2_Stream0_IRQHandler+0x10>)
 8000b26:	f000 ff69 	bl	80019fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	200000d8 	.word	0x200000d8

08000b34 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b40:	2300      	movs	r3, #0
 8000b42:	617b      	str	r3, [r7, #20]
 8000b44:	e00a      	b.n	8000b5c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b46:	f3af 8000 	nop.w
 8000b4a:	4601      	mov	r1, r0
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	1c5a      	adds	r2, r3, #1
 8000b50:	60ba      	str	r2, [r7, #8]
 8000b52:	b2ca      	uxtb	r2, r1
 8000b54:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	617b      	str	r3, [r7, #20]
 8000b5c:	697a      	ldr	r2, [r7, #20]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	dbf0      	blt.n	8000b46 <_read+0x12>
  }

  return len;
 8000b64:	687b      	ldr	r3, [r7, #4]
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3718      	adds	r7, #24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <_close>:
  }
  return len;
}

int _close(int file)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	b083      	sub	sp, #12
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b86:	b480      	push	{r7}
 8000b88:	b083      	sub	sp, #12
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
 8000b8e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b96:	605a      	str	r2, [r3, #4]
  return 0;
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <_isatty>:

int _isatty(int file)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	b083      	sub	sp, #12
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bae:	2301      	movs	r3, #1
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3714      	adds	r7, #20
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
	...

08000bd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000be0:	4a14      	ldr	r2, [pc, #80]	; (8000c34 <_sbrk+0x5c>)
 8000be2:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <_sbrk+0x60>)
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bec:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <_sbrk+0x64>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d102      	bne.n	8000bfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bf4:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <_sbrk+0x64>)
 8000bf6:	4a12      	ldr	r2, [pc, #72]	; (8000c40 <_sbrk+0x68>)
 8000bf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bfa:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <_sbrk+0x64>)
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4413      	add	r3, r2
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d207      	bcs.n	8000c18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c08:	f005 f8b0 	bl	8005d6c <__errno>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	220c      	movs	r2, #12
 8000c10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c12:	f04f 33ff 	mov.w	r3, #4294967295
 8000c16:	e009      	b.n	8000c2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c18:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <_sbrk+0x64>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c1e:	4b07      	ldr	r3, [pc, #28]	; (8000c3c <_sbrk+0x64>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4413      	add	r3, r2
 8000c26:	4a05      	ldr	r2, [pc, #20]	; (8000c3c <_sbrk+0x64>)
 8000c28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3718      	adds	r7, #24
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20020000 	.word	0x20020000
 8000c38:	00000400 	.word	0x00000400
 8000c3c:	20000188 	.word	0x20000188
 8000c40:	20004bb0 	.word	0x20004bb0

08000c44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <SystemInit+0x20>)
 8000c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c4e:	4a05      	ldr	r2, [pc, #20]	; (8000c64 <SystemInit+0x20>)
 8000c50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <_write>:
#include "uart.h"
#include <stdio.h>

extern UART_HandleTypeDef huart1;

int _write(int file, char *p, int len) {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, p, len, 1);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	b29a      	uxth	r2, r3
 8000c78:	2301      	movs	r3, #1
 8000c7a:	68b9      	ldr	r1, [r7, #8]
 8000c7c:	4803      	ldr	r0, [pc, #12]	; (8000c8c <_write+0x24>)
 8000c7e:	f001 ff50 	bl	8002b22 <HAL_UART_Transmit>
	return len;
 8000c82:	687b      	ldr	r3, [r7, #4]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000138 	.word	0x20000138

08000c90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cc8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c94:	480d      	ldr	r0, [pc, #52]	; (8000ccc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c96:	490e      	ldr	r1, [pc, #56]	; (8000cd0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c98:	4a0e      	ldr	r2, [pc, #56]	; (8000cd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c9c:	e002      	b.n	8000ca4 <LoopCopyDataInit>

08000c9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ca2:	3304      	adds	r3, #4

08000ca4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ca6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca8:	d3f9      	bcc.n	8000c9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000caa:	4a0b      	ldr	r2, [pc, #44]	; (8000cd8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cac:	4c0b      	ldr	r4, [pc, #44]	; (8000cdc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb0:	e001      	b.n	8000cb6 <LoopFillZerobss>

08000cb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb4:	3204      	adds	r2, #4

08000cb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb8:	d3fb      	bcc.n	8000cb2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cba:	f7ff ffc3 	bl	8000c44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cbe:	f005 f951 	bl	8005f64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cc2:	f7ff fc5f 	bl	8000584 <main>
  bx  lr    
 8000cc6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ccc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000cd4:	0800704c 	.word	0x0800704c
  ldr r2, =_sbss
 8000cd8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000cdc:	20004bb0 	.word	0x20004bb0

08000ce0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ce0:	e7fe      	b.n	8000ce0 <ADC_IRQHandler>
	...

08000ce4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ce8:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <HAL_Init+0x40>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a0d      	ldr	r2, [pc, #52]	; (8000d24 <HAL_Init+0x40>)
 8000cee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cf2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <HAL_Init+0x40>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a0a      	ldr	r2, [pc, #40]	; (8000d24 <HAL_Init+0x40>)
 8000cfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d00:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <HAL_Init+0x40>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a07      	ldr	r2, [pc, #28]	; (8000d24 <HAL_Init+0x40>)
 8000d06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d0c:	2003      	movs	r0, #3
 8000d0e:	f000 fd2d 	bl	800176c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d12:	200f      	movs	r0, #15
 8000d14:	f000 f808 	bl	8000d28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d18:	f7ff fdf2 	bl	8000900 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40023c00 	.word	0x40023c00

08000d28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d30:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <HAL_InitTick+0x54>)
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <HAL_InitTick+0x58>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d46:	4618      	mov	r0, r3
 8000d48:	f000 fd45 	bl	80017d6 <HAL_SYSTICK_Config>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e00e      	b.n	8000d74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2b0f      	cmp	r3, #15
 8000d5a:	d80a      	bhi.n	8000d72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	6879      	ldr	r1, [r7, #4]
 8000d60:	f04f 30ff 	mov.w	r0, #4294967295
 8000d64:	f000 fd0d 	bl	8001782 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d68:	4a06      	ldr	r2, [pc, #24]	; (8000d84 <HAL_InitTick+0x5c>)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	e000      	b.n	8000d74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20000000 	.word	0x20000000
 8000d80:	20000008 	.word	0x20000008
 8000d84:	20000004 	.word	0x20000004

08000d88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HAL_IncTick+0x20>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	461a      	mov	r2, r3
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <HAL_IncTick+0x24>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4413      	add	r3, r2
 8000d98:	4a04      	ldr	r2, [pc, #16]	; (8000dac <HAL_IncTick+0x24>)
 8000d9a:	6013      	str	r3, [r2, #0]
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	20000008 	.word	0x20000008
 8000dac:	2000018c 	.word	0x2000018c

08000db0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  return uwTick;
 8000db4:	4b03      	ldr	r3, [pc, #12]	; (8000dc4 <HAL_GetTick+0x14>)
 8000db6:	681b      	ldr	r3, [r3, #0]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	2000018c 	.word	0x2000018c

08000dc8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d101      	bne.n	8000dde <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e033      	b.n	8000e46 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d109      	bne.n	8000dfa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff fdb6 	bl	8000958 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2200      	movs	r2, #0
 8000df0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2200      	movs	r2, #0
 8000df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	f003 0310 	and.w	r3, r3, #16
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d118      	bne.n	8000e38 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e0e:	f023 0302 	bic.w	r3, r3, #2
 8000e12:	f043 0202 	orr.w	r2, r3, #2
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f000 fa58 	bl	80012d0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2200      	movs	r2, #0
 8000e24:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	f023 0303 	bic.w	r3, r3, #3
 8000e2e:	f043 0201 	orr.w	r2, r3, #1
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	641a      	str	r2, [r3, #64]	; 0x40
 8000e36:	e001      	b.n	8000e3c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d101      	bne.n	8000e6e <HAL_ADC_Start_DMA+0x1e>
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	e0ce      	b.n	800100c <HAL_ADC_Start_DMA+0x1bc>
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	2201      	movs	r2, #1
 8000e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	f003 0301 	and.w	r3, r3, #1
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d018      	beq.n	8000eb6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	689a      	ldr	r2, [r3, #8]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f042 0201 	orr.w	r2, r2, #1
 8000e92:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e94:	4b5f      	ldr	r3, [pc, #380]	; (8001014 <HAL_ADC_Start_DMA+0x1c4>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a5f      	ldr	r2, [pc, #380]	; (8001018 <HAL_ADC_Start_DMA+0x1c8>)
 8000e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e9e:	0c9a      	lsrs	r2, r3, #18
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	4413      	add	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000ea8:	e002      	b.n	8000eb0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	3b01      	subs	r3, #1
 8000eae:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d1f9      	bne.n	8000eaa <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	689b      	ldr	r3, [r3, #8]
 8000ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ec0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ec4:	d107      	bne.n	8000ed6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	689a      	ldr	r2, [r3, #8]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000ed4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	689b      	ldr	r3, [r3, #8]
 8000edc:	f003 0301 	and.w	r3, r3, #1
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	f040 8086 	bne.w	8000ff2 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eea:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000eee:	f023 0301 	bic.w	r3, r3, #1
 8000ef2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d007      	beq.n	8000f18 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f10:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f24:	d106      	bne.n	8000f34 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2a:	f023 0206 	bic.w	r2, r3, #6
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	645a      	str	r2, [r3, #68]	; 0x44
 8000f32:	e002      	b.n	8000f3a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	2200      	movs	r2, #0
 8000f38:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f42:	4b36      	ldr	r3, [pc, #216]	; (800101c <HAL_ADC_Start_DMA+0x1cc>)
 8000f44:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f4a:	4a35      	ldr	r2, [pc, #212]	; (8001020 <HAL_ADC_Start_DMA+0x1d0>)
 8000f4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f52:	4a34      	ldr	r2, [pc, #208]	; (8001024 <HAL_ADC_Start_DMA+0x1d4>)
 8000f54:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f5a:	4a33      	ldr	r2, [pc, #204]	; (8001028 <HAL_ADC_Start_DMA+0x1d8>)
 8000f5c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000f66:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	685a      	ldr	r2, [r3, #4]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000f76:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	689a      	ldr	r2, [r3, #8]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f86:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	334c      	adds	r3, #76	; 0x4c
 8000f92:	4619      	mov	r1, r3
 8000f94:	68ba      	ldr	r2, [r7, #8]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	f000 fcd8 	bl	800194c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f003 031f 	and.w	r3, r3, #31
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d10f      	bne.n	8000fc8 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d129      	bne.n	800100a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	689a      	ldr	r2, [r3, #8]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000fc4:	609a      	str	r2, [r3, #8]
 8000fc6:	e020      	b.n	800100a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a17      	ldr	r2, [pc, #92]	; (800102c <HAL_ADC_Start_DMA+0x1dc>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d11b      	bne.n	800100a <HAL_ADC_Start_DMA+0x1ba>
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d114      	bne.n	800100a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	689a      	ldr	r2, [r3, #8]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	e00b      	b.n	800100a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	f043 0210 	orr.w	r2, r3, #16
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001002:	f043 0201 	orr.w	r2, r3, #1
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800100a:	2300      	movs	r3, #0
}
 800100c:	4618      	mov	r0, r3
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000000 	.word	0x20000000
 8001018:	431bde83 	.word	0x431bde83
 800101c:	40012300 	.word	0x40012300
 8001020:	080014c9 	.word	0x080014c9
 8001024:	08001583 	.word	0x08001583
 8001028:	0800159f 	.word	0x0800159f
 800102c:	40012000 	.word	0x40012000

08001030 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001076:	2300      	movs	r3, #0
 8001078:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001080:	2b01      	cmp	r3, #1
 8001082:	d101      	bne.n	8001088 <HAL_ADC_ConfigChannel+0x1c>
 8001084:	2302      	movs	r3, #2
 8001086:	e113      	b.n	80012b0 <HAL_ADC_ConfigChannel+0x244>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2201      	movs	r2, #1
 800108c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b09      	cmp	r3, #9
 8001096:	d925      	bls.n	80010e4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	68d9      	ldr	r1, [r3, #12]
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	461a      	mov	r2, r3
 80010a6:	4613      	mov	r3, r2
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	4413      	add	r3, r2
 80010ac:	3b1e      	subs	r3, #30
 80010ae:	2207      	movs	r2, #7
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43da      	mvns	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	400a      	ands	r2, r1
 80010bc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	68d9      	ldr	r1, [r3, #12]
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	689a      	ldr	r2, [r3, #8]
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	4618      	mov	r0, r3
 80010d0:	4603      	mov	r3, r0
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	4403      	add	r3, r0
 80010d6:	3b1e      	subs	r3, #30
 80010d8:	409a      	lsls	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	430a      	orrs	r2, r1
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	e022      	b.n	800112a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	6919      	ldr	r1, [r3, #16]
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	461a      	mov	r2, r3
 80010f2:	4613      	mov	r3, r2
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	4413      	add	r3, r2
 80010f8:	2207      	movs	r2, #7
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43da      	mvns	r2, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	400a      	ands	r2, r1
 8001106:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	6919      	ldr	r1, [r3, #16]
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	689a      	ldr	r2, [r3, #8]
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	b29b      	uxth	r3, r3
 8001118:	4618      	mov	r0, r3
 800111a:	4603      	mov	r3, r0
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	4403      	add	r3, r0
 8001120:	409a      	lsls	r2, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	430a      	orrs	r2, r1
 8001128:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	2b06      	cmp	r3, #6
 8001130:	d824      	bhi.n	800117c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685a      	ldr	r2, [r3, #4]
 800113c:	4613      	mov	r3, r2
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	4413      	add	r3, r2
 8001142:	3b05      	subs	r3, #5
 8001144:	221f      	movs	r2, #31
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43da      	mvns	r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	400a      	ands	r2, r1
 8001152:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	b29b      	uxth	r3, r3
 8001160:	4618      	mov	r0, r3
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685a      	ldr	r2, [r3, #4]
 8001166:	4613      	mov	r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4413      	add	r3, r2
 800116c:	3b05      	subs	r3, #5
 800116e:	fa00 f203 	lsl.w	r2, r0, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	430a      	orrs	r2, r1
 8001178:	635a      	str	r2, [r3, #52]	; 0x34
 800117a:	e04c      	b.n	8001216 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	2b0c      	cmp	r3, #12
 8001182:	d824      	bhi.n	80011ce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685a      	ldr	r2, [r3, #4]
 800118e:	4613      	mov	r3, r2
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	4413      	add	r3, r2
 8001194:	3b23      	subs	r3, #35	; 0x23
 8001196:	221f      	movs	r2, #31
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43da      	mvns	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	400a      	ands	r2, r1
 80011a4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	4618      	mov	r0, r3
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685a      	ldr	r2, [r3, #4]
 80011b8:	4613      	mov	r3, r2
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	4413      	add	r3, r2
 80011be:	3b23      	subs	r3, #35	; 0x23
 80011c0:	fa00 f203 	lsl.w	r2, r0, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	430a      	orrs	r2, r1
 80011ca:	631a      	str	r2, [r3, #48]	; 0x30
 80011cc:	e023      	b.n	8001216 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685a      	ldr	r2, [r3, #4]
 80011d8:	4613      	mov	r3, r2
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	4413      	add	r3, r2
 80011de:	3b41      	subs	r3, #65	; 0x41
 80011e0:	221f      	movs	r2, #31
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43da      	mvns	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	400a      	ands	r2, r1
 80011ee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	4618      	mov	r0, r3
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685a      	ldr	r2, [r3, #4]
 8001202:	4613      	mov	r3, r2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	4413      	add	r3, r2
 8001208:	3b41      	subs	r3, #65	; 0x41
 800120a:	fa00 f203 	lsl.w	r2, r0, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	430a      	orrs	r2, r1
 8001214:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001216:	4b29      	ldr	r3, [pc, #164]	; (80012bc <HAL_ADC_ConfigChannel+0x250>)
 8001218:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a28      	ldr	r2, [pc, #160]	; (80012c0 <HAL_ADC_ConfigChannel+0x254>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d10f      	bne.n	8001244 <HAL_ADC_ConfigChannel+0x1d8>
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2b12      	cmp	r3, #18
 800122a:	d10b      	bne.n	8001244 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a1d      	ldr	r2, [pc, #116]	; (80012c0 <HAL_ADC_ConfigChannel+0x254>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d12b      	bne.n	80012a6 <HAL_ADC_ConfigChannel+0x23a>
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a1c      	ldr	r2, [pc, #112]	; (80012c4 <HAL_ADC_ConfigChannel+0x258>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d003      	beq.n	8001260 <HAL_ADC_ConfigChannel+0x1f4>
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2b11      	cmp	r3, #17
 800125e:	d122      	bne.n	80012a6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a11      	ldr	r2, [pc, #68]	; (80012c4 <HAL_ADC_ConfigChannel+0x258>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d111      	bne.n	80012a6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001282:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <HAL_ADC_ConfigChannel+0x25c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a11      	ldr	r2, [pc, #68]	; (80012cc <HAL_ADC_ConfigChannel+0x260>)
 8001288:	fba2 2303 	umull	r2, r3, r2, r3
 800128c:	0c9a      	lsrs	r2, r3, #18
 800128e:	4613      	mov	r3, r2
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	4413      	add	r3, r2
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001298:	e002      	b.n	80012a0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	3b01      	subs	r3, #1
 800129e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d1f9      	bne.n	800129a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80012ae:	2300      	movs	r3, #0
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3714      	adds	r7, #20
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	40012300 	.word	0x40012300
 80012c0:	40012000 	.word	0x40012000
 80012c4:	10000012 	.word	0x10000012
 80012c8:	20000000 	.word	0x20000000
 80012cc:	431bde83 	.word	0x431bde83

080012d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012d8:	4b79      	ldr	r3, [pc, #484]	; (80014c0 <ADC_Init+0x1f0>)
 80012da:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	685a      	ldr	r2, [r3, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	431a      	orrs	r2, r3
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	685a      	ldr	r2, [r3, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001304:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	6859      	ldr	r1, [r3, #4]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	691b      	ldr	r3, [r3, #16]
 8001310:	021a      	lsls	r2, r3, #8
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	430a      	orrs	r2, r1
 8001318:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	685a      	ldr	r2, [r3, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001328:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	6859      	ldr	r1, [r3, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689a      	ldr	r2, [r3, #8]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	430a      	orrs	r2, r1
 800133a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	689a      	ldr	r2, [r3, #8]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800134a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	6899      	ldr	r1, [r3, #8]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	68da      	ldr	r2, [r3, #12]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	430a      	orrs	r2, r1
 800135c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001362:	4a58      	ldr	r2, [pc, #352]	; (80014c4 <ADC_Init+0x1f4>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d022      	beq.n	80013ae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	689a      	ldr	r2, [r3, #8]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001376:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6899      	ldr	r1, [r3, #8]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	430a      	orrs	r2, r1
 8001388:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	689a      	ldr	r2, [r3, #8]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001398:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	6899      	ldr	r1, [r3, #8]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	430a      	orrs	r2, r1
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	e00f      	b.n	80013ce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	689a      	ldr	r2, [r3, #8]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	689a      	ldr	r2, [r3, #8]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	689a      	ldr	r2, [r3, #8]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f022 0202 	bic.w	r2, r2, #2
 80013dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	6899      	ldr	r1, [r3, #8]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	7e1b      	ldrb	r3, [r3, #24]
 80013e8:	005a      	lsls	r2, r3, #1
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	430a      	orrs	r2, r1
 80013f0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d01b      	beq.n	8001434 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	685a      	ldr	r2, [r3, #4]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800140a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	685a      	ldr	r2, [r3, #4]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800141a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6859      	ldr	r1, [r3, #4]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001426:	3b01      	subs	r3, #1
 8001428:	035a      	lsls	r2, r3, #13
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	430a      	orrs	r2, r1
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	e007      	b.n	8001444 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001442:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001452:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	69db      	ldr	r3, [r3, #28]
 800145e:	3b01      	subs	r3, #1
 8001460:	051a      	lsls	r2, r3, #20
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	430a      	orrs	r2, r1
 8001468:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	689a      	ldr	r2, [r3, #8]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001478:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	6899      	ldr	r1, [r3, #8]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001486:	025a      	lsls	r2, r3, #9
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	430a      	orrs	r2, r1
 800148e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	689a      	ldr	r2, [r3, #8]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800149e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	6899      	ldr	r1, [r3, #8]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	029a      	lsls	r2, r3, #10
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	430a      	orrs	r2, r1
 80014b2:	609a      	str	r2, [r3, #8]
}
 80014b4:	bf00      	nop
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	40012300 	.word	0x40012300
 80014c4:	0f000001 	.word	0x0f000001

080014c8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014d4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d13c      	bne.n	800155c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d12b      	bne.n	8001554 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001500:	2b00      	cmp	r3, #0
 8001502:	d127      	bne.n	8001554 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800150e:	2b00      	cmp	r3, #0
 8001510:	d006      	beq.n	8001520 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800151c:	2b00      	cmp	r3, #0
 800151e:	d119      	bne.n	8001554 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	685a      	ldr	r2, [r3, #4]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f022 0220 	bic.w	r2, r2, #32
 800152e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001540:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d105      	bne.n	8001554 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154c:	f043 0201 	orr.w	r2, r3, #1
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001554:	68f8      	ldr	r0, [r7, #12]
 8001556:	f7ff fd6b 	bl	8001030 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800155a:	e00e      	b.n	800157a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001560:	f003 0310 	and.w	r3, r3, #16
 8001564:	2b00      	cmp	r3, #0
 8001566:	d003      	beq.n	8001570 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f7ff fd75 	bl	8001058 <HAL_ADC_ErrorCallback>
}
 800156e:	e004      	b.n	800157a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	4798      	blx	r3
}
 800157a:	bf00      	nop
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b084      	sub	sp, #16
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800158e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001590:	68f8      	ldr	r0, [r7, #12]
 8001592:	f7ff fd57 	bl	8001044 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001596:	bf00      	nop
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b084      	sub	sp, #16
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015aa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2240      	movs	r2, #64	; 0x40
 80015b0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b6:	f043 0204 	orr.w	r2, r3, #4
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80015be:	68f8      	ldr	r0, [r7, #12]
 80015c0:	f7ff fd4a 	bl	8001058 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80015c4:	bf00      	nop
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015dc:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <__NVIC_SetPriorityGrouping+0x44>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015e2:	68ba      	ldr	r2, [r7, #8]
 80015e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015e8:	4013      	ands	r3, r2
 80015ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015fe:	4a04      	ldr	r2, [pc, #16]	; (8001610 <__NVIC_SetPriorityGrouping+0x44>)
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	60d3      	str	r3, [r2, #12]
}
 8001604:	bf00      	nop
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001618:	4b04      	ldr	r3, [pc, #16]	; (800162c <__NVIC_GetPriorityGrouping+0x18>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	0a1b      	lsrs	r3, r3, #8
 800161e:	f003 0307 	and.w	r3, r3, #7
}
 8001622:	4618      	mov	r0, r3
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800163a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163e:	2b00      	cmp	r3, #0
 8001640:	db0b      	blt.n	800165a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	f003 021f 	and.w	r2, r3, #31
 8001648:	4907      	ldr	r1, [pc, #28]	; (8001668 <__NVIC_EnableIRQ+0x38>)
 800164a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164e:	095b      	lsrs	r3, r3, #5
 8001650:	2001      	movs	r0, #1
 8001652:	fa00 f202 	lsl.w	r2, r0, r2
 8001656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	e000e100 	.word	0xe000e100

0800166c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	6039      	str	r1, [r7, #0]
 8001676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167c:	2b00      	cmp	r3, #0
 800167e:	db0a      	blt.n	8001696 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	b2da      	uxtb	r2, r3
 8001684:	490c      	ldr	r1, [pc, #48]	; (80016b8 <__NVIC_SetPriority+0x4c>)
 8001686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168a:	0112      	lsls	r2, r2, #4
 800168c:	b2d2      	uxtb	r2, r2
 800168e:	440b      	add	r3, r1
 8001690:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001694:	e00a      	b.n	80016ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	b2da      	uxtb	r2, r3
 800169a:	4908      	ldr	r1, [pc, #32]	; (80016bc <__NVIC_SetPriority+0x50>)
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	f003 030f 	and.w	r3, r3, #15
 80016a2:	3b04      	subs	r3, #4
 80016a4:	0112      	lsls	r2, r2, #4
 80016a6:	b2d2      	uxtb	r2, r2
 80016a8:	440b      	add	r3, r1
 80016aa:	761a      	strb	r2, [r3, #24]
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	e000e100 	.word	0xe000e100
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b089      	sub	sp, #36	; 0x24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	f1c3 0307 	rsb	r3, r3, #7
 80016da:	2b04      	cmp	r3, #4
 80016dc:	bf28      	it	cs
 80016de:	2304      	movcs	r3, #4
 80016e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	3304      	adds	r3, #4
 80016e6:	2b06      	cmp	r3, #6
 80016e8:	d902      	bls.n	80016f0 <NVIC_EncodePriority+0x30>
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	3b03      	subs	r3, #3
 80016ee:	e000      	b.n	80016f2 <NVIC_EncodePriority+0x32>
 80016f0:	2300      	movs	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f4:	f04f 32ff 	mov.w	r2, #4294967295
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	43da      	mvns	r2, r3
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	401a      	ands	r2, r3
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001708:	f04f 31ff 	mov.w	r1, #4294967295
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	fa01 f303 	lsl.w	r3, r1, r3
 8001712:	43d9      	mvns	r1, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001718:	4313      	orrs	r3, r2
         );
}
 800171a:	4618      	mov	r0, r3
 800171c:	3724      	adds	r7, #36	; 0x24
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
	...

08001728 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3b01      	subs	r3, #1
 8001734:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001738:	d301      	bcc.n	800173e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800173a:	2301      	movs	r3, #1
 800173c:	e00f      	b.n	800175e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800173e:	4a0a      	ldr	r2, [pc, #40]	; (8001768 <SysTick_Config+0x40>)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	3b01      	subs	r3, #1
 8001744:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001746:	210f      	movs	r1, #15
 8001748:	f04f 30ff 	mov.w	r0, #4294967295
 800174c:	f7ff ff8e 	bl	800166c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001750:	4b05      	ldr	r3, [pc, #20]	; (8001768 <SysTick_Config+0x40>)
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001756:	4b04      	ldr	r3, [pc, #16]	; (8001768 <SysTick_Config+0x40>)
 8001758:	2207      	movs	r2, #7
 800175a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	e000e010 	.word	0xe000e010

0800176c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f7ff ff29 	bl	80015cc <__NVIC_SetPriorityGrouping>
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001782:	b580      	push	{r7, lr}
 8001784:	b086      	sub	sp, #24
 8001786:	af00      	add	r7, sp, #0
 8001788:	4603      	mov	r3, r0
 800178a:	60b9      	str	r1, [r7, #8]
 800178c:	607a      	str	r2, [r7, #4]
 800178e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001794:	f7ff ff3e 	bl	8001614 <__NVIC_GetPriorityGrouping>
 8001798:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	68b9      	ldr	r1, [r7, #8]
 800179e:	6978      	ldr	r0, [r7, #20]
 80017a0:	f7ff ff8e 	bl	80016c0 <NVIC_EncodePriority>
 80017a4:	4602      	mov	r2, r0
 80017a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017aa:	4611      	mov	r1, r2
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff ff5d 	bl	800166c <__NVIC_SetPriority>
}
 80017b2:	bf00      	nop
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b082      	sub	sp, #8
 80017be:	af00      	add	r7, sp, #0
 80017c0:	4603      	mov	r3, r0
 80017c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff ff31 	bl	8001630 <__NVIC_EnableIRQ>
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b082      	sub	sp, #8
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f7ff ffa2 	bl	8001728 <SysTick_Config>
 80017e4:	4603      	mov	r3, r0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
	...

080017f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80017fc:	f7ff fad8 	bl	8000db0 <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d101      	bne.n	800180c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e099      	b.n	8001940 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2202      	movs	r2, #2
 8001810:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f022 0201 	bic.w	r2, r2, #1
 800182a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800182c:	e00f      	b.n	800184e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800182e:	f7ff fabf 	bl	8000db0 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b05      	cmp	r3, #5
 800183a:	d908      	bls.n	800184e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2220      	movs	r2, #32
 8001840:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2203      	movs	r2, #3
 8001846:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e078      	b.n	8001940 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1e8      	bne.n	800182e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001864:	697a      	ldr	r2, [r7, #20]
 8001866:	4b38      	ldr	r3, [pc, #224]	; (8001948 <HAL_DMA_Init+0x158>)
 8001868:	4013      	ands	r3, r2
 800186a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685a      	ldr	r2, [r3, #4]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800187a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	691b      	ldr	r3, [r3, #16]
 8001880:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001886:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001892:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a1b      	ldr	r3, [r3, #32]
 8001898:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800189a:	697a      	ldr	r2, [r7, #20]
 800189c:	4313      	orrs	r3, r2
 800189e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a4:	2b04      	cmp	r3, #4
 80018a6:	d107      	bne.n	80018b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b0:	4313      	orrs	r3, r2
 80018b2:	697a      	ldr	r2, [r7, #20]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	697a      	ldr	r2, [r7, #20]
 80018be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	f023 0307 	bic.w	r3, r3, #7
 80018ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d4:	697a      	ldr	r2, [r7, #20]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018de:	2b04      	cmp	r3, #4
 80018e0:	d117      	bne.n	8001912 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e6:	697a      	ldr	r2, [r7, #20]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d00e      	beq.n	8001912 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f000 fa6f 	bl	8001dd8 <DMA_CheckFifoParam>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d008      	beq.n	8001912 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2240      	movs	r2, #64	; 0x40
 8001904:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2201      	movs	r2, #1
 800190a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800190e:	2301      	movs	r3, #1
 8001910:	e016      	b.n	8001940 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	697a      	ldr	r2, [r7, #20]
 8001918:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f000 fa26 	bl	8001d6c <DMA_CalcBaseAndBitshift>
 8001920:	4603      	mov	r3, r0
 8001922:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001928:	223f      	movs	r2, #63	; 0x3f
 800192a:	409a      	lsls	r2, r3
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2201      	movs	r2, #1
 800193a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	3718      	adds	r7, #24
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	f010803f 	.word	0xf010803f

0800194c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
 8001958:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800195a:	2300      	movs	r3, #0
 800195c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001962:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800196a:	2b01      	cmp	r3, #1
 800196c:	d101      	bne.n	8001972 <HAL_DMA_Start_IT+0x26>
 800196e:	2302      	movs	r3, #2
 8001970:	e040      	b.n	80019f4 <HAL_DMA_Start_IT+0xa8>
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2201      	movs	r2, #1
 8001976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b01      	cmp	r3, #1
 8001984:	d12f      	bne.n	80019e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2202      	movs	r2, #2
 800198a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2200      	movs	r2, #0
 8001992:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	68b9      	ldr	r1, [r7, #8]
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	f000 f9b8 	bl	8001d10 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a4:	223f      	movs	r2, #63	; 0x3f
 80019a6:	409a      	lsls	r2, r3
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f042 0216 	orr.w	r2, r2, #22
 80019ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d007      	beq.n	80019d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f042 0208 	orr.w	r2, r2, #8
 80019d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f042 0201 	orr.w	r2, r2, #1
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	e005      	b.n	80019f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80019ee:	2302      	movs	r3, #2
 80019f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80019f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3718      	adds	r7, #24
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a08:	4b8e      	ldr	r3, [pc, #568]	; (8001c44 <HAL_DMA_IRQHandler+0x248>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a8e      	ldr	r2, [pc, #568]	; (8001c48 <HAL_DMA_IRQHandler+0x24c>)
 8001a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a12:	0a9b      	lsrs	r3, r3, #10
 8001a14:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a26:	2208      	movs	r2, #8
 8001a28:	409a      	lsls	r2, r3
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d01a      	beq.n	8001a68 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0304 	and.w	r3, r3, #4
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d013      	beq.n	8001a68 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f022 0204 	bic.w	r2, r2, #4
 8001a4e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a54:	2208      	movs	r2, #8
 8001a56:	409a      	lsls	r2, r3
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a60:	f043 0201 	orr.w	r2, r3, #1
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	409a      	lsls	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	4013      	ands	r3, r2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d012      	beq.n	8001a9e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	695b      	ldr	r3, [r3, #20]
 8001a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d00b      	beq.n	8001a9e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	409a      	lsls	r2, r3
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a96:	f043 0202 	orr.w	r2, r3, #2
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa2:	2204      	movs	r2, #4
 8001aa4:	409a      	lsls	r2, r3
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d012      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d00b      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac0:	2204      	movs	r2, #4
 8001ac2:	409a      	lsls	r2, r3
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001acc:	f043 0204 	orr.w	r2, r3, #4
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad8:	2210      	movs	r2, #16
 8001ada:	409a      	lsls	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d043      	beq.n	8001b6c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0308 	and.w	r3, r3, #8
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d03c      	beq.n	8001b6c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001af6:	2210      	movs	r2, #16
 8001af8:	409a      	lsls	r2, r3
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d018      	beq.n	8001b3e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d108      	bne.n	8001b2c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d024      	beq.n	8001b6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	4798      	blx	r3
 8001b2a:	e01f      	b.n	8001b6c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d01b      	beq.n	8001b6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	4798      	blx	r3
 8001b3c:	e016      	b.n	8001b6c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d107      	bne.n	8001b5c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f022 0208 	bic.w	r2, r2, #8
 8001b5a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d003      	beq.n	8001b6c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b70:	2220      	movs	r2, #32
 8001b72:	409a      	lsls	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	4013      	ands	r3, r2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f000 808f 	beq.w	8001c9c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0310 	and.w	r3, r3, #16
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	f000 8087 	beq.w	8001c9c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b92:	2220      	movs	r2, #32
 8001b94:	409a      	lsls	r2, r3
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b05      	cmp	r3, #5
 8001ba4:	d136      	bne.n	8001c14 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f022 0216 	bic.w	r2, r2, #22
 8001bb4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	695a      	ldr	r2, [r3, #20]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bc4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d103      	bne.n	8001bd6 <HAL_DMA_IRQHandler+0x1da>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d007      	beq.n	8001be6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 0208 	bic.w	r2, r2, #8
 8001be4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bea:	223f      	movs	r2, #63	; 0x3f
 8001bec:	409a      	lsls	r2, r3
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d07e      	beq.n	8001d08 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	4798      	blx	r3
        }
        return;
 8001c12:	e079      	b.n	8001d08 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d01d      	beq.n	8001c5e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d10d      	bne.n	8001c4c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d031      	beq.n	8001c9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	4798      	blx	r3
 8001c40:	e02c      	b.n	8001c9c <HAL_DMA_IRQHandler+0x2a0>
 8001c42:	bf00      	nop
 8001c44:	20000000 	.word	0x20000000
 8001c48:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d023      	beq.n	8001c9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	4798      	blx	r3
 8001c5c:	e01e      	b.n	8001c9c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d10f      	bne.n	8001c8c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f022 0210 	bic.w	r2, r2, #16
 8001c7a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d003      	beq.n	8001c9c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d032      	beq.n	8001d0a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d022      	beq.n	8001cf6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2205      	movs	r2, #5
 8001cb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f022 0201 	bic.w	r2, r2, #1
 8001cc6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	60bb      	str	r3, [r7, #8]
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d307      	bcc.n	8001ce4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1f2      	bne.n	8001cc8 <HAL_DMA_IRQHandler+0x2cc>
 8001ce2:	e000      	b.n	8001ce6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001ce4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d005      	beq.n	8001d0a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	4798      	blx	r3
 8001d06:	e000      	b.n	8001d0a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001d08:	bf00      	nop
    }
  }
}
 8001d0a:	3718      	adds	r7, #24
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
 8001d1c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d2c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	2b40      	cmp	r3, #64	; 0x40
 8001d3c:	d108      	bne.n	8001d50 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68ba      	ldr	r2, [r7, #8]
 8001d4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001d4e:	e007      	b.n	8001d60 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	68ba      	ldr	r2, [r7, #8]
 8001d56:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	60da      	str	r2, [r3, #12]
}
 8001d60:	bf00      	nop
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	3b10      	subs	r3, #16
 8001d7c:	4a14      	ldr	r2, [pc, #80]	; (8001dd0 <DMA_CalcBaseAndBitshift+0x64>)
 8001d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d82:	091b      	lsrs	r3, r3, #4
 8001d84:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d86:	4a13      	ldr	r2, [pc, #76]	; (8001dd4 <DMA_CalcBaseAndBitshift+0x68>)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2b03      	cmp	r3, #3
 8001d98:	d909      	bls.n	8001dae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001da2:	f023 0303 	bic.w	r3, r3, #3
 8001da6:	1d1a      	adds	r2, r3, #4
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	659a      	str	r2, [r3, #88]	; 0x58
 8001dac:	e007      	b.n	8001dbe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001db6:	f023 0303 	bic.w	r3, r3, #3
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3714      	adds	r7, #20
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	aaaaaaab 	.word	0xaaaaaaab
 8001dd4:	08006f9c 	.word	0x08006f9c

08001dd8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001de0:	2300      	movs	r3, #0
 8001de2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d11f      	bne.n	8001e32 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	2b03      	cmp	r3, #3
 8001df6:	d856      	bhi.n	8001ea6 <DMA_CheckFifoParam+0xce>
 8001df8:	a201      	add	r2, pc, #4	; (adr r2, 8001e00 <DMA_CheckFifoParam+0x28>)
 8001dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dfe:	bf00      	nop
 8001e00:	08001e11 	.word	0x08001e11
 8001e04:	08001e23 	.word	0x08001e23
 8001e08:	08001e11 	.word	0x08001e11
 8001e0c:	08001ea7 	.word	0x08001ea7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d046      	beq.n	8001eaa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e20:	e043      	b.n	8001eaa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e26:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e2a:	d140      	bne.n	8001eae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e30:	e03d      	b.n	8001eae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e3a:	d121      	bne.n	8001e80 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	2b03      	cmp	r3, #3
 8001e40:	d837      	bhi.n	8001eb2 <DMA_CheckFifoParam+0xda>
 8001e42:	a201      	add	r2, pc, #4	; (adr r2, 8001e48 <DMA_CheckFifoParam+0x70>)
 8001e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e48:	08001e59 	.word	0x08001e59
 8001e4c:	08001e5f 	.word	0x08001e5f
 8001e50:	08001e59 	.word	0x08001e59
 8001e54:	08001e71 	.word	0x08001e71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	73fb      	strb	r3, [r7, #15]
      break;
 8001e5c:	e030      	b.n	8001ec0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d025      	beq.n	8001eb6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e6e:	e022      	b.n	8001eb6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e74:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e78:	d11f      	bne.n	8001eba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e7e:	e01c      	b.n	8001eba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d903      	bls.n	8001e8e <DMA_CheckFifoParam+0xb6>
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	2b03      	cmp	r3, #3
 8001e8a:	d003      	beq.n	8001e94 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e8c:	e018      	b.n	8001ec0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	73fb      	strb	r3, [r7, #15]
      break;
 8001e92:	e015      	b.n	8001ec0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d00e      	beq.n	8001ebe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	73fb      	strb	r3, [r7, #15]
      break;
 8001ea4:	e00b      	b.n	8001ebe <DMA_CheckFifoParam+0xe6>
      break;
 8001ea6:	bf00      	nop
 8001ea8:	e00a      	b.n	8001ec0 <DMA_CheckFifoParam+0xe8>
      break;
 8001eaa:	bf00      	nop
 8001eac:	e008      	b.n	8001ec0 <DMA_CheckFifoParam+0xe8>
      break;
 8001eae:	bf00      	nop
 8001eb0:	e006      	b.n	8001ec0 <DMA_CheckFifoParam+0xe8>
      break;
 8001eb2:	bf00      	nop
 8001eb4:	e004      	b.n	8001ec0 <DMA_CheckFifoParam+0xe8>
      break;
 8001eb6:	bf00      	nop
 8001eb8:	e002      	b.n	8001ec0 <DMA_CheckFifoParam+0xe8>
      break;   
 8001eba:	bf00      	nop
 8001ebc:	e000      	b.n	8001ec0 <DMA_CheckFifoParam+0xe8>
      break;
 8001ebe:	bf00      	nop
    }
  } 
  
  return status; 
 8001ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3714      	adds	r7, #20
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop

08001ed0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b089      	sub	sp, #36	; 0x24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001eda:	2300      	movs	r3, #0
 8001edc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61fb      	str	r3, [r7, #28]
 8001eea:	e159      	b.n	80021a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001eec:	2201      	movs	r2, #1
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	4013      	ands	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	f040 8148 	bne.w	800219a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f003 0303 	and.w	r3, r3, #3
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d005      	beq.n	8001f22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d130      	bne.n	8001f84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	2203      	movs	r2, #3
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	43db      	mvns	r3, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4013      	ands	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	68da      	ldr	r2, [r3, #12]
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f58:	2201      	movs	r2, #1
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	43db      	mvns	r3, r3
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4013      	ands	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	091b      	lsrs	r3, r3, #4
 8001f6e:	f003 0201 	and.w	r2, r3, #1
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 0303 	and.w	r3, r3, #3
 8001f8c:	2b03      	cmp	r3, #3
 8001f8e:	d017      	beq.n	8001fc0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	2203      	movs	r2, #3
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f003 0303 	and.w	r3, r3, #3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d123      	bne.n	8002014 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	08da      	lsrs	r2, r3, #3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3208      	adds	r2, #8
 8001fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	f003 0307 	and.w	r3, r3, #7
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	220f      	movs	r2, #15
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	4013      	ands	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	691a      	ldr	r2, [r3, #16]
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	f003 0307 	and.w	r3, r3, #7
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4313      	orrs	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	08da      	lsrs	r2, r3, #3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	3208      	adds	r2, #8
 800200e:	69b9      	ldr	r1, [r7, #24]
 8002010:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	2203      	movs	r2, #3
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	43db      	mvns	r3, r3
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4013      	ands	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f003 0203 	and.w	r2, r3, #3
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	4313      	orrs	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002050:	2b00      	cmp	r3, #0
 8002052:	f000 80a2 	beq.w	800219a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002056:	2300      	movs	r3, #0
 8002058:	60fb      	str	r3, [r7, #12]
 800205a:	4b57      	ldr	r3, [pc, #348]	; (80021b8 <HAL_GPIO_Init+0x2e8>)
 800205c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205e:	4a56      	ldr	r2, [pc, #344]	; (80021b8 <HAL_GPIO_Init+0x2e8>)
 8002060:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002064:	6453      	str	r3, [r2, #68]	; 0x44
 8002066:	4b54      	ldr	r3, [pc, #336]	; (80021b8 <HAL_GPIO_Init+0x2e8>)
 8002068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800206e:	60fb      	str	r3, [r7, #12]
 8002070:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002072:	4a52      	ldr	r2, [pc, #328]	; (80021bc <HAL_GPIO_Init+0x2ec>)
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	089b      	lsrs	r3, r3, #2
 8002078:	3302      	adds	r3, #2
 800207a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800207e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	220f      	movs	r2, #15
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43db      	mvns	r3, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4013      	ands	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a49      	ldr	r2, [pc, #292]	; (80021c0 <HAL_GPIO_Init+0x2f0>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d019      	beq.n	80020d2 <HAL_GPIO_Init+0x202>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a48      	ldr	r2, [pc, #288]	; (80021c4 <HAL_GPIO_Init+0x2f4>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d013      	beq.n	80020ce <HAL_GPIO_Init+0x1fe>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a47      	ldr	r2, [pc, #284]	; (80021c8 <HAL_GPIO_Init+0x2f8>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d00d      	beq.n	80020ca <HAL_GPIO_Init+0x1fa>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a46      	ldr	r2, [pc, #280]	; (80021cc <HAL_GPIO_Init+0x2fc>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d007      	beq.n	80020c6 <HAL_GPIO_Init+0x1f6>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a45      	ldr	r2, [pc, #276]	; (80021d0 <HAL_GPIO_Init+0x300>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d101      	bne.n	80020c2 <HAL_GPIO_Init+0x1f2>
 80020be:	2304      	movs	r3, #4
 80020c0:	e008      	b.n	80020d4 <HAL_GPIO_Init+0x204>
 80020c2:	2307      	movs	r3, #7
 80020c4:	e006      	b.n	80020d4 <HAL_GPIO_Init+0x204>
 80020c6:	2303      	movs	r3, #3
 80020c8:	e004      	b.n	80020d4 <HAL_GPIO_Init+0x204>
 80020ca:	2302      	movs	r3, #2
 80020cc:	e002      	b.n	80020d4 <HAL_GPIO_Init+0x204>
 80020ce:	2301      	movs	r3, #1
 80020d0:	e000      	b.n	80020d4 <HAL_GPIO_Init+0x204>
 80020d2:	2300      	movs	r3, #0
 80020d4:	69fa      	ldr	r2, [r7, #28]
 80020d6:	f002 0203 	and.w	r2, r2, #3
 80020da:	0092      	lsls	r2, r2, #2
 80020dc:	4093      	lsls	r3, r2
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020e4:	4935      	ldr	r1, [pc, #212]	; (80021bc <HAL_GPIO_Init+0x2ec>)
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	089b      	lsrs	r3, r3, #2
 80020ea:	3302      	adds	r3, #2
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020f2:	4b38      	ldr	r3, [pc, #224]	; (80021d4 <HAL_GPIO_Init+0x304>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	43db      	mvns	r3, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4013      	ands	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	4313      	orrs	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002116:	4a2f      	ldr	r2, [pc, #188]	; (80021d4 <HAL_GPIO_Init+0x304>)
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800211c:	4b2d      	ldr	r3, [pc, #180]	; (80021d4 <HAL_GPIO_Init+0x304>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	43db      	mvns	r3, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4013      	ands	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d003      	beq.n	8002140 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	4313      	orrs	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002140:	4a24      	ldr	r2, [pc, #144]	; (80021d4 <HAL_GPIO_Init+0x304>)
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002146:	4b23      	ldr	r3, [pc, #140]	; (80021d4 <HAL_GPIO_Init+0x304>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	43db      	mvns	r3, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4013      	ands	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d003      	beq.n	800216a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	4313      	orrs	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800216a:	4a1a      	ldr	r2, [pc, #104]	; (80021d4 <HAL_GPIO_Init+0x304>)
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002170:	4b18      	ldr	r3, [pc, #96]	; (80021d4 <HAL_GPIO_Init+0x304>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	43db      	mvns	r3, r3
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	4013      	ands	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d003      	beq.n	8002194 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	4313      	orrs	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002194:	4a0f      	ldr	r2, [pc, #60]	; (80021d4 <HAL_GPIO_Init+0x304>)
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	3301      	adds	r3, #1
 800219e:	61fb      	str	r3, [r7, #28]
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	2b0f      	cmp	r3, #15
 80021a4:	f67f aea2 	bls.w	8001eec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021a8:	bf00      	nop
 80021aa:	bf00      	nop
 80021ac:	3724      	adds	r7, #36	; 0x24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	40023800 	.word	0x40023800
 80021bc:	40013800 	.word	0x40013800
 80021c0:	40020000 	.word	0x40020000
 80021c4:	40020400 	.word	0x40020400
 80021c8:	40020800 	.word	0x40020800
 80021cc:	40020c00 	.word	0x40020c00
 80021d0:	40021000 	.word	0x40021000
 80021d4:	40013c00 	.word	0x40013c00

080021d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e267      	b.n	80026ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d075      	beq.n	80022e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021f6:	4b88      	ldr	r3, [pc, #544]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f003 030c 	and.w	r3, r3, #12
 80021fe:	2b04      	cmp	r3, #4
 8002200:	d00c      	beq.n	800221c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002202:	4b85      	ldr	r3, [pc, #532]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800220a:	2b08      	cmp	r3, #8
 800220c:	d112      	bne.n	8002234 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800220e:	4b82      	ldr	r3, [pc, #520]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002216:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800221a:	d10b      	bne.n	8002234 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800221c:	4b7e      	ldr	r3, [pc, #504]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d05b      	beq.n	80022e0 <HAL_RCC_OscConfig+0x108>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d157      	bne.n	80022e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e242      	b.n	80026ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800223c:	d106      	bne.n	800224c <HAL_RCC_OscConfig+0x74>
 800223e:	4b76      	ldr	r3, [pc, #472]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a75      	ldr	r2, [pc, #468]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 8002244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002248:	6013      	str	r3, [r2, #0]
 800224a:	e01d      	b.n	8002288 <HAL_RCC_OscConfig+0xb0>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002254:	d10c      	bne.n	8002270 <HAL_RCC_OscConfig+0x98>
 8002256:	4b70      	ldr	r3, [pc, #448]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a6f      	ldr	r2, [pc, #444]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 800225c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002260:	6013      	str	r3, [r2, #0]
 8002262:	4b6d      	ldr	r3, [pc, #436]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a6c      	ldr	r2, [pc, #432]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 8002268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800226c:	6013      	str	r3, [r2, #0]
 800226e:	e00b      	b.n	8002288 <HAL_RCC_OscConfig+0xb0>
 8002270:	4b69      	ldr	r3, [pc, #420]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a68      	ldr	r2, [pc, #416]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 8002276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800227a:	6013      	str	r3, [r2, #0]
 800227c:	4b66      	ldr	r3, [pc, #408]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a65      	ldr	r2, [pc, #404]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 8002282:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002286:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d013      	beq.n	80022b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002290:	f7fe fd8e 	bl	8000db0 <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002298:	f7fe fd8a 	bl	8000db0 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b64      	cmp	r3, #100	; 0x64
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e207      	b.n	80026ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022aa:	4b5b      	ldr	r3, [pc, #364]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d0f0      	beq.n	8002298 <HAL_RCC_OscConfig+0xc0>
 80022b6:	e014      	b.n	80022e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b8:	f7fe fd7a 	bl	8000db0 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022c0:	f7fe fd76 	bl	8000db0 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b64      	cmp	r3, #100	; 0x64
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e1f3      	b.n	80026ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022d2:	4b51      	ldr	r3, [pc, #324]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f0      	bne.n	80022c0 <HAL_RCC_OscConfig+0xe8>
 80022de:	e000      	b.n	80022e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d063      	beq.n	80023b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022ee:	4b4a      	ldr	r3, [pc, #296]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 030c 	and.w	r3, r3, #12
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00b      	beq.n	8002312 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022fa:	4b47      	ldr	r3, [pc, #284]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002302:	2b08      	cmp	r3, #8
 8002304:	d11c      	bne.n	8002340 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002306:	4b44      	ldr	r3, [pc, #272]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d116      	bne.n	8002340 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002312:	4b41      	ldr	r3, [pc, #260]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d005      	beq.n	800232a <HAL_RCC_OscConfig+0x152>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d001      	beq.n	800232a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e1c7      	b.n	80026ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800232a:	4b3b      	ldr	r3, [pc, #236]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	4937      	ldr	r1, [pc, #220]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 800233a:	4313      	orrs	r3, r2
 800233c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800233e:	e03a      	b.n	80023b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d020      	beq.n	800238a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002348:	4b34      	ldr	r3, [pc, #208]	; (800241c <HAL_RCC_OscConfig+0x244>)
 800234a:	2201      	movs	r2, #1
 800234c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800234e:	f7fe fd2f 	bl	8000db0 <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002354:	e008      	b.n	8002368 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002356:	f7fe fd2b 	bl	8000db0 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e1a8      	b.n	80026ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002368:	4b2b      	ldr	r3, [pc, #172]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d0f0      	beq.n	8002356 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002374:	4b28      	ldr	r3, [pc, #160]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	00db      	lsls	r3, r3, #3
 8002382:	4925      	ldr	r1, [pc, #148]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 8002384:	4313      	orrs	r3, r2
 8002386:	600b      	str	r3, [r1, #0]
 8002388:	e015      	b.n	80023b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800238a:	4b24      	ldr	r3, [pc, #144]	; (800241c <HAL_RCC_OscConfig+0x244>)
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002390:	f7fe fd0e 	bl	8000db0 <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002398:	f7fe fd0a 	bl	8000db0 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e187      	b.n	80026ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023aa:	4b1b      	ldr	r3, [pc, #108]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f0      	bne.n	8002398 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0308 	and.w	r3, r3, #8
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d036      	beq.n	8002430 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d016      	beq.n	80023f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ca:	4b15      	ldr	r3, [pc, #84]	; (8002420 <HAL_RCC_OscConfig+0x248>)
 80023cc:	2201      	movs	r2, #1
 80023ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d0:	f7fe fcee 	bl	8000db0 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023d8:	f7fe fcea 	bl	8000db0 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e167      	b.n	80026ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ea:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <HAL_RCC_OscConfig+0x240>)
 80023ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d0f0      	beq.n	80023d8 <HAL_RCC_OscConfig+0x200>
 80023f6:	e01b      	b.n	8002430 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023f8:	4b09      	ldr	r3, [pc, #36]	; (8002420 <HAL_RCC_OscConfig+0x248>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023fe:	f7fe fcd7 	bl	8000db0 <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002404:	e00e      	b.n	8002424 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002406:	f7fe fcd3 	bl	8000db0 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d907      	bls.n	8002424 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e150      	b.n	80026ba <HAL_RCC_OscConfig+0x4e2>
 8002418:	40023800 	.word	0x40023800
 800241c:	42470000 	.word	0x42470000
 8002420:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002424:	4b88      	ldr	r3, [pc, #544]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 8002426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1ea      	bne.n	8002406 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	f000 8097 	beq.w	800256c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800243e:	2300      	movs	r3, #0
 8002440:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002442:	4b81      	ldr	r3, [pc, #516]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d10f      	bne.n	800246e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800244e:	2300      	movs	r3, #0
 8002450:	60bb      	str	r3, [r7, #8]
 8002452:	4b7d      	ldr	r3, [pc, #500]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	4a7c      	ldr	r2, [pc, #496]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 8002458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800245c:	6413      	str	r3, [r2, #64]	; 0x40
 800245e:	4b7a      	ldr	r3, [pc, #488]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002466:	60bb      	str	r3, [r7, #8]
 8002468:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800246a:	2301      	movs	r3, #1
 800246c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800246e:	4b77      	ldr	r3, [pc, #476]	; (800264c <HAL_RCC_OscConfig+0x474>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002476:	2b00      	cmp	r3, #0
 8002478:	d118      	bne.n	80024ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800247a:	4b74      	ldr	r3, [pc, #464]	; (800264c <HAL_RCC_OscConfig+0x474>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a73      	ldr	r2, [pc, #460]	; (800264c <HAL_RCC_OscConfig+0x474>)
 8002480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002484:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002486:	f7fe fc93 	bl	8000db0 <HAL_GetTick>
 800248a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800248c:	e008      	b.n	80024a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800248e:	f7fe fc8f 	bl	8000db0 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	2b02      	cmp	r3, #2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e10c      	b.n	80026ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a0:	4b6a      	ldr	r3, [pc, #424]	; (800264c <HAL_RCC_OscConfig+0x474>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d0f0      	beq.n	800248e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d106      	bne.n	80024c2 <HAL_RCC_OscConfig+0x2ea>
 80024b4:	4b64      	ldr	r3, [pc, #400]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 80024b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b8:	4a63      	ldr	r2, [pc, #396]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 80024ba:	f043 0301 	orr.w	r3, r3, #1
 80024be:	6713      	str	r3, [r2, #112]	; 0x70
 80024c0:	e01c      	b.n	80024fc <HAL_RCC_OscConfig+0x324>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	2b05      	cmp	r3, #5
 80024c8:	d10c      	bne.n	80024e4 <HAL_RCC_OscConfig+0x30c>
 80024ca:	4b5f      	ldr	r3, [pc, #380]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 80024cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ce:	4a5e      	ldr	r2, [pc, #376]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 80024d0:	f043 0304 	orr.w	r3, r3, #4
 80024d4:	6713      	str	r3, [r2, #112]	; 0x70
 80024d6:	4b5c      	ldr	r3, [pc, #368]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 80024d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024da:	4a5b      	ldr	r2, [pc, #364]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 80024dc:	f043 0301 	orr.w	r3, r3, #1
 80024e0:	6713      	str	r3, [r2, #112]	; 0x70
 80024e2:	e00b      	b.n	80024fc <HAL_RCC_OscConfig+0x324>
 80024e4:	4b58      	ldr	r3, [pc, #352]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 80024e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e8:	4a57      	ldr	r2, [pc, #348]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 80024ea:	f023 0301 	bic.w	r3, r3, #1
 80024ee:	6713      	str	r3, [r2, #112]	; 0x70
 80024f0:	4b55      	ldr	r3, [pc, #340]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 80024f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f4:	4a54      	ldr	r2, [pc, #336]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 80024f6:	f023 0304 	bic.w	r3, r3, #4
 80024fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d015      	beq.n	8002530 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002504:	f7fe fc54 	bl	8000db0 <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800250a:	e00a      	b.n	8002522 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800250c:	f7fe fc50 	bl	8000db0 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	f241 3288 	movw	r2, #5000	; 0x1388
 800251a:	4293      	cmp	r3, r2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e0cb      	b.n	80026ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002522:	4b49      	ldr	r3, [pc, #292]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 8002524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d0ee      	beq.n	800250c <HAL_RCC_OscConfig+0x334>
 800252e:	e014      	b.n	800255a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002530:	f7fe fc3e 	bl	8000db0 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002536:	e00a      	b.n	800254e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002538:	f7fe fc3a 	bl	8000db0 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	f241 3288 	movw	r2, #5000	; 0x1388
 8002546:	4293      	cmp	r3, r2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e0b5      	b.n	80026ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800254e:	4b3e      	ldr	r3, [pc, #248]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 8002550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1ee      	bne.n	8002538 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800255a:	7dfb      	ldrb	r3, [r7, #23]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d105      	bne.n	800256c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002560:	4b39      	ldr	r3, [pc, #228]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 8002562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002564:	4a38      	ldr	r2, [pc, #224]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 8002566:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800256a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	2b00      	cmp	r3, #0
 8002572:	f000 80a1 	beq.w	80026b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002576:	4b34      	ldr	r3, [pc, #208]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 030c 	and.w	r3, r3, #12
 800257e:	2b08      	cmp	r3, #8
 8002580:	d05c      	beq.n	800263c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	2b02      	cmp	r3, #2
 8002588:	d141      	bne.n	800260e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800258a:	4b31      	ldr	r3, [pc, #196]	; (8002650 <HAL_RCC_OscConfig+0x478>)
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002590:	f7fe fc0e 	bl	8000db0 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002598:	f7fe fc0a 	bl	8000db0 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e087      	b.n	80026ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025aa:	4b27      	ldr	r3, [pc, #156]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1f0      	bne.n	8002598 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69da      	ldr	r2, [r3, #28]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a1b      	ldr	r3, [r3, #32]
 80025be:	431a      	orrs	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c4:	019b      	lsls	r3, r3, #6
 80025c6:	431a      	orrs	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025cc:	085b      	lsrs	r3, r3, #1
 80025ce:	3b01      	subs	r3, #1
 80025d0:	041b      	lsls	r3, r3, #16
 80025d2:	431a      	orrs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d8:	061b      	lsls	r3, r3, #24
 80025da:	491b      	ldr	r1, [pc, #108]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025e0:	4b1b      	ldr	r3, [pc, #108]	; (8002650 <HAL_RCC_OscConfig+0x478>)
 80025e2:	2201      	movs	r2, #1
 80025e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e6:	f7fe fbe3 	bl	8000db0 <HAL_GetTick>
 80025ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ec:	e008      	b.n	8002600 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ee:	f7fe fbdf 	bl	8000db0 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e05c      	b.n	80026ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002600:	4b11      	ldr	r3, [pc, #68]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0f0      	beq.n	80025ee <HAL_RCC_OscConfig+0x416>
 800260c:	e054      	b.n	80026b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800260e:	4b10      	ldr	r3, [pc, #64]	; (8002650 <HAL_RCC_OscConfig+0x478>)
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002614:	f7fe fbcc 	bl	8000db0 <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800261c:	f7fe fbc8 	bl	8000db0 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e045      	b.n	80026ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800262e:	4b06      	ldr	r3, [pc, #24]	; (8002648 <HAL_RCC_OscConfig+0x470>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1f0      	bne.n	800261c <HAL_RCC_OscConfig+0x444>
 800263a:	e03d      	b.n	80026b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d107      	bne.n	8002654 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e038      	b.n	80026ba <HAL_RCC_OscConfig+0x4e2>
 8002648:	40023800 	.word	0x40023800
 800264c:	40007000 	.word	0x40007000
 8002650:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002654:	4b1b      	ldr	r3, [pc, #108]	; (80026c4 <HAL_RCC_OscConfig+0x4ec>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d028      	beq.n	80026b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800266c:	429a      	cmp	r2, r3
 800266e:	d121      	bne.n	80026b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800267a:	429a      	cmp	r2, r3
 800267c:	d11a      	bne.n	80026b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002684:	4013      	ands	r3, r2
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800268a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800268c:	4293      	cmp	r3, r2
 800268e:	d111      	bne.n	80026b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269a:	085b      	lsrs	r3, r3, #1
 800269c:	3b01      	subs	r3, #1
 800269e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d107      	bne.n	80026b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d001      	beq.n	80026b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e000      	b.n	80026ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3718      	adds	r7, #24
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	40023800 	.word	0x40023800

080026c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d101      	bne.n	80026dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e0cc      	b.n	8002876 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026dc:	4b68      	ldr	r3, [pc, #416]	; (8002880 <HAL_RCC_ClockConfig+0x1b8>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d90c      	bls.n	8002704 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ea:	4b65      	ldr	r3, [pc, #404]	; (8002880 <HAL_RCC_ClockConfig+0x1b8>)
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026f2:	4b63      	ldr	r3, [pc, #396]	; (8002880 <HAL_RCC_ClockConfig+0x1b8>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d001      	beq.n	8002704 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e0b8      	b.n	8002876 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d020      	beq.n	8002752 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	2b00      	cmp	r3, #0
 800271a:	d005      	beq.n	8002728 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800271c:	4b59      	ldr	r3, [pc, #356]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	4a58      	ldr	r2, [pc, #352]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 8002722:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002726:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0308 	and.w	r3, r3, #8
 8002730:	2b00      	cmp	r3, #0
 8002732:	d005      	beq.n	8002740 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002734:	4b53      	ldr	r3, [pc, #332]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	4a52      	ldr	r2, [pc, #328]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 800273a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800273e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002740:	4b50      	ldr	r3, [pc, #320]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	494d      	ldr	r1, [pc, #308]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 800274e:	4313      	orrs	r3, r2
 8002750:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d044      	beq.n	80027e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d107      	bne.n	8002776 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002766:	4b47      	ldr	r3, [pc, #284]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d119      	bne.n	80027a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e07f      	b.n	8002876 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b02      	cmp	r3, #2
 800277c:	d003      	beq.n	8002786 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002782:	2b03      	cmp	r3, #3
 8002784:	d107      	bne.n	8002796 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002786:	4b3f      	ldr	r3, [pc, #252]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d109      	bne.n	80027a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e06f      	b.n	8002876 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002796:	4b3b      	ldr	r3, [pc, #236]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e067      	b.n	8002876 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027a6:	4b37      	ldr	r3, [pc, #220]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f023 0203 	bic.w	r2, r3, #3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	4934      	ldr	r1, [pc, #208]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027b8:	f7fe fafa 	bl	8000db0 <HAL_GetTick>
 80027bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027be:	e00a      	b.n	80027d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027c0:	f7fe faf6 	bl	8000db0 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e04f      	b.n	8002876 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d6:	4b2b      	ldr	r3, [pc, #172]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 020c 	and.w	r2, r3, #12
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d1eb      	bne.n	80027c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027e8:	4b25      	ldr	r3, [pc, #148]	; (8002880 <HAL_RCC_ClockConfig+0x1b8>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d20c      	bcs.n	8002810 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f6:	4b22      	ldr	r3, [pc, #136]	; (8002880 <HAL_RCC_ClockConfig+0x1b8>)
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fe:	4b20      	ldr	r3, [pc, #128]	; (8002880 <HAL_RCC_ClockConfig+0x1b8>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	429a      	cmp	r2, r3
 800280a:	d001      	beq.n	8002810 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e032      	b.n	8002876 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b00      	cmp	r3, #0
 800281a:	d008      	beq.n	800282e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800281c:	4b19      	ldr	r3, [pc, #100]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	4916      	ldr	r1, [pc, #88]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 800282a:	4313      	orrs	r3, r2
 800282c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0308 	and.w	r3, r3, #8
 8002836:	2b00      	cmp	r3, #0
 8002838:	d009      	beq.n	800284e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800283a:	4b12      	ldr	r3, [pc, #72]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	490e      	ldr	r1, [pc, #56]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 800284a:	4313      	orrs	r3, r2
 800284c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800284e:	f000 f821 	bl	8002894 <HAL_RCC_GetSysClockFreq>
 8002852:	4602      	mov	r2, r0
 8002854:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <HAL_RCC_ClockConfig+0x1bc>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	091b      	lsrs	r3, r3, #4
 800285a:	f003 030f 	and.w	r3, r3, #15
 800285e:	490a      	ldr	r1, [pc, #40]	; (8002888 <HAL_RCC_ClockConfig+0x1c0>)
 8002860:	5ccb      	ldrb	r3, [r1, r3]
 8002862:	fa22 f303 	lsr.w	r3, r2, r3
 8002866:	4a09      	ldr	r2, [pc, #36]	; (800288c <HAL_RCC_ClockConfig+0x1c4>)
 8002868:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800286a:	4b09      	ldr	r3, [pc, #36]	; (8002890 <HAL_RCC_ClockConfig+0x1c8>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f7fe fa5a 	bl	8000d28 <HAL_InitTick>

  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40023c00 	.word	0x40023c00
 8002884:	40023800 	.word	0x40023800
 8002888:	08006f84 	.word	0x08006f84
 800288c:	20000000 	.word	0x20000000
 8002890:	20000004 	.word	0x20000004

08002894 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002894:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002898:	b090      	sub	sp, #64	; 0x40
 800289a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800289c:	2300      	movs	r3, #0
 800289e:	637b      	str	r3, [r7, #52]	; 0x34
 80028a0:	2300      	movs	r3, #0
 80028a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028a4:	2300      	movs	r3, #0
 80028a6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80028a8:	2300      	movs	r3, #0
 80028aa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028ac:	4b59      	ldr	r3, [pc, #356]	; (8002a14 <HAL_RCC_GetSysClockFreq+0x180>)
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f003 030c 	and.w	r3, r3, #12
 80028b4:	2b08      	cmp	r3, #8
 80028b6:	d00d      	beq.n	80028d4 <HAL_RCC_GetSysClockFreq+0x40>
 80028b8:	2b08      	cmp	r3, #8
 80028ba:	f200 80a1 	bhi.w	8002a00 <HAL_RCC_GetSysClockFreq+0x16c>
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d002      	beq.n	80028c8 <HAL_RCC_GetSysClockFreq+0x34>
 80028c2:	2b04      	cmp	r3, #4
 80028c4:	d003      	beq.n	80028ce <HAL_RCC_GetSysClockFreq+0x3a>
 80028c6:	e09b      	b.n	8002a00 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028c8:	4b53      	ldr	r3, [pc, #332]	; (8002a18 <HAL_RCC_GetSysClockFreq+0x184>)
 80028ca:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80028cc:	e09b      	b.n	8002a06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028ce:	4b53      	ldr	r3, [pc, #332]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x188>)
 80028d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80028d2:	e098      	b.n	8002a06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028d4:	4b4f      	ldr	r3, [pc, #316]	; (8002a14 <HAL_RCC_GetSysClockFreq+0x180>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028dc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028de:	4b4d      	ldr	r3, [pc, #308]	; (8002a14 <HAL_RCC_GetSysClockFreq+0x180>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d028      	beq.n	800293c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028ea:	4b4a      	ldr	r3, [pc, #296]	; (8002a14 <HAL_RCC_GetSysClockFreq+0x180>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	099b      	lsrs	r3, r3, #6
 80028f0:	2200      	movs	r2, #0
 80028f2:	623b      	str	r3, [r7, #32]
 80028f4:	627a      	str	r2, [r7, #36]	; 0x24
 80028f6:	6a3b      	ldr	r3, [r7, #32]
 80028f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80028fc:	2100      	movs	r1, #0
 80028fe:	4b47      	ldr	r3, [pc, #284]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x188>)
 8002900:	fb03 f201 	mul.w	r2, r3, r1
 8002904:	2300      	movs	r3, #0
 8002906:	fb00 f303 	mul.w	r3, r0, r3
 800290a:	4413      	add	r3, r2
 800290c:	4a43      	ldr	r2, [pc, #268]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x188>)
 800290e:	fba0 1202 	umull	r1, r2, r0, r2
 8002912:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002914:	460a      	mov	r2, r1
 8002916:	62ba      	str	r2, [r7, #40]	; 0x28
 8002918:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800291a:	4413      	add	r3, r2
 800291c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800291e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002920:	2200      	movs	r2, #0
 8002922:	61bb      	str	r3, [r7, #24]
 8002924:	61fa      	str	r2, [r7, #28]
 8002926:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800292a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800292e:	f7fd fca7 	bl	8000280 <__aeabi_uldivmod>
 8002932:	4602      	mov	r2, r0
 8002934:	460b      	mov	r3, r1
 8002936:	4613      	mov	r3, r2
 8002938:	63fb      	str	r3, [r7, #60]	; 0x3c
 800293a:	e053      	b.n	80029e4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800293c:	4b35      	ldr	r3, [pc, #212]	; (8002a14 <HAL_RCC_GetSysClockFreq+0x180>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	099b      	lsrs	r3, r3, #6
 8002942:	2200      	movs	r2, #0
 8002944:	613b      	str	r3, [r7, #16]
 8002946:	617a      	str	r2, [r7, #20]
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800294e:	f04f 0b00 	mov.w	fp, #0
 8002952:	4652      	mov	r2, sl
 8002954:	465b      	mov	r3, fp
 8002956:	f04f 0000 	mov.w	r0, #0
 800295a:	f04f 0100 	mov.w	r1, #0
 800295e:	0159      	lsls	r1, r3, #5
 8002960:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002964:	0150      	lsls	r0, r2, #5
 8002966:	4602      	mov	r2, r0
 8002968:	460b      	mov	r3, r1
 800296a:	ebb2 080a 	subs.w	r8, r2, sl
 800296e:	eb63 090b 	sbc.w	r9, r3, fp
 8002972:	f04f 0200 	mov.w	r2, #0
 8002976:	f04f 0300 	mov.w	r3, #0
 800297a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800297e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002982:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002986:	ebb2 0408 	subs.w	r4, r2, r8
 800298a:	eb63 0509 	sbc.w	r5, r3, r9
 800298e:	f04f 0200 	mov.w	r2, #0
 8002992:	f04f 0300 	mov.w	r3, #0
 8002996:	00eb      	lsls	r3, r5, #3
 8002998:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800299c:	00e2      	lsls	r2, r4, #3
 800299e:	4614      	mov	r4, r2
 80029a0:	461d      	mov	r5, r3
 80029a2:	eb14 030a 	adds.w	r3, r4, sl
 80029a6:	603b      	str	r3, [r7, #0]
 80029a8:	eb45 030b 	adc.w	r3, r5, fp
 80029ac:	607b      	str	r3, [r7, #4]
 80029ae:	f04f 0200 	mov.w	r2, #0
 80029b2:	f04f 0300 	mov.w	r3, #0
 80029b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029ba:	4629      	mov	r1, r5
 80029bc:	028b      	lsls	r3, r1, #10
 80029be:	4621      	mov	r1, r4
 80029c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029c4:	4621      	mov	r1, r4
 80029c6:	028a      	lsls	r2, r1, #10
 80029c8:	4610      	mov	r0, r2
 80029ca:	4619      	mov	r1, r3
 80029cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ce:	2200      	movs	r2, #0
 80029d0:	60bb      	str	r3, [r7, #8]
 80029d2:	60fa      	str	r2, [r7, #12]
 80029d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029d8:	f7fd fc52 	bl	8000280 <__aeabi_uldivmod>
 80029dc:	4602      	mov	r2, r0
 80029de:	460b      	mov	r3, r1
 80029e0:	4613      	mov	r3, r2
 80029e2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029e4:	4b0b      	ldr	r3, [pc, #44]	; (8002a14 <HAL_RCC_GetSysClockFreq+0x180>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	0c1b      	lsrs	r3, r3, #16
 80029ea:	f003 0303 	and.w	r3, r3, #3
 80029ee:	3301      	adds	r3, #1
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80029f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80029f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80029fe:	e002      	b.n	8002a06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a00:	4b05      	ldr	r3, [pc, #20]	; (8002a18 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a02:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3740      	adds	r7, #64	; 0x40
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a12:	bf00      	nop
 8002a14:	40023800 	.word	0x40023800
 8002a18:	00f42400 	.word	0x00f42400
 8002a1c:	017d7840 	.word	0x017d7840

08002a20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a24:	4b03      	ldr	r3, [pc, #12]	; (8002a34 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a26:	681b      	ldr	r3, [r3, #0]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	20000000 	.word	0x20000000

08002a38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a3c:	f7ff fff0 	bl	8002a20 <HAL_RCC_GetHCLKFreq>
 8002a40:	4602      	mov	r2, r0
 8002a42:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	0a9b      	lsrs	r3, r3, #10
 8002a48:	f003 0307 	and.w	r3, r3, #7
 8002a4c:	4903      	ldr	r1, [pc, #12]	; (8002a5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a4e:	5ccb      	ldrb	r3, [r1, r3]
 8002a50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	08006f94 	.word	0x08006f94

08002a60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a64:	f7ff ffdc 	bl	8002a20 <HAL_RCC_GetHCLKFreq>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	4b05      	ldr	r3, [pc, #20]	; (8002a80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	0b5b      	lsrs	r3, r3, #13
 8002a70:	f003 0307 	and.w	r3, r3, #7
 8002a74:	4903      	ldr	r1, [pc, #12]	; (8002a84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a76:	5ccb      	ldrb	r3, [r1, r3]
 8002a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40023800 	.word	0x40023800
 8002a84:	08006f94 	.word	0x08006f94

08002a88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e03f      	b.n	8002b1a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d106      	bne.n	8002ab4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f7fd ffca 	bl	8000a48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2224      	movs	r2, #36	; 0x24
 8002ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68da      	ldr	r2, [r3, #12]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002aca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 f929 	bl	8002d24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	691a      	ldr	r2, [r3, #16]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ae0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	695a      	ldr	r2, [r3, #20]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002af0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68da      	ldr	r2, [r3, #12]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2220      	movs	r2, #32
 8002b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b08a      	sub	sp, #40	; 0x28
 8002b26:	af02      	add	r7, sp, #8
 8002b28:	60f8      	str	r0, [r7, #12]
 8002b2a:	60b9      	str	r1, [r7, #8]
 8002b2c:	603b      	str	r3, [r7, #0]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b32:	2300      	movs	r3, #0
 8002b34:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b20      	cmp	r3, #32
 8002b40:	d17c      	bne.n	8002c3c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d002      	beq.n	8002b4e <HAL_UART_Transmit+0x2c>
 8002b48:	88fb      	ldrh	r3, [r7, #6]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e075      	b.n	8002c3e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d101      	bne.n	8002b60 <HAL_UART_Transmit+0x3e>
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	e06e      	b.n	8002c3e <HAL_UART_Transmit+0x11c>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2221      	movs	r2, #33	; 0x21
 8002b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b76:	f7fe f91b 	bl	8000db0 <HAL_GetTick>
 8002b7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	88fa      	ldrh	r2, [r7, #6]
 8002b80:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	88fa      	ldrh	r2, [r7, #6]
 8002b86:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b90:	d108      	bne.n	8002ba4 <HAL_UART_Transmit+0x82>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d104      	bne.n	8002ba4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	61bb      	str	r3, [r7, #24]
 8002ba2:	e003      	b.n	8002bac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002bb4:	e02a      	b.n	8002c0c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	9300      	str	r3, [sp, #0]
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	2180      	movs	r1, #128	; 0x80
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f000 f840 	bl	8002c46 <UART_WaitOnFlagUntilTimeout>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e036      	b.n	8002c3e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d10b      	bne.n	8002bee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	881b      	ldrh	r3, [r3, #0]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002be4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	3302      	adds	r3, #2
 8002bea:	61bb      	str	r3, [r7, #24]
 8002bec:	e007      	b.n	8002bfe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	781a      	ldrb	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	3b01      	subs	r3, #1
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1cf      	bne.n	8002bb6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	9300      	str	r3, [sp, #0]
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	2140      	movs	r1, #64	; 0x40
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f000 f810 	bl	8002c46 <UART_WaitOnFlagUntilTimeout>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e006      	b.n	8002c3e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2220      	movs	r2, #32
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	e000      	b.n	8002c3e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002c3c:	2302      	movs	r3, #2
  }
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3720      	adds	r7, #32
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b090      	sub	sp, #64	; 0x40
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	60f8      	str	r0, [r7, #12]
 8002c4e:	60b9      	str	r1, [r7, #8]
 8002c50:	603b      	str	r3, [r7, #0]
 8002c52:	4613      	mov	r3, r2
 8002c54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c56:	e050      	b.n	8002cfa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c5e:	d04c      	beq.n	8002cfa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d007      	beq.n	8002c76 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c66:	f7fe f8a3 	bl	8000db0 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d241      	bcs.n	8002cfa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	330c      	adds	r3, #12
 8002c7c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c80:	e853 3f00 	ldrex	r3, [r3]
 8002c84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c88:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	330c      	adds	r3, #12
 8002c94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c96:	637a      	str	r2, [r7, #52]	; 0x34
 8002c98:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c9e:	e841 2300 	strex	r3, r2, [r1]
 8002ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1e5      	bne.n	8002c76 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	3314      	adds	r3, #20
 8002cb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	e853 3f00 	ldrex	r3, [r3]
 8002cb8:	613b      	str	r3, [r7, #16]
   return(result);
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	f023 0301 	bic.w	r3, r3, #1
 8002cc0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	3314      	adds	r3, #20
 8002cc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cca:	623a      	str	r2, [r7, #32]
 8002ccc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cce:	69f9      	ldr	r1, [r7, #28]
 8002cd0:	6a3a      	ldr	r2, [r7, #32]
 8002cd2:	e841 2300 	strex	r3, r2, [r1]
 8002cd6:	61bb      	str	r3, [r7, #24]
   return(result);
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1e5      	bne.n	8002caa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2220      	movs	r2, #32
 8002cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e00f      	b.n	8002d1a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	4013      	ands	r3, r2
 8002d04:	68ba      	ldr	r2, [r7, #8]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	bf0c      	ite	eq
 8002d0a:	2301      	moveq	r3, #1
 8002d0c:	2300      	movne	r3, #0
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	461a      	mov	r2, r3
 8002d12:	79fb      	ldrb	r3, [r7, #7]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d09f      	beq.n	8002c58 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3740      	adds	r7, #64	; 0x40
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
	...

08002d24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d28:	b0c0      	sub	sp, #256	; 0x100
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d40:	68d9      	ldr	r1, [r3, #12]
 8002d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	ea40 0301 	orr.w	r3, r0, r1
 8002d4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	431a      	orrs	r2, r3
 8002d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002d7c:	f021 010c 	bic.w	r1, r1, #12
 8002d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002d8a:	430b      	orrs	r3, r1
 8002d8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d9e:	6999      	ldr	r1, [r3, #24]
 8002da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	ea40 0301 	orr.w	r3, r0, r1
 8002daa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	4b8f      	ldr	r3, [pc, #572]	; (8002ff0 <UART_SetConfig+0x2cc>)
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d005      	beq.n	8002dc4 <UART_SetConfig+0xa0>
 8002db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	4b8d      	ldr	r3, [pc, #564]	; (8002ff4 <UART_SetConfig+0x2d0>)
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d104      	bne.n	8002dce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002dc4:	f7ff fe4c 	bl	8002a60 <HAL_RCC_GetPCLK2Freq>
 8002dc8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002dcc:	e003      	b.n	8002dd6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002dce:	f7ff fe33 	bl	8002a38 <HAL_RCC_GetPCLK1Freq>
 8002dd2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dda:	69db      	ldr	r3, [r3, #28]
 8002ddc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002de0:	f040 810c 	bne.w	8002ffc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002de4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002de8:	2200      	movs	r2, #0
 8002dea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002dee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002df2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002df6:	4622      	mov	r2, r4
 8002df8:	462b      	mov	r3, r5
 8002dfa:	1891      	adds	r1, r2, r2
 8002dfc:	65b9      	str	r1, [r7, #88]	; 0x58
 8002dfe:	415b      	adcs	r3, r3
 8002e00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e02:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002e06:	4621      	mov	r1, r4
 8002e08:	eb12 0801 	adds.w	r8, r2, r1
 8002e0c:	4629      	mov	r1, r5
 8002e0e:	eb43 0901 	adc.w	r9, r3, r1
 8002e12:	f04f 0200 	mov.w	r2, #0
 8002e16:	f04f 0300 	mov.w	r3, #0
 8002e1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e26:	4690      	mov	r8, r2
 8002e28:	4699      	mov	r9, r3
 8002e2a:	4623      	mov	r3, r4
 8002e2c:	eb18 0303 	adds.w	r3, r8, r3
 8002e30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002e34:	462b      	mov	r3, r5
 8002e36:	eb49 0303 	adc.w	r3, r9, r3
 8002e3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002e4a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002e4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002e52:	460b      	mov	r3, r1
 8002e54:	18db      	adds	r3, r3, r3
 8002e56:	653b      	str	r3, [r7, #80]	; 0x50
 8002e58:	4613      	mov	r3, r2
 8002e5a:	eb42 0303 	adc.w	r3, r2, r3
 8002e5e:	657b      	str	r3, [r7, #84]	; 0x54
 8002e60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002e64:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002e68:	f7fd fa0a 	bl	8000280 <__aeabi_uldivmod>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	460b      	mov	r3, r1
 8002e70:	4b61      	ldr	r3, [pc, #388]	; (8002ff8 <UART_SetConfig+0x2d4>)
 8002e72:	fba3 2302 	umull	r2, r3, r3, r2
 8002e76:	095b      	lsrs	r3, r3, #5
 8002e78:	011c      	lsls	r4, r3, #4
 8002e7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e84:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002e88:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002e8c:	4642      	mov	r2, r8
 8002e8e:	464b      	mov	r3, r9
 8002e90:	1891      	adds	r1, r2, r2
 8002e92:	64b9      	str	r1, [r7, #72]	; 0x48
 8002e94:	415b      	adcs	r3, r3
 8002e96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e98:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002e9c:	4641      	mov	r1, r8
 8002e9e:	eb12 0a01 	adds.w	sl, r2, r1
 8002ea2:	4649      	mov	r1, r9
 8002ea4:	eb43 0b01 	adc.w	fp, r3, r1
 8002ea8:	f04f 0200 	mov.w	r2, #0
 8002eac:	f04f 0300 	mov.w	r3, #0
 8002eb0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002eb4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002eb8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ebc:	4692      	mov	sl, r2
 8002ebe:	469b      	mov	fp, r3
 8002ec0:	4643      	mov	r3, r8
 8002ec2:	eb1a 0303 	adds.w	r3, sl, r3
 8002ec6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002eca:	464b      	mov	r3, r9
 8002ecc:	eb4b 0303 	adc.w	r3, fp, r3
 8002ed0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ee0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002ee4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002ee8:	460b      	mov	r3, r1
 8002eea:	18db      	adds	r3, r3, r3
 8002eec:	643b      	str	r3, [r7, #64]	; 0x40
 8002eee:	4613      	mov	r3, r2
 8002ef0:	eb42 0303 	adc.w	r3, r2, r3
 8002ef4:	647b      	str	r3, [r7, #68]	; 0x44
 8002ef6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002efa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002efe:	f7fd f9bf 	bl	8000280 <__aeabi_uldivmod>
 8002f02:	4602      	mov	r2, r0
 8002f04:	460b      	mov	r3, r1
 8002f06:	4611      	mov	r1, r2
 8002f08:	4b3b      	ldr	r3, [pc, #236]	; (8002ff8 <UART_SetConfig+0x2d4>)
 8002f0a:	fba3 2301 	umull	r2, r3, r3, r1
 8002f0e:	095b      	lsrs	r3, r3, #5
 8002f10:	2264      	movs	r2, #100	; 0x64
 8002f12:	fb02 f303 	mul.w	r3, r2, r3
 8002f16:	1acb      	subs	r3, r1, r3
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002f1e:	4b36      	ldr	r3, [pc, #216]	; (8002ff8 <UART_SetConfig+0x2d4>)
 8002f20:	fba3 2302 	umull	r2, r3, r3, r2
 8002f24:	095b      	lsrs	r3, r3, #5
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f2c:	441c      	add	r4, r3
 8002f2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f32:	2200      	movs	r2, #0
 8002f34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f38:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002f3c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002f40:	4642      	mov	r2, r8
 8002f42:	464b      	mov	r3, r9
 8002f44:	1891      	adds	r1, r2, r2
 8002f46:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f48:	415b      	adcs	r3, r3
 8002f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002f50:	4641      	mov	r1, r8
 8002f52:	1851      	adds	r1, r2, r1
 8002f54:	6339      	str	r1, [r7, #48]	; 0x30
 8002f56:	4649      	mov	r1, r9
 8002f58:	414b      	adcs	r3, r1
 8002f5a:	637b      	str	r3, [r7, #52]	; 0x34
 8002f5c:	f04f 0200 	mov.w	r2, #0
 8002f60:	f04f 0300 	mov.w	r3, #0
 8002f64:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002f68:	4659      	mov	r1, fp
 8002f6a:	00cb      	lsls	r3, r1, #3
 8002f6c:	4651      	mov	r1, sl
 8002f6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f72:	4651      	mov	r1, sl
 8002f74:	00ca      	lsls	r2, r1, #3
 8002f76:	4610      	mov	r0, r2
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	4642      	mov	r2, r8
 8002f7e:	189b      	adds	r3, r3, r2
 8002f80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f84:	464b      	mov	r3, r9
 8002f86:	460a      	mov	r2, r1
 8002f88:	eb42 0303 	adc.w	r3, r2, r3
 8002f8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002f9c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002fa0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	18db      	adds	r3, r3, r3
 8002fa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002faa:	4613      	mov	r3, r2
 8002fac:	eb42 0303 	adc.w	r3, r2, r3
 8002fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fb6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002fba:	f7fd f961 	bl	8000280 <__aeabi_uldivmod>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	4b0d      	ldr	r3, [pc, #52]	; (8002ff8 <UART_SetConfig+0x2d4>)
 8002fc4:	fba3 1302 	umull	r1, r3, r3, r2
 8002fc8:	095b      	lsrs	r3, r3, #5
 8002fca:	2164      	movs	r1, #100	; 0x64
 8002fcc:	fb01 f303 	mul.w	r3, r1, r3
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	3332      	adds	r3, #50	; 0x32
 8002fd6:	4a08      	ldr	r2, [pc, #32]	; (8002ff8 <UART_SetConfig+0x2d4>)
 8002fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fdc:	095b      	lsrs	r3, r3, #5
 8002fde:	f003 0207 	and.w	r2, r3, #7
 8002fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4422      	add	r2, r4
 8002fea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002fec:	e105      	b.n	80031fa <UART_SetConfig+0x4d6>
 8002fee:	bf00      	nop
 8002ff0:	40011000 	.word	0x40011000
 8002ff4:	40011400 	.word	0x40011400
 8002ff8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ffc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003000:	2200      	movs	r2, #0
 8003002:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003006:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800300a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800300e:	4642      	mov	r2, r8
 8003010:	464b      	mov	r3, r9
 8003012:	1891      	adds	r1, r2, r2
 8003014:	6239      	str	r1, [r7, #32]
 8003016:	415b      	adcs	r3, r3
 8003018:	627b      	str	r3, [r7, #36]	; 0x24
 800301a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800301e:	4641      	mov	r1, r8
 8003020:	1854      	adds	r4, r2, r1
 8003022:	4649      	mov	r1, r9
 8003024:	eb43 0501 	adc.w	r5, r3, r1
 8003028:	f04f 0200 	mov.w	r2, #0
 800302c:	f04f 0300 	mov.w	r3, #0
 8003030:	00eb      	lsls	r3, r5, #3
 8003032:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003036:	00e2      	lsls	r2, r4, #3
 8003038:	4614      	mov	r4, r2
 800303a:	461d      	mov	r5, r3
 800303c:	4643      	mov	r3, r8
 800303e:	18e3      	adds	r3, r4, r3
 8003040:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003044:	464b      	mov	r3, r9
 8003046:	eb45 0303 	adc.w	r3, r5, r3
 800304a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800304e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800305a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800305e:	f04f 0200 	mov.w	r2, #0
 8003062:	f04f 0300 	mov.w	r3, #0
 8003066:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800306a:	4629      	mov	r1, r5
 800306c:	008b      	lsls	r3, r1, #2
 800306e:	4621      	mov	r1, r4
 8003070:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003074:	4621      	mov	r1, r4
 8003076:	008a      	lsls	r2, r1, #2
 8003078:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800307c:	f7fd f900 	bl	8000280 <__aeabi_uldivmod>
 8003080:	4602      	mov	r2, r0
 8003082:	460b      	mov	r3, r1
 8003084:	4b60      	ldr	r3, [pc, #384]	; (8003208 <UART_SetConfig+0x4e4>)
 8003086:	fba3 2302 	umull	r2, r3, r3, r2
 800308a:	095b      	lsrs	r3, r3, #5
 800308c:	011c      	lsls	r4, r3, #4
 800308e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003092:	2200      	movs	r2, #0
 8003094:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003098:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800309c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80030a0:	4642      	mov	r2, r8
 80030a2:	464b      	mov	r3, r9
 80030a4:	1891      	adds	r1, r2, r2
 80030a6:	61b9      	str	r1, [r7, #24]
 80030a8:	415b      	adcs	r3, r3
 80030aa:	61fb      	str	r3, [r7, #28]
 80030ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030b0:	4641      	mov	r1, r8
 80030b2:	1851      	adds	r1, r2, r1
 80030b4:	6139      	str	r1, [r7, #16]
 80030b6:	4649      	mov	r1, r9
 80030b8:	414b      	adcs	r3, r1
 80030ba:	617b      	str	r3, [r7, #20]
 80030bc:	f04f 0200 	mov.w	r2, #0
 80030c0:	f04f 0300 	mov.w	r3, #0
 80030c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030c8:	4659      	mov	r1, fp
 80030ca:	00cb      	lsls	r3, r1, #3
 80030cc:	4651      	mov	r1, sl
 80030ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030d2:	4651      	mov	r1, sl
 80030d4:	00ca      	lsls	r2, r1, #3
 80030d6:	4610      	mov	r0, r2
 80030d8:	4619      	mov	r1, r3
 80030da:	4603      	mov	r3, r0
 80030dc:	4642      	mov	r2, r8
 80030de:	189b      	adds	r3, r3, r2
 80030e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80030e4:	464b      	mov	r3, r9
 80030e6:	460a      	mov	r2, r1
 80030e8:	eb42 0303 	adc.w	r3, r2, r3
 80030ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80030f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80030fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80030fc:	f04f 0200 	mov.w	r2, #0
 8003100:	f04f 0300 	mov.w	r3, #0
 8003104:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003108:	4649      	mov	r1, r9
 800310a:	008b      	lsls	r3, r1, #2
 800310c:	4641      	mov	r1, r8
 800310e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003112:	4641      	mov	r1, r8
 8003114:	008a      	lsls	r2, r1, #2
 8003116:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800311a:	f7fd f8b1 	bl	8000280 <__aeabi_uldivmod>
 800311e:	4602      	mov	r2, r0
 8003120:	460b      	mov	r3, r1
 8003122:	4b39      	ldr	r3, [pc, #228]	; (8003208 <UART_SetConfig+0x4e4>)
 8003124:	fba3 1302 	umull	r1, r3, r3, r2
 8003128:	095b      	lsrs	r3, r3, #5
 800312a:	2164      	movs	r1, #100	; 0x64
 800312c:	fb01 f303 	mul.w	r3, r1, r3
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	011b      	lsls	r3, r3, #4
 8003134:	3332      	adds	r3, #50	; 0x32
 8003136:	4a34      	ldr	r2, [pc, #208]	; (8003208 <UART_SetConfig+0x4e4>)
 8003138:	fba2 2303 	umull	r2, r3, r2, r3
 800313c:	095b      	lsrs	r3, r3, #5
 800313e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003142:	441c      	add	r4, r3
 8003144:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003148:	2200      	movs	r2, #0
 800314a:	673b      	str	r3, [r7, #112]	; 0x70
 800314c:	677a      	str	r2, [r7, #116]	; 0x74
 800314e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003152:	4642      	mov	r2, r8
 8003154:	464b      	mov	r3, r9
 8003156:	1891      	adds	r1, r2, r2
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	415b      	adcs	r3, r3
 800315c:	60fb      	str	r3, [r7, #12]
 800315e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003162:	4641      	mov	r1, r8
 8003164:	1851      	adds	r1, r2, r1
 8003166:	6039      	str	r1, [r7, #0]
 8003168:	4649      	mov	r1, r9
 800316a:	414b      	adcs	r3, r1
 800316c:	607b      	str	r3, [r7, #4]
 800316e:	f04f 0200 	mov.w	r2, #0
 8003172:	f04f 0300 	mov.w	r3, #0
 8003176:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800317a:	4659      	mov	r1, fp
 800317c:	00cb      	lsls	r3, r1, #3
 800317e:	4651      	mov	r1, sl
 8003180:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003184:	4651      	mov	r1, sl
 8003186:	00ca      	lsls	r2, r1, #3
 8003188:	4610      	mov	r0, r2
 800318a:	4619      	mov	r1, r3
 800318c:	4603      	mov	r3, r0
 800318e:	4642      	mov	r2, r8
 8003190:	189b      	adds	r3, r3, r2
 8003192:	66bb      	str	r3, [r7, #104]	; 0x68
 8003194:	464b      	mov	r3, r9
 8003196:	460a      	mov	r2, r1
 8003198:	eb42 0303 	adc.w	r3, r2, r3
 800319c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800319e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	663b      	str	r3, [r7, #96]	; 0x60
 80031a8:	667a      	str	r2, [r7, #100]	; 0x64
 80031aa:	f04f 0200 	mov.w	r2, #0
 80031ae:	f04f 0300 	mov.w	r3, #0
 80031b2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80031b6:	4649      	mov	r1, r9
 80031b8:	008b      	lsls	r3, r1, #2
 80031ba:	4641      	mov	r1, r8
 80031bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031c0:	4641      	mov	r1, r8
 80031c2:	008a      	lsls	r2, r1, #2
 80031c4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80031c8:	f7fd f85a 	bl	8000280 <__aeabi_uldivmod>
 80031cc:	4602      	mov	r2, r0
 80031ce:	460b      	mov	r3, r1
 80031d0:	4b0d      	ldr	r3, [pc, #52]	; (8003208 <UART_SetConfig+0x4e4>)
 80031d2:	fba3 1302 	umull	r1, r3, r3, r2
 80031d6:	095b      	lsrs	r3, r3, #5
 80031d8:	2164      	movs	r1, #100	; 0x64
 80031da:	fb01 f303 	mul.w	r3, r1, r3
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	011b      	lsls	r3, r3, #4
 80031e2:	3332      	adds	r3, #50	; 0x32
 80031e4:	4a08      	ldr	r2, [pc, #32]	; (8003208 <UART_SetConfig+0x4e4>)
 80031e6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ea:	095b      	lsrs	r3, r3, #5
 80031ec:	f003 020f 	and.w	r2, r3, #15
 80031f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4422      	add	r2, r4
 80031f8:	609a      	str	r2, [r3, #8]
}
 80031fa:	bf00      	nop
 80031fc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003200:	46bd      	mov	sp, r7
 8003202:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003206:	bf00      	nop
 8003208:	51eb851f 	.word	0x51eb851f

0800320c <__NVIC_SetPriority>:
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	4603      	mov	r3, r0
 8003214:	6039      	str	r1, [r7, #0]
 8003216:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321c:	2b00      	cmp	r3, #0
 800321e:	db0a      	blt.n	8003236 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	b2da      	uxtb	r2, r3
 8003224:	490c      	ldr	r1, [pc, #48]	; (8003258 <__NVIC_SetPriority+0x4c>)
 8003226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800322a:	0112      	lsls	r2, r2, #4
 800322c:	b2d2      	uxtb	r2, r2
 800322e:	440b      	add	r3, r1
 8003230:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003234:	e00a      	b.n	800324c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	b2da      	uxtb	r2, r3
 800323a:	4908      	ldr	r1, [pc, #32]	; (800325c <__NVIC_SetPriority+0x50>)
 800323c:	79fb      	ldrb	r3, [r7, #7]
 800323e:	f003 030f 	and.w	r3, r3, #15
 8003242:	3b04      	subs	r3, #4
 8003244:	0112      	lsls	r2, r2, #4
 8003246:	b2d2      	uxtb	r2, r2
 8003248:	440b      	add	r3, r1
 800324a:	761a      	strb	r2, [r3, #24]
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr
 8003258:	e000e100 	.word	0xe000e100
 800325c:	e000ed00 	.word	0xe000ed00

08003260 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003264:	2100      	movs	r1, #0
 8003266:	f06f 0004 	mvn.w	r0, #4
 800326a:	f7ff ffcf 	bl	800320c <__NVIC_SetPriority>
#endif
}
 800326e:	bf00      	nop
 8003270:	bd80      	pop	{r7, pc}
	...

08003274 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800327a:	f3ef 8305 	mrs	r3, IPSR
 800327e:	603b      	str	r3, [r7, #0]
  return(result);
 8003280:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003286:	f06f 0305 	mvn.w	r3, #5
 800328a:	607b      	str	r3, [r7, #4]
 800328c:	e00c      	b.n	80032a8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800328e:	4b0a      	ldr	r3, [pc, #40]	; (80032b8 <osKernelInitialize+0x44>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d105      	bne.n	80032a2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003296:	4b08      	ldr	r3, [pc, #32]	; (80032b8 <osKernelInitialize+0x44>)
 8003298:	2201      	movs	r2, #1
 800329a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800329c:	2300      	movs	r3, #0
 800329e:	607b      	str	r3, [r7, #4]
 80032a0:	e002      	b.n	80032a8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80032a2:	f04f 33ff 	mov.w	r3, #4294967295
 80032a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80032a8:	687b      	ldr	r3, [r7, #4]
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	20000190 	.word	0x20000190

080032bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032c2:	f3ef 8305 	mrs	r3, IPSR
 80032c6:	603b      	str	r3, [r7, #0]
  return(result);
 80032c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80032ce:	f06f 0305 	mvn.w	r3, #5
 80032d2:	607b      	str	r3, [r7, #4]
 80032d4:	e010      	b.n	80032f8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80032d6:	4b0b      	ldr	r3, [pc, #44]	; (8003304 <osKernelStart+0x48>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d109      	bne.n	80032f2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80032de:	f7ff ffbf 	bl	8003260 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80032e2:	4b08      	ldr	r3, [pc, #32]	; (8003304 <osKernelStart+0x48>)
 80032e4:	2202      	movs	r2, #2
 80032e6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80032e8:	f001 f87c 	bl	80043e4 <vTaskStartScheduler>
      stat = osOK;
 80032ec:	2300      	movs	r3, #0
 80032ee:	607b      	str	r3, [r7, #4]
 80032f0:	e002      	b.n	80032f8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80032f2:	f04f 33ff 	mov.w	r3, #4294967295
 80032f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80032f8:	687b      	ldr	r3, [r7, #4]
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	20000190 	.word	0x20000190

08003308 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003308:	b580      	push	{r7, lr}
 800330a:	b08e      	sub	sp, #56	; 0x38
 800330c:	af04      	add	r7, sp, #16
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003314:	2300      	movs	r3, #0
 8003316:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003318:	f3ef 8305 	mrs	r3, IPSR
 800331c:	617b      	str	r3, [r7, #20]
  return(result);
 800331e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003320:	2b00      	cmp	r3, #0
 8003322:	d17e      	bne.n	8003422 <osThreadNew+0x11a>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d07b      	beq.n	8003422 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800332a:	2380      	movs	r3, #128	; 0x80
 800332c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800332e:	2318      	movs	r3, #24
 8003330:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003332:	2300      	movs	r3, #0
 8003334:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003336:	f04f 33ff 	mov.w	r3, #4294967295
 800333a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d045      	beq.n	80033ce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d002      	beq.n	8003350 <osThreadNew+0x48>
        name = attr->name;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d002      	beq.n	800335e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d008      	beq.n	8003376 <osThreadNew+0x6e>
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	2b38      	cmp	r3, #56	; 0x38
 8003368:	d805      	bhi.n	8003376 <osThreadNew+0x6e>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <osThreadNew+0x72>
        return (NULL);
 8003376:	2300      	movs	r3, #0
 8003378:	e054      	b.n	8003424 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d003      	beq.n	800338a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	089b      	lsrs	r3, r3, #2
 8003388:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00e      	beq.n	80033b0 <osThreadNew+0xa8>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	2bbb      	cmp	r3, #187	; 0xbb
 8003398:	d90a      	bls.n	80033b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d006      	beq.n	80033b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d002      	beq.n	80033b0 <osThreadNew+0xa8>
        mem = 1;
 80033aa:	2301      	movs	r3, #1
 80033ac:	61bb      	str	r3, [r7, #24]
 80033ae:	e010      	b.n	80033d2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d10c      	bne.n	80033d2 <osThreadNew+0xca>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d108      	bne.n	80033d2 <osThreadNew+0xca>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d104      	bne.n	80033d2 <osThreadNew+0xca>
          mem = 0;
 80033c8:	2300      	movs	r3, #0
 80033ca:	61bb      	str	r3, [r7, #24]
 80033cc:	e001      	b.n	80033d2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80033ce:	2300      	movs	r3, #0
 80033d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d110      	bne.n	80033fa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80033e0:	9202      	str	r2, [sp, #8]
 80033e2:	9301      	str	r3, [sp, #4]
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	9300      	str	r3, [sp, #0]
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	6a3a      	ldr	r2, [r7, #32]
 80033ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	f000 fe0c 	bl	800400c <xTaskCreateStatic>
 80033f4:	4603      	mov	r3, r0
 80033f6:	613b      	str	r3, [r7, #16]
 80033f8:	e013      	b.n	8003422 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d110      	bne.n	8003422 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003400:	6a3b      	ldr	r3, [r7, #32]
 8003402:	b29a      	uxth	r2, r3
 8003404:	f107 0310 	add.w	r3, r7, #16
 8003408:	9301      	str	r3, [sp, #4]
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	9300      	str	r3, [sp, #0]
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 fe57 	bl	80040c6 <xTaskCreate>
 8003418:	4603      	mov	r3, r0
 800341a:	2b01      	cmp	r3, #1
 800341c:	d001      	beq.n	8003422 <osThreadNew+0x11a>
            hTask = NULL;
 800341e:	2300      	movs	r3, #0
 8003420:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003422:	693b      	ldr	r3, [r7, #16]
}
 8003424:	4618      	mov	r0, r3
 8003426:	3728      	adds	r7, #40	; 0x28
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003434:	f3ef 8305 	mrs	r3, IPSR
 8003438:	60bb      	str	r3, [r7, #8]
  return(result);
 800343a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800343c:	2b00      	cmp	r3, #0
 800343e:	d003      	beq.n	8003448 <osDelay+0x1c>
    stat = osErrorISR;
 8003440:	f06f 0305 	mvn.w	r3, #5
 8003444:	60fb      	str	r3, [r7, #12]
 8003446:	e007      	b.n	8003458 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003448:	2300      	movs	r3, #0
 800344a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d002      	beq.n	8003458 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 ff92 	bl	800437c <vTaskDelay>
    }
  }

  return (stat);
 8003458:	68fb      	ldr	r3, [r7, #12]
}
 800345a:	4618      	mov	r0, r3
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
	...

08003464 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	4a07      	ldr	r2, [pc, #28]	; (8003490 <vApplicationGetIdleTaskMemory+0x2c>)
 8003474:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	4a06      	ldr	r2, [pc, #24]	; (8003494 <vApplicationGetIdleTaskMemory+0x30>)
 800347a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2280      	movs	r2, #128	; 0x80
 8003480:	601a      	str	r2, [r3, #0]
}
 8003482:	bf00      	nop
 8003484:	3714      	adds	r7, #20
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	20000194 	.word	0x20000194
 8003494:	20000250 	.word	0x20000250

08003498 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	4a07      	ldr	r2, [pc, #28]	; (80034c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80034a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	4a06      	ldr	r2, [pc, #24]	; (80034c8 <vApplicationGetTimerTaskMemory+0x30>)
 80034ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034b6:	601a      	str	r2, [r3, #0]
}
 80034b8:	bf00      	nop
 80034ba:	3714      	adds	r7, #20
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr
 80034c4:	20000450 	.word	0x20000450
 80034c8:	2000050c 	.word	0x2000050c

080034cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f103 0208 	add.w	r2, r3, #8
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f04f 32ff 	mov.w	r2, #4294967295
 80034e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f103 0208 	add.w	r2, r3, #8
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f103 0208 	add.w	r2, r3, #8
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800351a:	bf00      	nop
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr

08003526 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003526:	b480      	push	{r7}
 8003528:	b085      	sub	sp, #20
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
 800352e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	689a      	ldr	r2, [r3, #8]
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	683a      	ldr	r2, [r7, #0]
 8003550:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	1c5a      	adds	r2, r3, #1
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	601a      	str	r2, [r3, #0]
}
 8003562:	bf00      	nop
 8003564:	3714      	adds	r7, #20
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr

0800356e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800356e:	b480      	push	{r7}
 8003570:	b085      	sub	sp, #20
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
 8003576:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003584:	d103      	bne.n	800358e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	60fb      	str	r3, [r7, #12]
 800358c:	e00c      	b.n	80035a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	3308      	adds	r3, #8
 8003592:	60fb      	str	r3, [r7, #12]
 8003594:	e002      	b.n	800359c <vListInsert+0x2e>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	60fb      	str	r3, [r7, #12]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68ba      	ldr	r2, [r7, #8]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d2f6      	bcs.n	8003596 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	685a      	ldr	r2, [r3, #4]
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	683a      	ldr	r2, [r7, #0]
 80035c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	1c5a      	adds	r2, r3, #1
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	601a      	str	r2, [r3, #0]
}
 80035d4:	bf00      	nop
 80035d6:	3714      	adds	r7, #20
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80035e0:	b480      	push	{r7}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	6892      	ldr	r2, [r2, #8]
 80035f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	6852      	ldr	r2, [r2, #4]
 8003600:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	429a      	cmp	r2, r3
 800360a:	d103      	bne.n	8003614 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	1e5a      	subs	r2, r3, #1
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
}
 8003628:	4618      	mov	r0, r3
 800362a:	3714      	adds	r7, #20
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d10a      	bne.n	800365e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800364c:	f383 8811 	msr	BASEPRI, r3
 8003650:	f3bf 8f6f 	isb	sy
 8003654:	f3bf 8f4f 	dsb	sy
 8003658:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800365a:	bf00      	nop
 800365c:	e7fe      	b.n	800365c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800365e:	f002 f879 	bl	8005754 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800366a:	68f9      	ldr	r1, [r7, #12]
 800366c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800366e:	fb01 f303 	mul.w	r3, r1, r3
 8003672:	441a      	add	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800368e:	3b01      	subs	r3, #1
 8003690:	68f9      	ldr	r1, [r7, #12]
 8003692:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003694:	fb01 f303 	mul.w	r3, r1, r3
 8003698:	441a      	add	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	22ff      	movs	r2, #255	; 0xff
 80036a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	22ff      	movs	r2, #255	; 0xff
 80036aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d114      	bne.n	80036de <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d01a      	beq.n	80036f2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	3310      	adds	r3, #16
 80036c0:	4618      	mov	r0, r3
 80036c2:	f001 f929 	bl	8004918 <xTaskRemoveFromEventList>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d012      	beq.n	80036f2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80036cc:	4b0c      	ldr	r3, [pc, #48]	; (8003700 <xQueueGenericReset+0xcc>)
 80036ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	f3bf 8f4f 	dsb	sy
 80036d8:	f3bf 8f6f 	isb	sy
 80036dc:	e009      	b.n	80036f2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	3310      	adds	r3, #16
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7ff fef2 	bl	80034cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	3324      	adds	r3, #36	; 0x24
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff feed 	bl	80034cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80036f2:	f002 f85f 	bl	80057b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80036f6:	2301      	movs	r3, #1
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	e000ed04 	.word	0xe000ed04

08003704 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003704:	b580      	push	{r7, lr}
 8003706:	b08e      	sub	sp, #56	; 0x38
 8003708:	af02      	add	r7, sp, #8
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
 8003710:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d10a      	bne.n	800372e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800371c:	f383 8811 	msr	BASEPRI, r3
 8003720:	f3bf 8f6f 	isb	sy
 8003724:	f3bf 8f4f 	dsb	sy
 8003728:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800372a:	bf00      	nop
 800372c:	e7fe      	b.n	800372c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d10a      	bne.n	800374a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003738:	f383 8811 	msr	BASEPRI, r3
 800373c:	f3bf 8f6f 	isb	sy
 8003740:	f3bf 8f4f 	dsb	sy
 8003744:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003746:	bf00      	nop
 8003748:	e7fe      	b.n	8003748 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d002      	beq.n	8003756 <xQueueGenericCreateStatic+0x52>
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <xQueueGenericCreateStatic+0x56>
 8003756:	2301      	movs	r3, #1
 8003758:	e000      	b.n	800375c <xQueueGenericCreateStatic+0x58>
 800375a:	2300      	movs	r3, #0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10a      	bne.n	8003776 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003764:	f383 8811 	msr	BASEPRI, r3
 8003768:	f3bf 8f6f 	isb	sy
 800376c:	f3bf 8f4f 	dsb	sy
 8003770:	623b      	str	r3, [r7, #32]
}
 8003772:	bf00      	nop
 8003774:	e7fe      	b.n	8003774 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d102      	bne.n	8003782 <xQueueGenericCreateStatic+0x7e>
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <xQueueGenericCreateStatic+0x82>
 8003782:	2301      	movs	r3, #1
 8003784:	e000      	b.n	8003788 <xQueueGenericCreateStatic+0x84>
 8003786:	2300      	movs	r3, #0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d10a      	bne.n	80037a2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800378c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003790:	f383 8811 	msr	BASEPRI, r3
 8003794:	f3bf 8f6f 	isb	sy
 8003798:	f3bf 8f4f 	dsb	sy
 800379c:	61fb      	str	r3, [r7, #28]
}
 800379e:	bf00      	nop
 80037a0:	e7fe      	b.n	80037a0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80037a2:	2350      	movs	r3, #80	; 0x50
 80037a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	2b50      	cmp	r3, #80	; 0x50
 80037aa:	d00a      	beq.n	80037c2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80037ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b0:	f383 8811 	msr	BASEPRI, r3
 80037b4:	f3bf 8f6f 	isb	sy
 80037b8:	f3bf 8f4f 	dsb	sy
 80037bc:	61bb      	str	r3, [r7, #24]
}
 80037be:	bf00      	nop
 80037c0:	e7fe      	b.n	80037c0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80037c2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80037c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00d      	beq.n	80037ea <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80037ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d0:	2201      	movs	r2, #1
 80037d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80037d6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80037da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037dc:	9300      	str	r3, [sp, #0]
 80037de:	4613      	mov	r3, r2
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	68b9      	ldr	r1, [r7, #8]
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f000 f805 	bl	80037f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80037ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3730      	adds	r7, #48	; 0x30
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
 8003800:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d103      	bne.n	8003810 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	69ba      	ldr	r2, [r7, #24]
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	e002      	b.n	8003816 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	68ba      	ldr	r2, [r7, #8]
 8003820:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003822:	2101      	movs	r1, #1
 8003824:	69b8      	ldr	r0, [r7, #24]
 8003826:	f7ff ff05 	bl	8003634 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	78fa      	ldrb	r2, [r7, #3]
 800382e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003832:	bf00      	nop
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
	...

0800383c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b08e      	sub	sp, #56	; 0x38
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
 8003848:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800384a:	2300      	movs	r3, #0
 800384c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003854:	2b00      	cmp	r3, #0
 8003856:	d10a      	bne.n	800386e <xQueueGenericSend+0x32>
	__asm volatile
 8003858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800385c:	f383 8811 	msr	BASEPRI, r3
 8003860:	f3bf 8f6f 	isb	sy
 8003864:	f3bf 8f4f 	dsb	sy
 8003868:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800386a:	bf00      	nop
 800386c:	e7fe      	b.n	800386c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d103      	bne.n	800387c <xQueueGenericSend+0x40>
 8003874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003878:	2b00      	cmp	r3, #0
 800387a:	d101      	bne.n	8003880 <xQueueGenericSend+0x44>
 800387c:	2301      	movs	r3, #1
 800387e:	e000      	b.n	8003882 <xQueueGenericSend+0x46>
 8003880:	2300      	movs	r3, #0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10a      	bne.n	800389c <xQueueGenericSend+0x60>
	__asm volatile
 8003886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800388a:	f383 8811 	msr	BASEPRI, r3
 800388e:	f3bf 8f6f 	isb	sy
 8003892:	f3bf 8f4f 	dsb	sy
 8003896:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003898:	bf00      	nop
 800389a:	e7fe      	b.n	800389a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d103      	bne.n	80038aa <xQueueGenericSend+0x6e>
 80038a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d101      	bne.n	80038ae <xQueueGenericSend+0x72>
 80038aa:	2301      	movs	r3, #1
 80038ac:	e000      	b.n	80038b0 <xQueueGenericSend+0x74>
 80038ae:	2300      	movs	r3, #0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d10a      	bne.n	80038ca <xQueueGenericSend+0x8e>
	__asm volatile
 80038b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b8:	f383 8811 	msr	BASEPRI, r3
 80038bc:	f3bf 8f6f 	isb	sy
 80038c0:	f3bf 8f4f 	dsb	sy
 80038c4:	623b      	str	r3, [r7, #32]
}
 80038c6:	bf00      	nop
 80038c8:	e7fe      	b.n	80038c8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80038ca:	f001 f9e7 	bl	8004c9c <xTaskGetSchedulerState>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d102      	bne.n	80038da <xQueueGenericSend+0x9e>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <xQueueGenericSend+0xa2>
 80038da:	2301      	movs	r3, #1
 80038dc:	e000      	b.n	80038e0 <xQueueGenericSend+0xa4>
 80038de:	2300      	movs	r3, #0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d10a      	bne.n	80038fa <xQueueGenericSend+0xbe>
	__asm volatile
 80038e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e8:	f383 8811 	msr	BASEPRI, r3
 80038ec:	f3bf 8f6f 	isb	sy
 80038f0:	f3bf 8f4f 	dsb	sy
 80038f4:	61fb      	str	r3, [r7, #28]
}
 80038f6:	bf00      	nop
 80038f8:	e7fe      	b.n	80038f8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80038fa:	f001 ff2b 	bl	8005754 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80038fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003900:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003906:	429a      	cmp	r2, r3
 8003908:	d302      	bcc.n	8003910 <xQueueGenericSend+0xd4>
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	2b02      	cmp	r3, #2
 800390e:	d129      	bne.n	8003964 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	68b9      	ldr	r1, [r7, #8]
 8003914:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003916:	f000 fa0b 	bl	8003d30 <prvCopyDataToQueue>
 800391a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800391c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003920:	2b00      	cmp	r3, #0
 8003922:	d010      	beq.n	8003946 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003926:	3324      	adds	r3, #36	; 0x24
 8003928:	4618      	mov	r0, r3
 800392a:	f000 fff5 	bl	8004918 <xTaskRemoveFromEventList>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d013      	beq.n	800395c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003934:	4b3f      	ldr	r3, [pc, #252]	; (8003a34 <xQueueGenericSend+0x1f8>)
 8003936:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800393a:	601a      	str	r2, [r3, #0]
 800393c:	f3bf 8f4f 	dsb	sy
 8003940:	f3bf 8f6f 	isb	sy
 8003944:	e00a      	b.n	800395c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003948:	2b00      	cmp	r3, #0
 800394a:	d007      	beq.n	800395c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800394c:	4b39      	ldr	r3, [pc, #228]	; (8003a34 <xQueueGenericSend+0x1f8>)
 800394e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	f3bf 8f4f 	dsb	sy
 8003958:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800395c:	f001 ff2a 	bl	80057b4 <vPortExitCritical>
				return pdPASS;
 8003960:	2301      	movs	r3, #1
 8003962:	e063      	b.n	8003a2c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d103      	bne.n	8003972 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800396a:	f001 ff23 	bl	80057b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800396e:	2300      	movs	r3, #0
 8003970:	e05c      	b.n	8003a2c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003974:	2b00      	cmp	r3, #0
 8003976:	d106      	bne.n	8003986 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003978:	f107 0314 	add.w	r3, r7, #20
 800397c:	4618      	mov	r0, r3
 800397e:	f001 f82f 	bl	80049e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003982:	2301      	movs	r3, #1
 8003984:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003986:	f001 ff15 	bl	80057b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800398a:	f000 fd9b 	bl	80044c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800398e:	f001 fee1 	bl	8005754 <vPortEnterCritical>
 8003992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003994:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003998:	b25b      	sxtb	r3, r3
 800399a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800399e:	d103      	bne.n	80039a8 <xQueueGenericSend+0x16c>
 80039a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039ae:	b25b      	sxtb	r3, r3
 80039b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b4:	d103      	bne.n	80039be <xQueueGenericSend+0x182>
 80039b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039be:	f001 fef9 	bl	80057b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80039c2:	1d3a      	adds	r2, r7, #4
 80039c4:	f107 0314 	add.w	r3, r7, #20
 80039c8:	4611      	mov	r1, r2
 80039ca:	4618      	mov	r0, r3
 80039cc:	f001 f81e 	bl	8004a0c <xTaskCheckForTimeOut>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d124      	bne.n	8003a20 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80039d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039d8:	f000 faa2 	bl	8003f20 <prvIsQueueFull>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d018      	beq.n	8003a14 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80039e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e4:	3310      	adds	r3, #16
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	4611      	mov	r1, r2
 80039ea:	4618      	mov	r0, r3
 80039ec:	f000 ff44 	bl	8004878 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80039f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039f2:	f000 fa2d 	bl	8003e50 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80039f6:	f000 fd73 	bl	80044e0 <xTaskResumeAll>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f47f af7c 	bne.w	80038fa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003a02:	4b0c      	ldr	r3, [pc, #48]	; (8003a34 <xQueueGenericSend+0x1f8>)
 8003a04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a08:	601a      	str	r2, [r3, #0]
 8003a0a:	f3bf 8f4f 	dsb	sy
 8003a0e:	f3bf 8f6f 	isb	sy
 8003a12:	e772      	b.n	80038fa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003a14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a16:	f000 fa1b 	bl	8003e50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a1a:	f000 fd61 	bl	80044e0 <xTaskResumeAll>
 8003a1e:	e76c      	b.n	80038fa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003a20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a22:	f000 fa15 	bl	8003e50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a26:	f000 fd5b 	bl	80044e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003a2a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3738      	adds	r7, #56	; 0x38
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	e000ed04 	.word	0xe000ed04

08003a38 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b090      	sub	sp, #64	; 0x40
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
 8003a44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10a      	bne.n	8003a66 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a54:	f383 8811 	msr	BASEPRI, r3
 8003a58:	f3bf 8f6f 	isb	sy
 8003a5c:	f3bf 8f4f 	dsb	sy
 8003a60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003a62:	bf00      	nop
 8003a64:	e7fe      	b.n	8003a64 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d103      	bne.n	8003a74 <xQueueGenericSendFromISR+0x3c>
 8003a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d101      	bne.n	8003a78 <xQueueGenericSendFromISR+0x40>
 8003a74:	2301      	movs	r3, #1
 8003a76:	e000      	b.n	8003a7a <xQueueGenericSendFromISR+0x42>
 8003a78:	2300      	movs	r3, #0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10a      	bne.n	8003a94 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a82:	f383 8811 	msr	BASEPRI, r3
 8003a86:	f3bf 8f6f 	isb	sy
 8003a8a:	f3bf 8f4f 	dsb	sy
 8003a8e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003a90:	bf00      	nop
 8003a92:	e7fe      	b.n	8003a92 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d103      	bne.n	8003aa2 <xQueueGenericSendFromISR+0x6a>
 8003a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d101      	bne.n	8003aa6 <xQueueGenericSendFromISR+0x6e>
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e000      	b.n	8003aa8 <xQueueGenericSendFromISR+0x70>
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10a      	bne.n	8003ac2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab0:	f383 8811 	msr	BASEPRI, r3
 8003ab4:	f3bf 8f6f 	isb	sy
 8003ab8:	f3bf 8f4f 	dsb	sy
 8003abc:	623b      	str	r3, [r7, #32]
}
 8003abe:	bf00      	nop
 8003ac0:	e7fe      	b.n	8003ac0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003ac2:	f001 ff29 	bl	8005918 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003ac6:	f3ef 8211 	mrs	r2, BASEPRI
 8003aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ace:	f383 8811 	msr	BASEPRI, r3
 8003ad2:	f3bf 8f6f 	isb	sy
 8003ad6:	f3bf 8f4f 	dsb	sy
 8003ada:	61fa      	str	r2, [r7, #28]
 8003adc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003ade:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003ae0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d302      	bcc.n	8003af4 <xQueueGenericSendFromISR+0xbc>
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d12f      	bne.n	8003b54 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003afa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b02:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b04:	683a      	ldr	r2, [r7, #0]
 8003b06:	68b9      	ldr	r1, [r7, #8]
 8003b08:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003b0a:	f000 f911 	bl	8003d30 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003b0e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b16:	d112      	bne.n	8003b3e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d016      	beq.n	8003b4e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b22:	3324      	adds	r3, #36	; 0x24
 8003b24:	4618      	mov	r0, r3
 8003b26:	f000 fef7 	bl	8004918 <xTaskRemoveFromEventList>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00e      	beq.n	8003b4e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00b      	beq.n	8003b4e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	601a      	str	r2, [r3, #0]
 8003b3c:	e007      	b.n	8003b4e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003b3e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003b42:	3301      	adds	r3, #1
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	b25a      	sxtb	r2, r3
 8003b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003b52:	e001      	b.n	8003b58 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003b54:	2300      	movs	r3, #0
 8003b56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b5a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003b62:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003b64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3740      	adds	r7, #64	; 0x40
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
	...

08003b70 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b08c      	sub	sp, #48	; 0x30
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10a      	bne.n	8003ba0 <xQueueReceive+0x30>
	__asm volatile
 8003b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b8e:	f383 8811 	msr	BASEPRI, r3
 8003b92:	f3bf 8f6f 	isb	sy
 8003b96:	f3bf 8f4f 	dsb	sy
 8003b9a:	623b      	str	r3, [r7, #32]
}
 8003b9c:	bf00      	nop
 8003b9e:	e7fe      	b.n	8003b9e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d103      	bne.n	8003bae <xQueueReceive+0x3e>
 8003ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d101      	bne.n	8003bb2 <xQueueReceive+0x42>
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e000      	b.n	8003bb4 <xQueueReceive+0x44>
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d10a      	bne.n	8003bce <xQueueReceive+0x5e>
	__asm volatile
 8003bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bbc:	f383 8811 	msr	BASEPRI, r3
 8003bc0:	f3bf 8f6f 	isb	sy
 8003bc4:	f3bf 8f4f 	dsb	sy
 8003bc8:	61fb      	str	r3, [r7, #28]
}
 8003bca:	bf00      	nop
 8003bcc:	e7fe      	b.n	8003bcc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003bce:	f001 f865 	bl	8004c9c <xTaskGetSchedulerState>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d102      	bne.n	8003bde <xQueueReceive+0x6e>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <xQueueReceive+0x72>
 8003bde:	2301      	movs	r3, #1
 8003be0:	e000      	b.n	8003be4 <xQueueReceive+0x74>
 8003be2:	2300      	movs	r3, #0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d10a      	bne.n	8003bfe <xQueueReceive+0x8e>
	__asm volatile
 8003be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bec:	f383 8811 	msr	BASEPRI, r3
 8003bf0:	f3bf 8f6f 	isb	sy
 8003bf4:	f3bf 8f4f 	dsb	sy
 8003bf8:	61bb      	str	r3, [r7, #24]
}
 8003bfa:	bf00      	nop
 8003bfc:	e7fe      	b.n	8003bfc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003bfe:	f001 fda9 	bl	8005754 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c06:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d01f      	beq.n	8003c4e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003c0e:	68b9      	ldr	r1, [r7, #8]
 8003c10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c12:	f000 f8f7 	bl	8003e04 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c18:	1e5a      	subs	r2, r3, #1
 8003c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00f      	beq.n	8003c46 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c28:	3310      	adds	r3, #16
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f000 fe74 	bl	8004918 <xTaskRemoveFromEventList>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d007      	beq.n	8003c46 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003c36:	4b3d      	ldr	r3, [pc, #244]	; (8003d2c <xQueueReceive+0x1bc>)
 8003c38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	f3bf 8f4f 	dsb	sy
 8003c42:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003c46:	f001 fdb5 	bl	80057b4 <vPortExitCritical>
				return pdPASS;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e069      	b.n	8003d22 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d103      	bne.n	8003c5c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c54:	f001 fdae 	bl	80057b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	e062      	b.n	8003d22 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d106      	bne.n	8003c70 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c62:	f107 0310 	add.w	r3, r7, #16
 8003c66:	4618      	mov	r0, r3
 8003c68:	f000 feba 	bl	80049e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c70:	f001 fda0 	bl	80057b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c74:	f000 fc26 	bl	80044c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c78:	f001 fd6c 	bl	8005754 <vPortEnterCritical>
 8003c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c82:	b25b      	sxtb	r3, r3
 8003c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c88:	d103      	bne.n	8003c92 <xQueueReceive+0x122>
 8003c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c98:	b25b      	sxtb	r3, r3
 8003c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c9e:	d103      	bne.n	8003ca8 <xQueueReceive+0x138>
 8003ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ca8:	f001 fd84 	bl	80057b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003cac:	1d3a      	adds	r2, r7, #4
 8003cae:	f107 0310 	add.w	r3, r7, #16
 8003cb2:	4611      	mov	r1, r2
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f000 fea9 	bl	8004a0c <xTaskCheckForTimeOut>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d123      	bne.n	8003d08 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003cc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cc2:	f000 f917 	bl	8003ef4 <prvIsQueueEmpty>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d017      	beq.n	8003cfc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cce:	3324      	adds	r3, #36	; 0x24
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	4611      	mov	r1, r2
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f000 fdcf 	bl	8004878 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003cda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cdc:	f000 f8b8 	bl	8003e50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003ce0:	f000 fbfe 	bl	80044e0 <xTaskResumeAll>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d189      	bne.n	8003bfe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003cea:	4b10      	ldr	r3, [pc, #64]	; (8003d2c <xQueueReceive+0x1bc>)
 8003cec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cf0:	601a      	str	r2, [r3, #0]
 8003cf2:	f3bf 8f4f 	dsb	sy
 8003cf6:	f3bf 8f6f 	isb	sy
 8003cfa:	e780      	b.n	8003bfe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003cfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cfe:	f000 f8a7 	bl	8003e50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d02:	f000 fbed 	bl	80044e0 <xTaskResumeAll>
 8003d06:	e77a      	b.n	8003bfe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003d08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d0a:	f000 f8a1 	bl	8003e50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d0e:	f000 fbe7 	bl	80044e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d14:	f000 f8ee 	bl	8003ef4 <prvIsQueueEmpty>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f43f af6f 	beq.w	8003bfe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003d20:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3730      	adds	r7, #48	; 0x30
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	e000ed04 	.word	0xe000ed04

08003d30 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d44:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d10d      	bne.n	8003d6a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d14d      	bne.n	8003df2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f000 ffbc 	bl	8004cd8 <xTaskPriorityDisinherit>
 8003d60:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	609a      	str	r2, [r3, #8]
 8003d68:	e043      	b.n	8003df2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d119      	bne.n	8003da4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6858      	ldr	r0, [r3, #4]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d78:	461a      	mov	r2, r3
 8003d7a:	68b9      	ldr	r1, [r7, #8]
 8003d7c:	f002 f919 	bl	8005fb2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d88:	441a      	add	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	685a      	ldr	r2, [r3, #4]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d32b      	bcc.n	8003df2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	605a      	str	r2, [r3, #4]
 8003da2:	e026      	b.n	8003df2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	68d8      	ldr	r0, [r3, #12]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dac:	461a      	mov	r2, r3
 8003dae:	68b9      	ldr	r1, [r7, #8]
 8003db0:	f002 f8ff 	bl	8005fb2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	68da      	ldr	r2, [r3, #12]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbc:	425b      	negs	r3, r3
 8003dbe:	441a      	add	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	68da      	ldr	r2, [r3, #12]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d207      	bcs.n	8003de0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	689a      	ldr	r2, [r3, #8]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd8:	425b      	negs	r3, r3
 8003dda:	441a      	add	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d105      	bne.n	8003df2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d002      	beq.n	8003df2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	3b01      	subs	r3, #1
 8003df0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	1c5a      	adds	r2, r3, #1
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003dfa:	697b      	ldr	r3, [r7, #20]
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3718      	adds	r7, #24
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d018      	beq.n	8003e48 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	68da      	ldr	r2, [r3, #12]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	441a      	add	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	68da      	ldr	r2, [r3, #12]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d303      	bcc.n	8003e38 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	68d9      	ldr	r1, [r3, #12]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e40:	461a      	mov	r2, r3
 8003e42:	6838      	ldr	r0, [r7, #0]
 8003e44:	f002 f8b5 	bl	8005fb2 <memcpy>
	}
}
 8003e48:	bf00      	nop
 8003e4a:	3708      	adds	r7, #8
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003e58:	f001 fc7c 	bl	8005754 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e62:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e64:	e011      	b.n	8003e8a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d012      	beq.n	8003e94 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	3324      	adds	r3, #36	; 0x24
 8003e72:	4618      	mov	r0, r3
 8003e74:	f000 fd50 	bl	8004918 <xTaskRemoveFromEventList>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003e7e:	f000 fe27 	bl	8004ad0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003e82:	7bfb      	ldrb	r3, [r7, #15]
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	dce9      	bgt.n	8003e66 <prvUnlockQueue+0x16>
 8003e92:	e000      	b.n	8003e96 <prvUnlockQueue+0x46>
					break;
 8003e94:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	22ff      	movs	r2, #255	; 0xff
 8003e9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003e9e:	f001 fc89 	bl	80057b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003ea2:	f001 fc57 	bl	8005754 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003eac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003eae:	e011      	b.n	8003ed4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d012      	beq.n	8003ede <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	3310      	adds	r3, #16
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f000 fd2b 	bl	8004918 <xTaskRemoveFromEventList>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003ec8:	f000 fe02 	bl	8004ad0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003ecc:	7bbb      	ldrb	r3, [r7, #14]
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ed4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	dce9      	bgt.n	8003eb0 <prvUnlockQueue+0x60>
 8003edc:	e000      	b.n	8003ee0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003ede:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	22ff      	movs	r2, #255	; 0xff
 8003ee4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003ee8:	f001 fc64 	bl	80057b4 <vPortExitCritical>
}
 8003eec:	bf00      	nop
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003efc:	f001 fc2a 	bl	8005754 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d102      	bne.n	8003f0e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	60fb      	str	r3, [r7, #12]
 8003f0c:	e001      	b.n	8003f12 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f12:	f001 fc4f 	bl	80057b4 <vPortExitCritical>

	return xReturn;
 8003f16:	68fb      	ldr	r3, [r7, #12]
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3710      	adds	r7, #16
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f28:	f001 fc14 	bl	8005754 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d102      	bne.n	8003f3e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	60fb      	str	r3, [r7, #12]
 8003f3c:	e001      	b.n	8003f42 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f42:	f001 fc37 	bl	80057b4 <vPortExitCritical>

	return xReturn;
 8003f46:	68fb      	ldr	r3, [r7, #12]
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3710      	adds	r7, #16
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003f50:	b480      	push	{r7}
 8003f52:	b085      	sub	sp, #20
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	60fb      	str	r3, [r7, #12]
 8003f5e:	e014      	b.n	8003f8a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003f60:	4a0f      	ldr	r2, [pc, #60]	; (8003fa0 <vQueueAddToRegistry+0x50>)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d10b      	bne.n	8003f84 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003f6c:	490c      	ldr	r1, [pc, #48]	; (8003fa0 <vQueueAddToRegistry+0x50>)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	683a      	ldr	r2, [r7, #0]
 8003f72:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003f76:	4a0a      	ldr	r2, [pc, #40]	; (8003fa0 <vQueueAddToRegistry+0x50>)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	4413      	add	r3, r2
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003f82:	e006      	b.n	8003f92 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	3301      	adds	r3, #1
 8003f88:	60fb      	str	r3, [r7, #12]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2b07      	cmp	r3, #7
 8003f8e:	d9e7      	bls.n	8003f60 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003f90:	bf00      	nop
 8003f92:	bf00      	nop
 8003f94:	3714      	adds	r7, #20
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	2000090c 	.word	0x2000090c

08003fa4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003fb4:	f001 fbce 	bl	8005754 <vPortEnterCritical>
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fbe:	b25b      	sxtb	r3, r3
 8003fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc4:	d103      	bne.n	8003fce <vQueueWaitForMessageRestricted+0x2a>
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fd4:	b25b      	sxtb	r3, r3
 8003fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fda:	d103      	bne.n	8003fe4 <vQueueWaitForMessageRestricted+0x40>
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fe4:	f001 fbe6 	bl	80057b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d106      	bne.n	8003ffe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	3324      	adds	r3, #36	; 0x24
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	68b9      	ldr	r1, [r7, #8]
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f000 fc61 	bl	80048c0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003ffe:	6978      	ldr	r0, [r7, #20]
 8004000:	f7ff ff26 	bl	8003e50 <prvUnlockQueue>
	}
 8004004:	bf00      	nop
 8004006:	3718      	adds	r7, #24
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800400c:	b580      	push	{r7, lr}
 800400e:	b08e      	sub	sp, #56	; 0x38
 8004010:	af04      	add	r7, sp, #16
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	607a      	str	r2, [r7, #4]
 8004018:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800401a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800401c:	2b00      	cmp	r3, #0
 800401e:	d10a      	bne.n	8004036 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004024:	f383 8811 	msr	BASEPRI, r3
 8004028:	f3bf 8f6f 	isb	sy
 800402c:	f3bf 8f4f 	dsb	sy
 8004030:	623b      	str	r3, [r7, #32]
}
 8004032:	bf00      	nop
 8004034:	e7fe      	b.n	8004034 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004038:	2b00      	cmp	r3, #0
 800403a:	d10a      	bne.n	8004052 <xTaskCreateStatic+0x46>
	__asm volatile
 800403c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004040:	f383 8811 	msr	BASEPRI, r3
 8004044:	f3bf 8f6f 	isb	sy
 8004048:	f3bf 8f4f 	dsb	sy
 800404c:	61fb      	str	r3, [r7, #28]
}
 800404e:	bf00      	nop
 8004050:	e7fe      	b.n	8004050 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004052:	23bc      	movs	r3, #188	; 0xbc
 8004054:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	2bbc      	cmp	r3, #188	; 0xbc
 800405a:	d00a      	beq.n	8004072 <xTaskCreateStatic+0x66>
	__asm volatile
 800405c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004060:	f383 8811 	msr	BASEPRI, r3
 8004064:	f3bf 8f6f 	isb	sy
 8004068:	f3bf 8f4f 	dsb	sy
 800406c:	61bb      	str	r3, [r7, #24]
}
 800406e:	bf00      	nop
 8004070:	e7fe      	b.n	8004070 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004072:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004076:	2b00      	cmp	r3, #0
 8004078:	d01e      	beq.n	80040b8 <xTaskCreateStatic+0xac>
 800407a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800407c:	2b00      	cmp	r3, #0
 800407e:	d01b      	beq.n	80040b8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004082:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004086:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004088:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800408a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408c:	2202      	movs	r2, #2
 800408e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004092:	2300      	movs	r3, #0
 8004094:	9303      	str	r3, [sp, #12]
 8004096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004098:	9302      	str	r3, [sp, #8]
 800409a:	f107 0314 	add.w	r3, r7, #20
 800409e:	9301      	str	r3, [sp, #4]
 80040a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a2:	9300      	str	r3, [sp, #0]
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	68b9      	ldr	r1, [r7, #8]
 80040aa:	68f8      	ldr	r0, [r7, #12]
 80040ac:	f000 f850 	bl	8004150 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80040b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80040b2:	f000 f8f3 	bl	800429c <prvAddNewTaskToReadyList>
 80040b6:	e001      	b.n	80040bc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80040b8:	2300      	movs	r3, #0
 80040ba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80040bc:	697b      	ldr	r3, [r7, #20]
	}
 80040be:	4618      	mov	r0, r3
 80040c0:	3728      	adds	r7, #40	; 0x28
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b08c      	sub	sp, #48	; 0x30
 80040ca:	af04      	add	r7, sp, #16
 80040cc:	60f8      	str	r0, [r7, #12]
 80040ce:	60b9      	str	r1, [r7, #8]
 80040d0:	603b      	str	r3, [r7, #0]
 80040d2:	4613      	mov	r3, r2
 80040d4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80040d6:	88fb      	ldrh	r3, [r7, #6]
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	4618      	mov	r0, r3
 80040dc:	f001 fc5c 	bl	8005998 <pvPortMalloc>
 80040e0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00e      	beq.n	8004106 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80040e8:	20bc      	movs	r0, #188	; 0xbc
 80040ea:	f001 fc55 	bl	8005998 <pvPortMalloc>
 80040ee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d003      	beq.n	80040fe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	631a      	str	r2, [r3, #48]	; 0x30
 80040fc:	e005      	b.n	800410a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80040fe:	6978      	ldr	r0, [r7, #20]
 8004100:	f001 fd16 	bl	8005b30 <vPortFree>
 8004104:	e001      	b.n	800410a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004106:	2300      	movs	r3, #0
 8004108:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d017      	beq.n	8004140 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004118:	88fa      	ldrh	r2, [r7, #6]
 800411a:	2300      	movs	r3, #0
 800411c:	9303      	str	r3, [sp, #12]
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	9302      	str	r3, [sp, #8]
 8004122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004124:	9301      	str	r3, [sp, #4]
 8004126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004128:	9300      	str	r3, [sp, #0]
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	68b9      	ldr	r1, [r7, #8]
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f000 f80e 	bl	8004150 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004134:	69f8      	ldr	r0, [r7, #28]
 8004136:	f000 f8b1 	bl	800429c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800413a:	2301      	movs	r3, #1
 800413c:	61bb      	str	r3, [r7, #24]
 800413e:	e002      	b.n	8004146 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004140:	f04f 33ff 	mov.w	r3, #4294967295
 8004144:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004146:	69bb      	ldr	r3, [r7, #24]
	}
 8004148:	4618      	mov	r0, r3
 800414a:	3720      	adds	r7, #32
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b088      	sub	sp, #32
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]
 800415c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800415e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004160:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	461a      	mov	r2, r3
 8004168:	21a5      	movs	r1, #165	; 0xa5
 800416a:	f001 ff30 	bl	8005fce <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800416e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004170:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004178:	3b01      	subs	r3, #1
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4413      	add	r3, r2
 800417e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	f023 0307 	bic.w	r3, r3, #7
 8004186:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	f003 0307 	and.w	r3, r3, #7
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00a      	beq.n	80041a8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004196:	f383 8811 	msr	BASEPRI, r3
 800419a:	f3bf 8f6f 	isb	sy
 800419e:	f3bf 8f4f 	dsb	sy
 80041a2:	617b      	str	r3, [r7, #20]
}
 80041a4:	bf00      	nop
 80041a6:	e7fe      	b.n	80041a6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d01f      	beq.n	80041ee <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041ae:	2300      	movs	r3, #0
 80041b0:	61fb      	str	r3, [r7, #28]
 80041b2:	e012      	b.n	80041da <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	4413      	add	r3, r2
 80041ba:	7819      	ldrb	r1, [r3, #0]
 80041bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	4413      	add	r3, r2
 80041c2:	3334      	adds	r3, #52	; 0x34
 80041c4:	460a      	mov	r2, r1
 80041c6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	4413      	add	r3, r2
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d006      	beq.n	80041e2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	3301      	adds	r3, #1
 80041d8:	61fb      	str	r3, [r7, #28]
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	2b0f      	cmp	r3, #15
 80041de:	d9e9      	bls.n	80041b4 <prvInitialiseNewTask+0x64>
 80041e0:	e000      	b.n	80041e4 <prvInitialiseNewTask+0x94>
			{
				break;
 80041e2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80041e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041ec:	e003      	b.n	80041f6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80041ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80041f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f8:	2b37      	cmp	r3, #55	; 0x37
 80041fa:	d901      	bls.n	8004200 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80041fc:	2337      	movs	r3, #55	; 0x37
 80041fe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004202:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004204:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004208:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800420a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800420c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800420e:	2200      	movs	r2, #0
 8004210:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004214:	3304      	adds	r3, #4
 8004216:	4618      	mov	r0, r3
 8004218:	f7ff f978 	bl	800350c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800421c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421e:	3318      	adds	r3, #24
 8004220:	4618      	mov	r0, r3
 8004222:	f7ff f973 	bl	800350c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004228:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800422a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800422c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004234:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800423a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800423c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800423e:	2200      	movs	r2, #0
 8004240:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004246:	2200      	movs	r2, #0
 8004248:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800424c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424e:	3354      	adds	r3, #84	; 0x54
 8004250:	2260      	movs	r2, #96	; 0x60
 8004252:	2100      	movs	r1, #0
 8004254:	4618      	mov	r0, r3
 8004256:	f001 feba 	bl	8005fce <memset>
 800425a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800425c:	4a0c      	ldr	r2, [pc, #48]	; (8004290 <prvInitialiseNewTask+0x140>)
 800425e:	659a      	str	r2, [r3, #88]	; 0x58
 8004260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004262:	4a0c      	ldr	r2, [pc, #48]	; (8004294 <prvInitialiseNewTask+0x144>)
 8004264:	65da      	str	r2, [r3, #92]	; 0x5c
 8004266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004268:	4a0b      	ldr	r2, [pc, #44]	; (8004298 <prvInitialiseNewTask+0x148>)
 800426a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800426c:	683a      	ldr	r2, [r7, #0]
 800426e:	68f9      	ldr	r1, [r7, #12]
 8004270:	69b8      	ldr	r0, [r7, #24]
 8004272:	f001 f941 	bl	80054f8 <pxPortInitialiseStack>
 8004276:	4602      	mov	r2, r0
 8004278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800427c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800427e:	2b00      	cmp	r3, #0
 8004280:	d002      	beq.n	8004288 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004284:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004286:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004288:	bf00      	nop
 800428a:	3720      	adds	r7, #32
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	08006fc4 	.word	0x08006fc4
 8004294:	08006fe4 	.word	0x08006fe4
 8004298:	08006fa4 	.word	0x08006fa4

0800429c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80042a4:	f001 fa56 	bl	8005754 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80042a8:	4b2d      	ldr	r3, [pc, #180]	; (8004360 <prvAddNewTaskToReadyList+0xc4>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	3301      	adds	r3, #1
 80042ae:	4a2c      	ldr	r2, [pc, #176]	; (8004360 <prvAddNewTaskToReadyList+0xc4>)
 80042b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80042b2:	4b2c      	ldr	r3, [pc, #176]	; (8004364 <prvAddNewTaskToReadyList+0xc8>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d109      	bne.n	80042ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80042ba:	4a2a      	ldr	r2, [pc, #168]	; (8004364 <prvAddNewTaskToReadyList+0xc8>)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80042c0:	4b27      	ldr	r3, [pc, #156]	; (8004360 <prvAddNewTaskToReadyList+0xc4>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d110      	bne.n	80042ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80042c8:	f000 fc26 	bl	8004b18 <prvInitialiseTaskLists>
 80042cc:	e00d      	b.n	80042ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80042ce:	4b26      	ldr	r3, [pc, #152]	; (8004368 <prvAddNewTaskToReadyList+0xcc>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d109      	bne.n	80042ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80042d6:	4b23      	ldr	r3, [pc, #140]	; (8004364 <prvAddNewTaskToReadyList+0xc8>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d802      	bhi.n	80042ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80042e4:	4a1f      	ldr	r2, [pc, #124]	; (8004364 <prvAddNewTaskToReadyList+0xc8>)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80042ea:	4b20      	ldr	r3, [pc, #128]	; (800436c <prvAddNewTaskToReadyList+0xd0>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	3301      	adds	r3, #1
 80042f0:	4a1e      	ldr	r2, [pc, #120]	; (800436c <prvAddNewTaskToReadyList+0xd0>)
 80042f2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80042f4:	4b1d      	ldr	r3, [pc, #116]	; (800436c <prvAddNewTaskToReadyList+0xd0>)
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004300:	4b1b      	ldr	r3, [pc, #108]	; (8004370 <prvAddNewTaskToReadyList+0xd4>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	429a      	cmp	r2, r3
 8004306:	d903      	bls.n	8004310 <prvAddNewTaskToReadyList+0x74>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430c:	4a18      	ldr	r2, [pc, #96]	; (8004370 <prvAddNewTaskToReadyList+0xd4>)
 800430e:	6013      	str	r3, [r2, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004314:	4613      	mov	r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	4413      	add	r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	4a15      	ldr	r2, [pc, #84]	; (8004374 <prvAddNewTaskToReadyList+0xd8>)
 800431e:	441a      	add	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	3304      	adds	r3, #4
 8004324:	4619      	mov	r1, r3
 8004326:	4610      	mov	r0, r2
 8004328:	f7ff f8fd 	bl	8003526 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800432c:	f001 fa42 	bl	80057b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004330:	4b0d      	ldr	r3, [pc, #52]	; (8004368 <prvAddNewTaskToReadyList+0xcc>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00e      	beq.n	8004356 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004338:	4b0a      	ldr	r3, [pc, #40]	; (8004364 <prvAddNewTaskToReadyList+0xc8>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004342:	429a      	cmp	r2, r3
 8004344:	d207      	bcs.n	8004356 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004346:	4b0c      	ldr	r3, [pc, #48]	; (8004378 <prvAddNewTaskToReadyList+0xdc>)
 8004348:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800434c:	601a      	str	r2, [r3, #0]
 800434e:	f3bf 8f4f 	dsb	sy
 8004352:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004356:	bf00      	nop
 8004358:	3708      	adds	r7, #8
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	20000e20 	.word	0x20000e20
 8004364:	2000094c 	.word	0x2000094c
 8004368:	20000e2c 	.word	0x20000e2c
 800436c:	20000e3c 	.word	0x20000e3c
 8004370:	20000e28 	.word	0x20000e28
 8004374:	20000950 	.word	0x20000950
 8004378:	e000ed04 	.word	0xe000ed04

0800437c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004384:	2300      	movs	r3, #0
 8004386:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d017      	beq.n	80043be <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800438e:	4b13      	ldr	r3, [pc, #76]	; (80043dc <vTaskDelay+0x60>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00a      	beq.n	80043ac <vTaskDelay+0x30>
	__asm volatile
 8004396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439a:	f383 8811 	msr	BASEPRI, r3
 800439e:	f3bf 8f6f 	isb	sy
 80043a2:	f3bf 8f4f 	dsb	sy
 80043a6:	60bb      	str	r3, [r7, #8]
}
 80043a8:	bf00      	nop
 80043aa:	e7fe      	b.n	80043aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80043ac:	f000 f88a 	bl	80044c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80043b0:	2100      	movs	r1, #0
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 fcfe 	bl	8004db4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80043b8:	f000 f892 	bl	80044e0 <xTaskResumeAll>
 80043bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d107      	bne.n	80043d4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80043c4:	4b06      	ldr	r3, [pc, #24]	; (80043e0 <vTaskDelay+0x64>)
 80043c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043ca:	601a      	str	r2, [r3, #0]
 80043cc:	f3bf 8f4f 	dsb	sy
 80043d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80043d4:	bf00      	nop
 80043d6:	3710      	adds	r7, #16
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	20000e48 	.word	0x20000e48
 80043e0:	e000ed04 	.word	0xe000ed04

080043e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b08a      	sub	sp, #40	; 0x28
 80043e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80043ea:	2300      	movs	r3, #0
 80043ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80043ee:	2300      	movs	r3, #0
 80043f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80043f2:	463a      	mov	r2, r7
 80043f4:	1d39      	adds	r1, r7, #4
 80043f6:	f107 0308 	add.w	r3, r7, #8
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7ff f832 	bl	8003464 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004400:	6839      	ldr	r1, [r7, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	68ba      	ldr	r2, [r7, #8]
 8004406:	9202      	str	r2, [sp, #8]
 8004408:	9301      	str	r3, [sp, #4]
 800440a:	2300      	movs	r3, #0
 800440c:	9300      	str	r3, [sp, #0]
 800440e:	2300      	movs	r3, #0
 8004410:	460a      	mov	r2, r1
 8004412:	4924      	ldr	r1, [pc, #144]	; (80044a4 <vTaskStartScheduler+0xc0>)
 8004414:	4824      	ldr	r0, [pc, #144]	; (80044a8 <vTaskStartScheduler+0xc4>)
 8004416:	f7ff fdf9 	bl	800400c <xTaskCreateStatic>
 800441a:	4603      	mov	r3, r0
 800441c:	4a23      	ldr	r2, [pc, #140]	; (80044ac <vTaskStartScheduler+0xc8>)
 800441e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004420:	4b22      	ldr	r3, [pc, #136]	; (80044ac <vTaskStartScheduler+0xc8>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d002      	beq.n	800442e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004428:	2301      	movs	r3, #1
 800442a:	617b      	str	r3, [r7, #20]
 800442c:	e001      	b.n	8004432 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800442e:	2300      	movs	r3, #0
 8004430:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d102      	bne.n	800443e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004438:	f000 fd10 	bl	8004e5c <xTimerCreateTimerTask>
 800443c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d11b      	bne.n	800447c <vTaskStartScheduler+0x98>
	__asm volatile
 8004444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004448:	f383 8811 	msr	BASEPRI, r3
 800444c:	f3bf 8f6f 	isb	sy
 8004450:	f3bf 8f4f 	dsb	sy
 8004454:	613b      	str	r3, [r7, #16]
}
 8004456:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004458:	4b15      	ldr	r3, [pc, #84]	; (80044b0 <vTaskStartScheduler+0xcc>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	3354      	adds	r3, #84	; 0x54
 800445e:	4a15      	ldr	r2, [pc, #84]	; (80044b4 <vTaskStartScheduler+0xd0>)
 8004460:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004462:	4b15      	ldr	r3, [pc, #84]	; (80044b8 <vTaskStartScheduler+0xd4>)
 8004464:	f04f 32ff 	mov.w	r2, #4294967295
 8004468:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800446a:	4b14      	ldr	r3, [pc, #80]	; (80044bc <vTaskStartScheduler+0xd8>)
 800446c:	2201      	movs	r2, #1
 800446e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004470:	4b13      	ldr	r3, [pc, #76]	; (80044c0 <vTaskStartScheduler+0xdc>)
 8004472:	2200      	movs	r2, #0
 8004474:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004476:	f001 f8cb 	bl	8005610 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800447a:	e00e      	b.n	800449a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004482:	d10a      	bne.n	800449a <vTaskStartScheduler+0xb6>
	__asm volatile
 8004484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004488:	f383 8811 	msr	BASEPRI, r3
 800448c:	f3bf 8f6f 	isb	sy
 8004490:	f3bf 8f4f 	dsb	sy
 8004494:	60fb      	str	r3, [r7, #12]
}
 8004496:	bf00      	nop
 8004498:	e7fe      	b.n	8004498 <vTaskStartScheduler+0xb4>
}
 800449a:	bf00      	nop
 800449c:	3718      	adds	r7, #24
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	08006f24 	.word	0x08006f24
 80044a8:	08004ae9 	.word	0x08004ae9
 80044ac:	20000e44 	.word	0x20000e44
 80044b0:	2000094c 	.word	0x2000094c
 80044b4:	20000010 	.word	0x20000010
 80044b8:	20000e40 	.word	0x20000e40
 80044bc:	20000e2c 	.word	0x20000e2c
 80044c0:	20000e24 	.word	0x20000e24

080044c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80044c4:	b480      	push	{r7}
 80044c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80044c8:	4b04      	ldr	r3, [pc, #16]	; (80044dc <vTaskSuspendAll+0x18>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	3301      	adds	r3, #1
 80044ce:	4a03      	ldr	r2, [pc, #12]	; (80044dc <vTaskSuspendAll+0x18>)
 80044d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80044d2:	bf00      	nop
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr
 80044dc:	20000e48 	.word	0x20000e48

080044e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80044e6:	2300      	movs	r3, #0
 80044e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80044ea:	2300      	movs	r3, #0
 80044ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80044ee:	4b42      	ldr	r3, [pc, #264]	; (80045f8 <xTaskResumeAll+0x118>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d10a      	bne.n	800450c <xTaskResumeAll+0x2c>
	__asm volatile
 80044f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044fa:	f383 8811 	msr	BASEPRI, r3
 80044fe:	f3bf 8f6f 	isb	sy
 8004502:	f3bf 8f4f 	dsb	sy
 8004506:	603b      	str	r3, [r7, #0]
}
 8004508:	bf00      	nop
 800450a:	e7fe      	b.n	800450a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800450c:	f001 f922 	bl	8005754 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004510:	4b39      	ldr	r3, [pc, #228]	; (80045f8 <xTaskResumeAll+0x118>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	3b01      	subs	r3, #1
 8004516:	4a38      	ldr	r2, [pc, #224]	; (80045f8 <xTaskResumeAll+0x118>)
 8004518:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800451a:	4b37      	ldr	r3, [pc, #220]	; (80045f8 <xTaskResumeAll+0x118>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d162      	bne.n	80045e8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004522:	4b36      	ldr	r3, [pc, #216]	; (80045fc <xTaskResumeAll+0x11c>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d05e      	beq.n	80045e8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800452a:	e02f      	b.n	800458c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800452c:	4b34      	ldr	r3, [pc, #208]	; (8004600 <xTaskResumeAll+0x120>)
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	3318      	adds	r3, #24
 8004538:	4618      	mov	r0, r3
 800453a:	f7ff f851 	bl	80035e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	3304      	adds	r3, #4
 8004542:	4618      	mov	r0, r3
 8004544:	f7ff f84c 	bl	80035e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800454c:	4b2d      	ldr	r3, [pc, #180]	; (8004604 <xTaskResumeAll+0x124>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	429a      	cmp	r2, r3
 8004552:	d903      	bls.n	800455c <xTaskResumeAll+0x7c>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004558:	4a2a      	ldr	r2, [pc, #168]	; (8004604 <xTaskResumeAll+0x124>)
 800455a:	6013      	str	r3, [r2, #0]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004560:	4613      	mov	r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	4413      	add	r3, r2
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	4a27      	ldr	r2, [pc, #156]	; (8004608 <xTaskResumeAll+0x128>)
 800456a:	441a      	add	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	3304      	adds	r3, #4
 8004570:	4619      	mov	r1, r3
 8004572:	4610      	mov	r0, r2
 8004574:	f7fe ffd7 	bl	8003526 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800457c:	4b23      	ldr	r3, [pc, #140]	; (800460c <xTaskResumeAll+0x12c>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004582:	429a      	cmp	r2, r3
 8004584:	d302      	bcc.n	800458c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004586:	4b22      	ldr	r3, [pc, #136]	; (8004610 <xTaskResumeAll+0x130>)
 8004588:	2201      	movs	r2, #1
 800458a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800458c:	4b1c      	ldr	r3, [pc, #112]	; (8004600 <xTaskResumeAll+0x120>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1cb      	bne.n	800452c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800459a:	f000 fb5f 	bl	8004c5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800459e:	4b1d      	ldr	r3, [pc, #116]	; (8004614 <xTaskResumeAll+0x134>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d010      	beq.n	80045cc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80045aa:	f000 f847 	bl	800463c <xTaskIncrementTick>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d002      	beq.n	80045ba <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80045b4:	4b16      	ldr	r3, [pc, #88]	; (8004610 <xTaskResumeAll+0x130>)
 80045b6:	2201      	movs	r2, #1
 80045b8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	3b01      	subs	r3, #1
 80045be:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1f1      	bne.n	80045aa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80045c6:	4b13      	ldr	r3, [pc, #76]	; (8004614 <xTaskResumeAll+0x134>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80045cc:	4b10      	ldr	r3, [pc, #64]	; (8004610 <xTaskResumeAll+0x130>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d009      	beq.n	80045e8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80045d4:	2301      	movs	r3, #1
 80045d6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80045d8:	4b0f      	ldr	r3, [pc, #60]	; (8004618 <xTaskResumeAll+0x138>)
 80045da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045de:	601a      	str	r2, [r3, #0]
 80045e0:	f3bf 8f4f 	dsb	sy
 80045e4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80045e8:	f001 f8e4 	bl	80057b4 <vPortExitCritical>

	return xAlreadyYielded;
 80045ec:	68bb      	ldr	r3, [r7, #8]
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3710      	adds	r7, #16
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	20000e48 	.word	0x20000e48
 80045fc:	20000e20 	.word	0x20000e20
 8004600:	20000de0 	.word	0x20000de0
 8004604:	20000e28 	.word	0x20000e28
 8004608:	20000950 	.word	0x20000950
 800460c:	2000094c 	.word	0x2000094c
 8004610:	20000e34 	.word	0x20000e34
 8004614:	20000e30 	.word	0x20000e30
 8004618:	e000ed04 	.word	0xe000ed04

0800461c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004622:	4b05      	ldr	r3, [pc, #20]	; (8004638 <xTaskGetTickCount+0x1c>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004628:	687b      	ldr	r3, [r7, #4]
}
 800462a:	4618      	mov	r0, r3
 800462c:	370c      	adds	r7, #12
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	20000e24 	.word	0x20000e24

0800463c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004642:	2300      	movs	r3, #0
 8004644:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004646:	4b4f      	ldr	r3, [pc, #316]	; (8004784 <xTaskIncrementTick+0x148>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2b00      	cmp	r3, #0
 800464c:	f040 808f 	bne.w	800476e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004650:	4b4d      	ldr	r3, [pc, #308]	; (8004788 <xTaskIncrementTick+0x14c>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	3301      	adds	r3, #1
 8004656:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004658:	4a4b      	ldr	r2, [pc, #300]	; (8004788 <xTaskIncrementTick+0x14c>)
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d120      	bne.n	80046a6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004664:	4b49      	ldr	r3, [pc, #292]	; (800478c <xTaskIncrementTick+0x150>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00a      	beq.n	8004684 <xTaskIncrementTick+0x48>
	__asm volatile
 800466e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004672:	f383 8811 	msr	BASEPRI, r3
 8004676:	f3bf 8f6f 	isb	sy
 800467a:	f3bf 8f4f 	dsb	sy
 800467e:	603b      	str	r3, [r7, #0]
}
 8004680:	bf00      	nop
 8004682:	e7fe      	b.n	8004682 <xTaskIncrementTick+0x46>
 8004684:	4b41      	ldr	r3, [pc, #260]	; (800478c <xTaskIncrementTick+0x150>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	60fb      	str	r3, [r7, #12]
 800468a:	4b41      	ldr	r3, [pc, #260]	; (8004790 <xTaskIncrementTick+0x154>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a3f      	ldr	r2, [pc, #252]	; (800478c <xTaskIncrementTick+0x150>)
 8004690:	6013      	str	r3, [r2, #0]
 8004692:	4a3f      	ldr	r2, [pc, #252]	; (8004790 <xTaskIncrementTick+0x154>)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6013      	str	r3, [r2, #0]
 8004698:	4b3e      	ldr	r3, [pc, #248]	; (8004794 <xTaskIncrementTick+0x158>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	3301      	adds	r3, #1
 800469e:	4a3d      	ldr	r2, [pc, #244]	; (8004794 <xTaskIncrementTick+0x158>)
 80046a0:	6013      	str	r3, [r2, #0]
 80046a2:	f000 fadb 	bl	8004c5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80046a6:	4b3c      	ldr	r3, [pc, #240]	; (8004798 <xTaskIncrementTick+0x15c>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d349      	bcc.n	8004744 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046b0:	4b36      	ldr	r3, [pc, #216]	; (800478c <xTaskIncrementTick+0x150>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d104      	bne.n	80046c4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046ba:	4b37      	ldr	r3, [pc, #220]	; (8004798 <xTaskIncrementTick+0x15c>)
 80046bc:	f04f 32ff 	mov.w	r2, #4294967295
 80046c0:	601a      	str	r2, [r3, #0]
					break;
 80046c2:	e03f      	b.n	8004744 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046c4:	4b31      	ldr	r3, [pc, #196]	; (800478c <xTaskIncrementTick+0x150>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d203      	bcs.n	80046e4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80046dc:	4a2e      	ldr	r2, [pc, #184]	; (8004798 <xTaskIncrementTick+0x15c>)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80046e2:	e02f      	b.n	8004744 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	3304      	adds	r3, #4
 80046e8:	4618      	mov	r0, r3
 80046ea:	f7fe ff79 	bl	80035e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d004      	beq.n	8004700 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	3318      	adds	r3, #24
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7fe ff70 	bl	80035e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004704:	4b25      	ldr	r3, [pc, #148]	; (800479c <xTaskIncrementTick+0x160>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	429a      	cmp	r2, r3
 800470a:	d903      	bls.n	8004714 <xTaskIncrementTick+0xd8>
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004710:	4a22      	ldr	r2, [pc, #136]	; (800479c <xTaskIncrementTick+0x160>)
 8004712:	6013      	str	r3, [r2, #0]
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004718:	4613      	mov	r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	4413      	add	r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4a1f      	ldr	r2, [pc, #124]	; (80047a0 <xTaskIncrementTick+0x164>)
 8004722:	441a      	add	r2, r3
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	3304      	adds	r3, #4
 8004728:	4619      	mov	r1, r3
 800472a:	4610      	mov	r0, r2
 800472c:	f7fe fefb 	bl	8003526 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004734:	4b1b      	ldr	r3, [pc, #108]	; (80047a4 <xTaskIncrementTick+0x168>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473a:	429a      	cmp	r2, r3
 800473c:	d3b8      	bcc.n	80046b0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800473e:	2301      	movs	r3, #1
 8004740:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004742:	e7b5      	b.n	80046b0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004744:	4b17      	ldr	r3, [pc, #92]	; (80047a4 <xTaskIncrementTick+0x168>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800474a:	4915      	ldr	r1, [pc, #84]	; (80047a0 <xTaskIncrementTick+0x164>)
 800474c:	4613      	mov	r3, r2
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	4413      	add	r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	440b      	add	r3, r1
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d901      	bls.n	8004760 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800475c:	2301      	movs	r3, #1
 800475e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004760:	4b11      	ldr	r3, [pc, #68]	; (80047a8 <xTaskIncrementTick+0x16c>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d007      	beq.n	8004778 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004768:	2301      	movs	r3, #1
 800476a:	617b      	str	r3, [r7, #20]
 800476c:	e004      	b.n	8004778 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800476e:	4b0f      	ldr	r3, [pc, #60]	; (80047ac <xTaskIncrementTick+0x170>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	3301      	adds	r3, #1
 8004774:	4a0d      	ldr	r2, [pc, #52]	; (80047ac <xTaskIncrementTick+0x170>)
 8004776:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004778:	697b      	ldr	r3, [r7, #20]
}
 800477a:	4618      	mov	r0, r3
 800477c:	3718      	adds	r7, #24
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	20000e48 	.word	0x20000e48
 8004788:	20000e24 	.word	0x20000e24
 800478c:	20000dd8 	.word	0x20000dd8
 8004790:	20000ddc 	.word	0x20000ddc
 8004794:	20000e38 	.word	0x20000e38
 8004798:	20000e40 	.word	0x20000e40
 800479c:	20000e28 	.word	0x20000e28
 80047a0:	20000950 	.word	0x20000950
 80047a4:	2000094c 	.word	0x2000094c
 80047a8:	20000e34 	.word	0x20000e34
 80047ac:	20000e30 	.word	0x20000e30

080047b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80047b6:	4b2a      	ldr	r3, [pc, #168]	; (8004860 <vTaskSwitchContext+0xb0>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d003      	beq.n	80047c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80047be:	4b29      	ldr	r3, [pc, #164]	; (8004864 <vTaskSwitchContext+0xb4>)
 80047c0:	2201      	movs	r2, #1
 80047c2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80047c4:	e046      	b.n	8004854 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80047c6:	4b27      	ldr	r3, [pc, #156]	; (8004864 <vTaskSwitchContext+0xb4>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047cc:	4b26      	ldr	r3, [pc, #152]	; (8004868 <vTaskSwitchContext+0xb8>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	60fb      	str	r3, [r7, #12]
 80047d2:	e010      	b.n	80047f6 <vTaskSwitchContext+0x46>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d10a      	bne.n	80047f0 <vTaskSwitchContext+0x40>
	__asm volatile
 80047da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047de:	f383 8811 	msr	BASEPRI, r3
 80047e2:	f3bf 8f6f 	isb	sy
 80047e6:	f3bf 8f4f 	dsb	sy
 80047ea:	607b      	str	r3, [r7, #4]
}
 80047ec:	bf00      	nop
 80047ee:	e7fe      	b.n	80047ee <vTaskSwitchContext+0x3e>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	3b01      	subs	r3, #1
 80047f4:	60fb      	str	r3, [r7, #12]
 80047f6:	491d      	ldr	r1, [pc, #116]	; (800486c <vTaskSwitchContext+0xbc>)
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	4613      	mov	r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	4413      	add	r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	440b      	add	r3, r1
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d0e4      	beq.n	80047d4 <vTaskSwitchContext+0x24>
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	4613      	mov	r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	4413      	add	r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4a15      	ldr	r2, [pc, #84]	; (800486c <vTaskSwitchContext+0xbc>)
 8004816:	4413      	add	r3, r2
 8004818:	60bb      	str	r3, [r7, #8]
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	685a      	ldr	r2, [r3, #4]
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	605a      	str	r2, [r3, #4]
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	685a      	ldr	r2, [r3, #4]
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	3308      	adds	r3, #8
 800482c:	429a      	cmp	r2, r3
 800482e:	d104      	bne.n	800483a <vTaskSwitchContext+0x8a>
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	685a      	ldr	r2, [r3, #4]
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	605a      	str	r2, [r3, #4]
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	4a0b      	ldr	r2, [pc, #44]	; (8004870 <vTaskSwitchContext+0xc0>)
 8004842:	6013      	str	r3, [r2, #0]
 8004844:	4a08      	ldr	r2, [pc, #32]	; (8004868 <vTaskSwitchContext+0xb8>)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800484a:	4b09      	ldr	r3, [pc, #36]	; (8004870 <vTaskSwitchContext+0xc0>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	3354      	adds	r3, #84	; 0x54
 8004850:	4a08      	ldr	r2, [pc, #32]	; (8004874 <vTaskSwitchContext+0xc4>)
 8004852:	6013      	str	r3, [r2, #0]
}
 8004854:	bf00      	nop
 8004856:	3714      	adds	r7, #20
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr
 8004860:	20000e48 	.word	0x20000e48
 8004864:	20000e34 	.word	0x20000e34
 8004868:	20000e28 	.word	0x20000e28
 800486c:	20000950 	.word	0x20000950
 8004870:	2000094c 	.word	0x2000094c
 8004874:	20000010 	.word	0x20000010

08004878 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d10a      	bne.n	800489e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488c:	f383 8811 	msr	BASEPRI, r3
 8004890:	f3bf 8f6f 	isb	sy
 8004894:	f3bf 8f4f 	dsb	sy
 8004898:	60fb      	str	r3, [r7, #12]
}
 800489a:	bf00      	nop
 800489c:	e7fe      	b.n	800489c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800489e:	4b07      	ldr	r3, [pc, #28]	; (80048bc <vTaskPlaceOnEventList+0x44>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	3318      	adds	r3, #24
 80048a4:	4619      	mov	r1, r3
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f7fe fe61 	bl	800356e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80048ac:	2101      	movs	r1, #1
 80048ae:	6838      	ldr	r0, [r7, #0]
 80048b0:	f000 fa80 	bl	8004db4 <prvAddCurrentTaskToDelayedList>
}
 80048b4:	bf00      	nop
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	2000094c 	.word	0x2000094c

080048c0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b086      	sub	sp, #24
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10a      	bne.n	80048e8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80048d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d6:	f383 8811 	msr	BASEPRI, r3
 80048da:	f3bf 8f6f 	isb	sy
 80048de:	f3bf 8f4f 	dsb	sy
 80048e2:	617b      	str	r3, [r7, #20]
}
 80048e4:	bf00      	nop
 80048e6:	e7fe      	b.n	80048e6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80048e8:	4b0a      	ldr	r3, [pc, #40]	; (8004914 <vTaskPlaceOnEventListRestricted+0x54>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	3318      	adds	r3, #24
 80048ee:	4619      	mov	r1, r3
 80048f0:	68f8      	ldr	r0, [r7, #12]
 80048f2:	f7fe fe18 	bl	8003526 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d002      	beq.n	8004902 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80048fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004900:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004902:	6879      	ldr	r1, [r7, #4]
 8004904:	68b8      	ldr	r0, [r7, #8]
 8004906:	f000 fa55 	bl	8004db4 <prvAddCurrentTaskToDelayedList>
	}
 800490a:	bf00      	nop
 800490c:	3718      	adds	r7, #24
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	2000094c 	.word	0x2000094c

08004918 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10a      	bne.n	8004944 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800492e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004932:	f383 8811 	msr	BASEPRI, r3
 8004936:	f3bf 8f6f 	isb	sy
 800493a:	f3bf 8f4f 	dsb	sy
 800493e:	60fb      	str	r3, [r7, #12]
}
 8004940:	bf00      	nop
 8004942:	e7fe      	b.n	8004942 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	3318      	adds	r3, #24
 8004948:	4618      	mov	r0, r3
 800494a:	f7fe fe49 	bl	80035e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800494e:	4b1e      	ldr	r3, [pc, #120]	; (80049c8 <xTaskRemoveFromEventList+0xb0>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d11d      	bne.n	8004992 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	3304      	adds	r3, #4
 800495a:	4618      	mov	r0, r3
 800495c:	f7fe fe40 	bl	80035e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004964:	4b19      	ldr	r3, [pc, #100]	; (80049cc <xTaskRemoveFromEventList+0xb4>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	429a      	cmp	r2, r3
 800496a:	d903      	bls.n	8004974 <xTaskRemoveFromEventList+0x5c>
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004970:	4a16      	ldr	r2, [pc, #88]	; (80049cc <xTaskRemoveFromEventList+0xb4>)
 8004972:	6013      	str	r3, [r2, #0]
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004978:	4613      	mov	r3, r2
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	4413      	add	r3, r2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	4a13      	ldr	r2, [pc, #76]	; (80049d0 <xTaskRemoveFromEventList+0xb8>)
 8004982:	441a      	add	r2, r3
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	3304      	adds	r3, #4
 8004988:	4619      	mov	r1, r3
 800498a:	4610      	mov	r0, r2
 800498c:	f7fe fdcb 	bl	8003526 <vListInsertEnd>
 8004990:	e005      	b.n	800499e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	3318      	adds	r3, #24
 8004996:	4619      	mov	r1, r3
 8004998:	480e      	ldr	r0, [pc, #56]	; (80049d4 <xTaskRemoveFromEventList+0xbc>)
 800499a:	f7fe fdc4 	bl	8003526 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049a2:	4b0d      	ldr	r3, [pc, #52]	; (80049d8 <xTaskRemoveFromEventList+0xc0>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d905      	bls.n	80049b8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80049ac:	2301      	movs	r3, #1
 80049ae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80049b0:	4b0a      	ldr	r3, [pc, #40]	; (80049dc <xTaskRemoveFromEventList+0xc4>)
 80049b2:	2201      	movs	r2, #1
 80049b4:	601a      	str	r2, [r3, #0]
 80049b6:	e001      	b.n	80049bc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80049b8:	2300      	movs	r3, #0
 80049ba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80049bc:	697b      	ldr	r3, [r7, #20]
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3718      	adds	r7, #24
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	20000e48 	.word	0x20000e48
 80049cc:	20000e28 	.word	0x20000e28
 80049d0:	20000950 	.word	0x20000950
 80049d4:	20000de0 	.word	0x20000de0
 80049d8:	2000094c 	.word	0x2000094c
 80049dc:	20000e34 	.word	0x20000e34

080049e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80049e8:	4b06      	ldr	r3, [pc, #24]	; (8004a04 <vTaskInternalSetTimeOutState+0x24>)
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80049f0:	4b05      	ldr	r3, [pc, #20]	; (8004a08 <vTaskInternalSetTimeOutState+0x28>)
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	605a      	str	r2, [r3, #4]
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr
 8004a04:	20000e38 	.word	0x20000e38
 8004a08:	20000e24 	.word	0x20000e24

08004a0c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b088      	sub	sp, #32
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d10a      	bne.n	8004a32 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a20:	f383 8811 	msr	BASEPRI, r3
 8004a24:	f3bf 8f6f 	isb	sy
 8004a28:	f3bf 8f4f 	dsb	sy
 8004a2c:	613b      	str	r3, [r7, #16]
}
 8004a2e:	bf00      	nop
 8004a30:	e7fe      	b.n	8004a30 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d10a      	bne.n	8004a4e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a3c:	f383 8811 	msr	BASEPRI, r3
 8004a40:	f3bf 8f6f 	isb	sy
 8004a44:	f3bf 8f4f 	dsb	sy
 8004a48:	60fb      	str	r3, [r7, #12]
}
 8004a4a:	bf00      	nop
 8004a4c:	e7fe      	b.n	8004a4c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004a4e:	f000 fe81 	bl	8005754 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004a52:	4b1d      	ldr	r3, [pc, #116]	; (8004ac8 <xTaskCheckForTimeOut+0xbc>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a6a:	d102      	bne.n	8004a72 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	61fb      	str	r3, [r7, #28]
 8004a70:	e023      	b.n	8004aba <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	4b15      	ldr	r3, [pc, #84]	; (8004acc <xTaskCheckForTimeOut+0xc0>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d007      	beq.n	8004a8e <xTaskCheckForTimeOut+0x82>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	69ba      	ldr	r2, [r7, #24]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d302      	bcc.n	8004a8e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	61fb      	str	r3, [r7, #28]
 8004a8c:	e015      	b.n	8004aba <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d20b      	bcs.n	8004ab0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	1ad2      	subs	r2, r2, r3
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f7ff ff9b 	bl	80049e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	61fb      	str	r3, [r7, #28]
 8004aae:	e004      	b.n	8004aba <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004aba:	f000 fe7b 	bl	80057b4 <vPortExitCritical>

	return xReturn;
 8004abe:	69fb      	ldr	r3, [r7, #28]
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3720      	adds	r7, #32
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	20000e24 	.word	0x20000e24
 8004acc:	20000e38 	.word	0x20000e38

08004ad0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004ad4:	4b03      	ldr	r3, [pc, #12]	; (8004ae4 <vTaskMissedYield+0x14>)
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	601a      	str	r2, [r3, #0]
}
 8004ada:	bf00      	nop
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr
 8004ae4:	20000e34 	.word	0x20000e34

08004ae8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004af0:	f000 f852 	bl	8004b98 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004af4:	4b06      	ldr	r3, [pc, #24]	; (8004b10 <prvIdleTask+0x28>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d9f9      	bls.n	8004af0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004afc:	4b05      	ldr	r3, [pc, #20]	; (8004b14 <prvIdleTask+0x2c>)
 8004afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b02:	601a      	str	r2, [r3, #0]
 8004b04:	f3bf 8f4f 	dsb	sy
 8004b08:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004b0c:	e7f0      	b.n	8004af0 <prvIdleTask+0x8>
 8004b0e:	bf00      	nop
 8004b10:	20000950 	.word	0x20000950
 8004b14:	e000ed04 	.word	0xe000ed04

08004b18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b1e:	2300      	movs	r3, #0
 8004b20:	607b      	str	r3, [r7, #4]
 8004b22:	e00c      	b.n	8004b3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	4613      	mov	r3, r2
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	4413      	add	r3, r2
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	4a12      	ldr	r2, [pc, #72]	; (8004b78 <prvInitialiseTaskLists+0x60>)
 8004b30:	4413      	add	r3, r2
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7fe fcca 	bl	80034cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	607b      	str	r3, [r7, #4]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b37      	cmp	r3, #55	; 0x37
 8004b42:	d9ef      	bls.n	8004b24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004b44:	480d      	ldr	r0, [pc, #52]	; (8004b7c <prvInitialiseTaskLists+0x64>)
 8004b46:	f7fe fcc1 	bl	80034cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004b4a:	480d      	ldr	r0, [pc, #52]	; (8004b80 <prvInitialiseTaskLists+0x68>)
 8004b4c:	f7fe fcbe 	bl	80034cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004b50:	480c      	ldr	r0, [pc, #48]	; (8004b84 <prvInitialiseTaskLists+0x6c>)
 8004b52:	f7fe fcbb 	bl	80034cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004b56:	480c      	ldr	r0, [pc, #48]	; (8004b88 <prvInitialiseTaskLists+0x70>)
 8004b58:	f7fe fcb8 	bl	80034cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004b5c:	480b      	ldr	r0, [pc, #44]	; (8004b8c <prvInitialiseTaskLists+0x74>)
 8004b5e:	f7fe fcb5 	bl	80034cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004b62:	4b0b      	ldr	r3, [pc, #44]	; (8004b90 <prvInitialiseTaskLists+0x78>)
 8004b64:	4a05      	ldr	r2, [pc, #20]	; (8004b7c <prvInitialiseTaskLists+0x64>)
 8004b66:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004b68:	4b0a      	ldr	r3, [pc, #40]	; (8004b94 <prvInitialiseTaskLists+0x7c>)
 8004b6a:	4a05      	ldr	r2, [pc, #20]	; (8004b80 <prvInitialiseTaskLists+0x68>)
 8004b6c:	601a      	str	r2, [r3, #0]
}
 8004b6e:	bf00      	nop
 8004b70:	3708      	adds	r7, #8
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	20000950 	.word	0x20000950
 8004b7c:	20000db0 	.word	0x20000db0
 8004b80:	20000dc4 	.word	0x20000dc4
 8004b84:	20000de0 	.word	0x20000de0
 8004b88:	20000df4 	.word	0x20000df4
 8004b8c:	20000e0c 	.word	0x20000e0c
 8004b90:	20000dd8 	.word	0x20000dd8
 8004b94:	20000ddc 	.word	0x20000ddc

08004b98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b9e:	e019      	b.n	8004bd4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004ba0:	f000 fdd8 	bl	8005754 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ba4:	4b10      	ldr	r3, [pc, #64]	; (8004be8 <prvCheckTasksWaitingTermination+0x50>)
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	3304      	adds	r3, #4
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f7fe fd15 	bl	80035e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004bb6:	4b0d      	ldr	r3, [pc, #52]	; (8004bec <prvCheckTasksWaitingTermination+0x54>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	4a0b      	ldr	r2, [pc, #44]	; (8004bec <prvCheckTasksWaitingTermination+0x54>)
 8004bbe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004bc0:	4b0b      	ldr	r3, [pc, #44]	; (8004bf0 <prvCheckTasksWaitingTermination+0x58>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	4a0a      	ldr	r2, [pc, #40]	; (8004bf0 <prvCheckTasksWaitingTermination+0x58>)
 8004bc8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004bca:	f000 fdf3 	bl	80057b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 f810 	bl	8004bf4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004bd4:	4b06      	ldr	r3, [pc, #24]	; (8004bf0 <prvCheckTasksWaitingTermination+0x58>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1e1      	bne.n	8004ba0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004bdc:	bf00      	nop
 8004bde:	bf00      	nop
 8004be0:	3708      	adds	r7, #8
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	20000df4 	.word	0x20000df4
 8004bec:	20000e20 	.word	0x20000e20
 8004bf0:	20000e08 	.word	0x20000e08

08004bf4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	3354      	adds	r3, #84	; 0x54
 8004c00:	4618      	mov	r0, r3
 8004c02:	f001 fb1d 	bl	8006240 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d108      	bne.n	8004c22 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c14:	4618      	mov	r0, r3
 8004c16:	f000 ff8b 	bl	8005b30 <vPortFree>
				vPortFree( pxTCB );
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 ff88 	bl	8005b30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004c20:	e018      	b.n	8004c54 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d103      	bne.n	8004c34 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 ff7f 	bl	8005b30 <vPortFree>
	}
 8004c32:	e00f      	b.n	8004c54 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d00a      	beq.n	8004c54 <prvDeleteTCB+0x60>
	__asm volatile
 8004c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c42:	f383 8811 	msr	BASEPRI, r3
 8004c46:	f3bf 8f6f 	isb	sy
 8004c4a:	f3bf 8f4f 	dsb	sy
 8004c4e:	60fb      	str	r3, [r7, #12]
}
 8004c50:	bf00      	nop
 8004c52:	e7fe      	b.n	8004c52 <prvDeleteTCB+0x5e>
	}
 8004c54:	bf00      	nop
 8004c56:	3710      	adds	r7, #16
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c62:	4b0c      	ldr	r3, [pc, #48]	; (8004c94 <prvResetNextTaskUnblockTime+0x38>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d104      	bne.n	8004c76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004c6c:	4b0a      	ldr	r3, [pc, #40]	; (8004c98 <prvResetNextTaskUnblockTime+0x3c>)
 8004c6e:	f04f 32ff 	mov.w	r2, #4294967295
 8004c72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004c74:	e008      	b.n	8004c88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c76:	4b07      	ldr	r3, [pc, #28]	; (8004c94 <prvResetNextTaskUnblockTime+0x38>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	4a04      	ldr	r2, [pc, #16]	; (8004c98 <prvResetNextTaskUnblockTime+0x3c>)
 8004c86:	6013      	str	r3, [r2, #0]
}
 8004c88:	bf00      	nop
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr
 8004c94:	20000dd8 	.word	0x20000dd8
 8004c98:	20000e40 	.word	0x20000e40

08004c9c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004ca2:	4b0b      	ldr	r3, [pc, #44]	; (8004cd0 <xTaskGetSchedulerState+0x34>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d102      	bne.n	8004cb0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004caa:	2301      	movs	r3, #1
 8004cac:	607b      	str	r3, [r7, #4]
 8004cae:	e008      	b.n	8004cc2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cb0:	4b08      	ldr	r3, [pc, #32]	; (8004cd4 <xTaskGetSchedulerState+0x38>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d102      	bne.n	8004cbe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004cb8:	2302      	movs	r3, #2
 8004cba:	607b      	str	r3, [r7, #4]
 8004cbc:	e001      	b.n	8004cc2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004cc2:	687b      	ldr	r3, [r7, #4]
	}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr
 8004cd0:	20000e2c 	.word	0x20000e2c
 8004cd4:	20000e48 	.word	0x20000e48

08004cd8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b086      	sub	sp, #24
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d056      	beq.n	8004d9c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004cee:	4b2e      	ldr	r3, [pc, #184]	; (8004da8 <xTaskPriorityDisinherit+0xd0>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	693a      	ldr	r2, [r7, #16]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d00a      	beq.n	8004d0e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfc:	f383 8811 	msr	BASEPRI, r3
 8004d00:	f3bf 8f6f 	isb	sy
 8004d04:	f3bf 8f4f 	dsb	sy
 8004d08:	60fb      	str	r3, [r7, #12]
}
 8004d0a:	bf00      	nop
 8004d0c:	e7fe      	b.n	8004d0c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10a      	bne.n	8004d2c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1a:	f383 8811 	msr	BASEPRI, r3
 8004d1e:	f3bf 8f6f 	isb	sy
 8004d22:	f3bf 8f4f 	dsb	sy
 8004d26:	60bb      	str	r3, [r7, #8]
}
 8004d28:	bf00      	nop
 8004d2a:	e7fe      	b.n	8004d2a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d30:	1e5a      	subs	r2, r3, #1
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d02c      	beq.n	8004d9c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d128      	bne.n	8004d9c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	3304      	adds	r3, #4
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7fe fc46 	bl	80035e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d60:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d6c:	4b0f      	ldr	r3, [pc, #60]	; (8004dac <xTaskPriorityDisinherit+0xd4>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d903      	bls.n	8004d7c <xTaskPriorityDisinherit+0xa4>
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d78:	4a0c      	ldr	r2, [pc, #48]	; (8004dac <xTaskPriorityDisinherit+0xd4>)
 8004d7a:	6013      	str	r3, [r2, #0]
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d80:	4613      	mov	r3, r2
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	4413      	add	r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	4a09      	ldr	r2, [pc, #36]	; (8004db0 <xTaskPriorityDisinherit+0xd8>)
 8004d8a:	441a      	add	r2, r3
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	3304      	adds	r3, #4
 8004d90:	4619      	mov	r1, r3
 8004d92:	4610      	mov	r0, r2
 8004d94:	f7fe fbc7 	bl	8003526 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004d9c:	697b      	ldr	r3, [r7, #20]
	}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3718      	adds	r7, #24
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	2000094c 	.word	0x2000094c
 8004dac:	20000e28 	.word	0x20000e28
 8004db0:	20000950 	.word	0x20000950

08004db4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004dbe:	4b21      	ldr	r3, [pc, #132]	; (8004e44 <prvAddCurrentTaskToDelayedList+0x90>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004dc4:	4b20      	ldr	r3, [pc, #128]	; (8004e48 <prvAddCurrentTaskToDelayedList+0x94>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	3304      	adds	r3, #4
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7fe fc08 	bl	80035e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd6:	d10a      	bne.n	8004dee <prvAddCurrentTaskToDelayedList+0x3a>
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d007      	beq.n	8004dee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004dde:	4b1a      	ldr	r3, [pc, #104]	; (8004e48 <prvAddCurrentTaskToDelayedList+0x94>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	3304      	adds	r3, #4
 8004de4:	4619      	mov	r1, r3
 8004de6:	4819      	ldr	r0, [pc, #100]	; (8004e4c <prvAddCurrentTaskToDelayedList+0x98>)
 8004de8:	f7fe fb9d 	bl	8003526 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004dec:	e026      	b.n	8004e3c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4413      	add	r3, r2
 8004df4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004df6:	4b14      	ldr	r3, [pc, #80]	; (8004e48 <prvAddCurrentTaskToDelayedList+0x94>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68ba      	ldr	r2, [r7, #8]
 8004dfc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004dfe:	68ba      	ldr	r2, [r7, #8]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d209      	bcs.n	8004e1a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e06:	4b12      	ldr	r3, [pc, #72]	; (8004e50 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	4b0f      	ldr	r3, [pc, #60]	; (8004e48 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	3304      	adds	r3, #4
 8004e10:	4619      	mov	r1, r3
 8004e12:	4610      	mov	r0, r2
 8004e14:	f7fe fbab 	bl	800356e <vListInsert>
}
 8004e18:	e010      	b.n	8004e3c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e1a:	4b0e      	ldr	r3, [pc, #56]	; (8004e54 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	4b0a      	ldr	r3, [pc, #40]	; (8004e48 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	3304      	adds	r3, #4
 8004e24:	4619      	mov	r1, r3
 8004e26:	4610      	mov	r0, r2
 8004e28:	f7fe fba1 	bl	800356e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004e2c:	4b0a      	ldr	r3, [pc, #40]	; (8004e58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68ba      	ldr	r2, [r7, #8]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d202      	bcs.n	8004e3c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004e36:	4a08      	ldr	r2, [pc, #32]	; (8004e58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	6013      	str	r3, [r2, #0]
}
 8004e3c:	bf00      	nop
 8004e3e:	3710      	adds	r7, #16
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	20000e24 	.word	0x20000e24
 8004e48:	2000094c 	.word	0x2000094c
 8004e4c:	20000e0c 	.word	0x20000e0c
 8004e50:	20000ddc 	.word	0x20000ddc
 8004e54:	20000dd8 	.word	0x20000dd8
 8004e58:	20000e40 	.word	0x20000e40

08004e5c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b08a      	sub	sp, #40	; 0x28
 8004e60:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004e62:	2300      	movs	r3, #0
 8004e64:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004e66:	f000 fb07 	bl	8005478 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004e6a:	4b1c      	ldr	r3, [pc, #112]	; (8004edc <xTimerCreateTimerTask+0x80>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d021      	beq.n	8004eb6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004e72:	2300      	movs	r3, #0
 8004e74:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004e76:	2300      	movs	r3, #0
 8004e78:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004e7a:	1d3a      	adds	r2, r7, #4
 8004e7c:	f107 0108 	add.w	r1, r7, #8
 8004e80:	f107 030c 	add.w	r3, r7, #12
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7fe fb07 	bl	8003498 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004e8a:	6879      	ldr	r1, [r7, #4]
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	9202      	str	r2, [sp, #8]
 8004e92:	9301      	str	r3, [sp, #4]
 8004e94:	2302      	movs	r3, #2
 8004e96:	9300      	str	r3, [sp, #0]
 8004e98:	2300      	movs	r3, #0
 8004e9a:	460a      	mov	r2, r1
 8004e9c:	4910      	ldr	r1, [pc, #64]	; (8004ee0 <xTimerCreateTimerTask+0x84>)
 8004e9e:	4811      	ldr	r0, [pc, #68]	; (8004ee4 <xTimerCreateTimerTask+0x88>)
 8004ea0:	f7ff f8b4 	bl	800400c <xTaskCreateStatic>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	4a10      	ldr	r2, [pc, #64]	; (8004ee8 <xTimerCreateTimerTask+0x8c>)
 8004ea8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004eaa:	4b0f      	ldr	r3, [pc, #60]	; (8004ee8 <xTimerCreateTimerTask+0x8c>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d001      	beq.n	8004eb6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d10a      	bne.n	8004ed2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec0:	f383 8811 	msr	BASEPRI, r3
 8004ec4:	f3bf 8f6f 	isb	sy
 8004ec8:	f3bf 8f4f 	dsb	sy
 8004ecc:	613b      	str	r3, [r7, #16]
}
 8004ece:	bf00      	nop
 8004ed0:	e7fe      	b.n	8004ed0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004ed2:	697b      	ldr	r3, [r7, #20]
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3718      	adds	r7, #24
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	20000e7c 	.word	0x20000e7c
 8004ee0:	08006f2c 	.word	0x08006f2c
 8004ee4:	08005021 	.word	0x08005021
 8004ee8:	20000e80 	.word	0x20000e80

08004eec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b08a      	sub	sp, #40	; 0x28
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
 8004ef8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004efa:	2300      	movs	r3, #0
 8004efc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d10a      	bne.n	8004f1a <xTimerGenericCommand+0x2e>
	__asm volatile
 8004f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f08:	f383 8811 	msr	BASEPRI, r3
 8004f0c:	f3bf 8f6f 	isb	sy
 8004f10:	f3bf 8f4f 	dsb	sy
 8004f14:	623b      	str	r3, [r7, #32]
}
 8004f16:	bf00      	nop
 8004f18:	e7fe      	b.n	8004f18 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004f1a:	4b1a      	ldr	r3, [pc, #104]	; (8004f84 <xTimerGenericCommand+0x98>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d02a      	beq.n	8004f78 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	2b05      	cmp	r3, #5
 8004f32:	dc18      	bgt.n	8004f66 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004f34:	f7ff feb2 	bl	8004c9c <xTaskGetSchedulerState>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d109      	bne.n	8004f52 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004f3e:	4b11      	ldr	r3, [pc, #68]	; (8004f84 <xTimerGenericCommand+0x98>)
 8004f40:	6818      	ldr	r0, [r3, #0]
 8004f42:	f107 0110 	add.w	r1, r7, #16
 8004f46:	2300      	movs	r3, #0
 8004f48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f4a:	f7fe fc77 	bl	800383c <xQueueGenericSend>
 8004f4e:	6278      	str	r0, [r7, #36]	; 0x24
 8004f50:	e012      	b.n	8004f78 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004f52:	4b0c      	ldr	r3, [pc, #48]	; (8004f84 <xTimerGenericCommand+0x98>)
 8004f54:	6818      	ldr	r0, [r3, #0]
 8004f56:	f107 0110 	add.w	r1, r7, #16
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f7fe fc6d 	bl	800383c <xQueueGenericSend>
 8004f62:	6278      	str	r0, [r7, #36]	; 0x24
 8004f64:	e008      	b.n	8004f78 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004f66:	4b07      	ldr	r3, [pc, #28]	; (8004f84 <xTimerGenericCommand+0x98>)
 8004f68:	6818      	ldr	r0, [r3, #0]
 8004f6a:	f107 0110 	add.w	r1, r7, #16
 8004f6e:	2300      	movs	r3, #0
 8004f70:	683a      	ldr	r2, [r7, #0]
 8004f72:	f7fe fd61 	bl	8003a38 <xQueueGenericSendFromISR>
 8004f76:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3728      	adds	r7, #40	; 0x28
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	20000e7c 	.word	0x20000e7c

08004f88 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b088      	sub	sp, #32
 8004f8c:	af02      	add	r7, sp, #8
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f92:	4b22      	ldr	r3, [pc, #136]	; (800501c <prvProcessExpiredTimer+0x94>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	3304      	adds	r3, #4
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7fe fb1d 	bl	80035e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004fac:	f003 0304 	and.w	r3, r3, #4
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d022      	beq.n	8004ffa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	699a      	ldr	r2, [r3, #24]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	18d1      	adds	r1, r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	683a      	ldr	r2, [r7, #0]
 8004fc0:	6978      	ldr	r0, [r7, #20]
 8004fc2:	f000 f8d1 	bl	8005168 <prvInsertTimerInActiveList>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d01f      	beq.n	800500c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004fcc:	2300      	movs	r3, #0
 8004fce:	9300      	str	r3, [sp, #0]
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	2100      	movs	r1, #0
 8004fd6:	6978      	ldr	r0, [r7, #20]
 8004fd8:	f7ff ff88 	bl	8004eec <xTimerGenericCommand>
 8004fdc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d113      	bne.n	800500c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe8:	f383 8811 	msr	BASEPRI, r3
 8004fec:	f3bf 8f6f 	isb	sy
 8004ff0:	f3bf 8f4f 	dsb	sy
 8004ff4:	60fb      	str	r3, [r7, #12]
}
 8004ff6:	bf00      	nop
 8004ff8:	e7fe      	b.n	8004ff8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005000:	f023 0301 	bic.w	r3, r3, #1
 8005004:	b2da      	uxtb	r2, r3
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	6a1b      	ldr	r3, [r3, #32]
 8005010:	6978      	ldr	r0, [r7, #20]
 8005012:	4798      	blx	r3
}
 8005014:	bf00      	nop
 8005016:	3718      	adds	r7, #24
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}
 800501c:	20000e74 	.word	0x20000e74

08005020 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005028:	f107 0308 	add.w	r3, r7, #8
 800502c:	4618      	mov	r0, r3
 800502e:	f000 f857 	bl	80050e0 <prvGetNextExpireTime>
 8005032:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	4619      	mov	r1, r3
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	f000 f803 	bl	8005044 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800503e:	f000 f8d5 	bl	80051ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005042:	e7f1      	b.n	8005028 <prvTimerTask+0x8>

08005044 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800504e:	f7ff fa39 	bl	80044c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005052:	f107 0308 	add.w	r3, r7, #8
 8005056:	4618      	mov	r0, r3
 8005058:	f000 f866 	bl	8005128 <prvSampleTimeNow>
 800505c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d130      	bne.n	80050c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d10a      	bne.n	8005080 <prvProcessTimerOrBlockTask+0x3c>
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	429a      	cmp	r2, r3
 8005070:	d806      	bhi.n	8005080 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005072:	f7ff fa35 	bl	80044e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005076:	68f9      	ldr	r1, [r7, #12]
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f7ff ff85 	bl	8004f88 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800507e:	e024      	b.n	80050ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d008      	beq.n	8005098 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005086:	4b13      	ldr	r3, [pc, #76]	; (80050d4 <prvProcessTimerOrBlockTask+0x90>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d101      	bne.n	8005094 <prvProcessTimerOrBlockTask+0x50>
 8005090:	2301      	movs	r3, #1
 8005092:	e000      	b.n	8005096 <prvProcessTimerOrBlockTask+0x52>
 8005094:	2300      	movs	r3, #0
 8005096:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005098:	4b0f      	ldr	r3, [pc, #60]	; (80050d8 <prvProcessTimerOrBlockTask+0x94>)
 800509a:	6818      	ldr	r0, [r3, #0]
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	683a      	ldr	r2, [r7, #0]
 80050a4:	4619      	mov	r1, r3
 80050a6:	f7fe ff7d 	bl	8003fa4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80050aa:	f7ff fa19 	bl	80044e0 <xTaskResumeAll>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d10a      	bne.n	80050ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80050b4:	4b09      	ldr	r3, [pc, #36]	; (80050dc <prvProcessTimerOrBlockTask+0x98>)
 80050b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050ba:	601a      	str	r2, [r3, #0]
 80050bc:	f3bf 8f4f 	dsb	sy
 80050c0:	f3bf 8f6f 	isb	sy
}
 80050c4:	e001      	b.n	80050ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80050c6:	f7ff fa0b 	bl	80044e0 <xTaskResumeAll>
}
 80050ca:	bf00      	nop
 80050cc:	3710      	adds	r7, #16
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	20000e78 	.word	0x20000e78
 80050d8:	20000e7c 	.word	0x20000e7c
 80050dc:	e000ed04 	.word	0xe000ed04

080050e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80050e0:	b480      	push	{r7}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80050e8:	4b0e      	ldr	r3, [pc, #56]	; (8005124 <prvGetNextExpireTime+0x44>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d101      	bne.n	80050f6 <prvGetNextExpireTime+0x16>
 80050f2:	2201      	movs	r2, #1
 80050f4:	e000      	b.n	80050f8 <prvGetNextExpireTime+0x18>
 80050f6:	2200      	movs	r2, #0
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d105      	bne.n	8005110 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005104:	4b07      	ldr	r3, [pc, #28]	; (8005124 <prvGetNextExpireTime+0x44>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	60fb      	str	r3, [r7, #12]
 800510e:	e001      	b.n	8005114 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005110:	2300      	movs	r3, #0
 8005112:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005114:	68fb      	ldr	r3, [r7, #12]
}
 8005116:	4618      	mov	r0, r3
 8005118:	3714      	adds	r7, #20
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	20000e74 	.word	0x20000e74

08005128 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005130:	f7ff fa74 	bl	800461c <xTaskGetTickCount>
 8005134:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005136:	4b0b      	ldr	r3, [pc, #44]	; (8005164 <prvSampleTimeNow+0x3c>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	429a      	cmp	r2, r3
 800513e:	d205      	bcs.n	800514c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005140:	f000 f936 	bl	80053b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	601a      	str	r2, [r3, #0]
 800514a:	e002      	b.n	8005152 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005152:	4a04      	ldr	r2, [pc, #16]	; (8005164 <prvSampleTimeNow+0x3c>)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005158:	68fb      	ldr	r3, [r7, #12]
}
 800515a:	4618      	mov	r0, r3
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	20000e84 	.word	0x20000e84

08005168 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b086      	sub	sp, #24
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]
 8005174:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005176:	2300      	movs	r3, #0
 8005178:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005186:	68ba      	ldr	r2, [r7, #8]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	429a      	cmp	r2, r3
 800518c:	d812      	bhi.n	80051b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	1ad2      	subs	r2, r2, r3
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	429a      	cmp	r2, r3
 800519a:	d302      	bcc.n	80051a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800519c:	2301      	movs	r3, #1
 800519e:	617b      	str	r3, [r7, #20]
 80051a0:	e01b      	b.n	80051da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80051a2:	4b10      	ldr	r3, [pc, #64]	; (80051e4 <prvInsertTimerInActiveList+0x7c>)
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	3304      	adds	r3, #4
 80051aa:	4619      	mov	r1, r3
 80051ac:	4610      	mov	r0, r2
 80051ae:	f7fe f9de 	bl	800356e <vListInsert>
 80051b2:	e012      	b.n	80051da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d206      	bcs.n	80051ca <prvInsertTimerInActiveList+0x62>
 80051bc:	68ba      	ldr	r2, [r7, #8]
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d302      	bcc.n	80051ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80051c4:	2301      	movs	r3, #1
 80051c6:	617b      	str	r3, [r7, #20]
 80051c8:	e007      	b.n	80051da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80051ca:	4b07      	ldr	r3, [pc, #28]	; (80051e8 <prvInsertTimerInActiveList+0x80>)
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	3304      	adds	r3, #4
 80051d2:	4619      	mov	r1, r3
 80051d4:	4610      	mov	r0, r2
 80051d6:	f7fe f9ca 	bl	800356e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80051da:	697b      	ldr	r3, [r7, #20]
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3718      	adds	r7, #24
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	20000e78 	.word	0x20000e78
 80051e8:	20000e74 	.word	0x20000e74

080051ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b08e      	sub	sp, #56	; 0x38
 80051f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80051f2:	e0ca      	b.n	800538a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	da18      	bge.n	800522c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80051fa:	1d3b      	adds	r3, r7, #4
 80051fc:	3304      	adds	r3, #4
 80051fe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005202:	2b00      	cmp	r3, #0
 8005204:	d10a      	bne.n	800521c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800520a:	f383 8811 	msr	BASEPRI, r3
 800520e:	f3bf 8f6f 	isb	sy
 8005212:	f3bf 8f4f 	dsb	sy
 8005216:	61fb      	str	r3, [r7, #28]
}
 8005218:	bf00      	nop
 800521a:	e7fe      	b.n	800521a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800521c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005222:	6850      	ldr	r0, [r2, #4]
 8005224:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005226:	6892      	ldr	r2, [r2, #8]
 8005228:	4611      	mov	r1, r2
 800522a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	f2c0 80aa 	blt.w	8005388 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523a:	695b      	ldr	r3, [r3, #20]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d004      	beq.n	800524a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005242:	3304      	adds	r3, #4
 8005244:	4618      	mov	r0, r3
 8005246:	f7fe f9cb 	bl	80035e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800524a:	463b      	mov	r3, r7
 800524c:	4618      	mov	r0, r3
 800524e:	f7ff ff6b 	bl	8005128 <prvSampleTimeNow>
 8005252:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2b09      	cmp	r3, #9
 8005258:	f200 8097 	bhi.w	800538a <prvProcessReceivedCommands+0x19e>
 800525c:	a201      	add	r2, pc, #4	; (adr r2, 8005264 <prvProcessReceivedCommands+0x78>)
 800525e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005262:	bf00      	nop
 8005264:	0800528d 	.word	0x0800528d
 8005268:	0800528d 	.word	0x0800528d
 800526c:	0800528d 	.word	0x0800528d
 8005270:	08005301 	.word	0x08005301
 8005274:	08005315 	.word	0x08005315
 8005278:	0800535f 	.word	0x0800535f
 800527c:	0800528d 	.word	0x0800528d
 8005280:	0800528d 	.word	0x0800528d
 8005284:	08005301 	.word	0x08005301
 8005288:	08005315 	.word	0x08005315
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800528c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800528e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005292:	f043 0301 	orr.w	r3, r3, #1
 8005296:	b2da      	uxtb	r2, r3
 8005298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800529e:	68ba      	ldr	r2, [r7, #8]
 80052a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	18d1      	adds	r1, r2, r3
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052ac:	f7ff ff5c 	bl	8005168 <prvInsertTimerInActiveList>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d069      	beq.n	800538a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b8:	6a1b      	ldr	r3, [r3, #32]
 80052ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052bc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80052be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052c4:	f003 0304 	and.w	r3, r3, #4
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d05e      	beq.n	800538a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80052cc:	68ba      	ldr	r2, [r7, #8]
 80052ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d0:	699b      	ldr	r3, [r3, #24]
 80052d2:	441a      	add	r2, r3
 80052d4:	2300      	movs	r3, #0
 80052d6:	9300      	str	r3, [sp, #0]
 80052d8:	2300      	movs	r3, #0
 80052da:	2100      	movs	r1, #0
 80052dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052de:	f7ff fe05 	bl	8004eec <xTimerGenericCommand>
 80052e2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80052e4:	6a3b      	ldr	r3, [r7, #32]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d14f      	bne.n	800538a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80052ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ee:	f383 8811 	msr	BASEPRI, r3
 80052f2:	f3bf 8f6f 	isb	sy
 80052f6:	f3bf 8f4f 	dsb	sy
 80052fa:	61bb      	str	r3, [r7, #24]
}
 80052fc:	bf00      	nop
 80052fe:	e7fe      	b.n	80052fe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005302:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005306:	f023 0301 	bic.w	r3, r3, #1
 800530a:	b2da      	uxtb	r2, r3
 800530c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005312:	e03a      	b.n	800538a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005316:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800531a:	f043 0301 	orr.w	r3, r3, #1
 800531e:	b2da      	uxtb	r2, r3
 8005320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005322:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005326:	68ba      	ldr	r2, [r7, #8]
 8005328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800532c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d10a      	bne.n	800534a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005338:	f383 8811 	msr	BASEPRI, r3
 800533c:	f3bf 8f6f 	isb	sy
 8005340:	f3bf 8f4f 	dsb	sy
 8005344:	617b      	str	r3, [r7, #20]
}
 8005346:	bf00      	nop
 8005348:	e7fe      	b.n	8005348 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800534a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534c:	699a      	ldr	r2, [r3, #24]
 800534e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005350:	18d1      	adds	r1, r2, r3
 8005352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005356:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005358:	f7ff ff06 	bl	8005168 <prvInsertTimerInActiveList>
					break;
 800535c:	e015      	b.n	800538a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800535e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005360:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005364:	f003 0302 	and.w	r3, r3, #2
 8005368:	2b00      	cmp	r3, #0
 800536a:	d103      	bne.n	8005374 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800536c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800536e:	f000 fbdf 	bl	8005b30 <vPortFree>
 8005372:	e00a      	b.n	800538a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005376:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800537a:	f023 0301 	bic.w	r3, r3, #1
 800537e:	b2da      	uxtb	r2, r3
 8005380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005382:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005386:	e000      	b.n	800538a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005388:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800538a:	4b08      	ldr	r3, [pc, #32]	; (80053ac <prvProcessReceivedCommands+0x1c0>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	1d39      	adds	r1, r7, #4
 8005390:	2200      	movs	r2, #0
 8005392:	4618      	mov	r0, r3
 8005394:	f7fe fbec 	bl	8003b70 <xQueueReceive>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	f47f af2a 	bne.w	80051f4 <prvProcessReceivedCommands+0x8>
	}
}
 80053a0:	bf00      	nop
 80053a2:	bf00      	nop
 80053a4:	3730      	adds	r7, #48	; 0x30
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	20000e7c 	.word	0x20000e7c

080053b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b088      	sub	sp, #32
 80053b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80053b6:	e048      	b.n	800544a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80053b8:	4b2d      	ldr	r3, [pc, #180]	; (8005470 <prvSwitchTimerLists+0xc0>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053c2:	4b2b      	ldr	r3, [pc, #172]	; (8005470 <prvSwitchTimerLists+0xc0>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	3304      	adds	r3, #4
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7fe f905 	bl	80035e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6a1b      	ldr	r3, [r3, #32]
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053e4:	f003 0304 	and.w	r3, r3, #4
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d02e      	beq.n	800544a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	693a      	ldr	r2, [r7, #16]
 80053f2:	4413      	add	r3, r2
 80053f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d90e      	bls.n	800541c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	68ba      	ldr	r2, [r7, #8]
 8005402:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800540a:	4b19      	ldr	r3, [pc, #100]	; (8005470 <prvSwitchTimerLists+0xc0>)
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	3304      	adds	r3, #4
 8005412:	4619      	mov	r1, r3
 8005414:	4610      	mov	r0, r2
 8005416:	f7fe f8aa 	bl	800356e <vListInsert>
 800541a:	e016      	b.n	800544a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800541c:	2300      	movs	r3, #0
 800541e:	9300      	str	r3, [sp, #0]
 8005420:	2300      	movs	r3, #0
 8005422:	693a      	ldr	r2, [r7, #16]
 8005424:	2100      	movs	r1, #0
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f7ff fd60 	bl	8004eec <xTimerGenericCommand>
 800542c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d10a      	bne.n	800544a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005438:	f383 8811 	msr	BASEPRI, r3
 800543c:	f3bf 8f6f 	isb	sy
 8005440:	f3bf 8f4f 	dsb	sy
 8005444:	603b      	str	r3, [r7, #0]
}
 8005446:	bf00      	nop
 8005448:	e7fe      	b.n	8005448 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800544a:	4b09      	ldr	r3, [pc, #36]	; (8005470 <prvSwitchTimerLists+0xc0>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d1b1      	bne.n	80053b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005454:	4b06      	ldr	r3, [pc, #24]	; (8005470 <prvSwitchTimerLists+0xc0>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800545a:	4b06      	ldr	r3, [pc, #24]	; (8005474 <prvSwitchTimerLists+0xc4>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a04      	ldr	r2, [pc, #16]	; (8005470 <prvSwitchTimerLists+0xc0>)
 8005460:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005462:	4a04      	ldr	r2, [pc, #16]	; (8005474 <prvSwitchTimerLists+0xc4>)
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	6013      	str	r3, [r2, #0]
}
 8005468:	bf00      	nop
 800546a:	3718      	adds	r7, #24
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}
 8005470:	20000e74 	.word	0x20000e74
 8005474:	20000e78 	.word	0x20000e78

08005478 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800547e:	f000 f969 	bl	8005754 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005482:	4b15      	ldr	r3, [pc, #84]	; (80054d8 <prvCheckForValidListAndQueue+0x60>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d120      	bne.n	80054cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800548a:	4814      	ldr	r0, [pc, #80]	; (80054dc <prvCheckForValidListAndQueue+0x64>)
 800548c:	f7fe f81e 	bl	80034cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005490:	4813      	ldr	r0, [pc, #76]	; (80054e0 <prvCheckForValidListAndQueue+0x68>)
 8005492:	f7fe f81b 	bl	80034cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005496:	4b13      	ldr	r3, [pc, #76]	; (80054e4 <prvCheckForValidListAndQueue+0x6c>)
 8005498:	4a10      	ldr	r2, [pc, #64]	; (80054dc <prvCheckForValidListAndQueue+0x64>)
 800549a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800549c:	4b12      	ldr	r3, [pc, #72]	; (80054e8 <prvCheckForValidListAndQueue+0x70>)
 800549e:	4a10      	ldr	r2, [pc, #64]	; (80054e0 <prvCheckForValidListAndQueue+0x68>)
 80054a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80054a2:	2300      	movs	r3, #0
 80054a4:	9300      	str	r3, [sp, #0]
 80054a6:	4b11      	ldr	r3, [pc, #68]	; (80054ec <prvCheckForValidListAndQueue+0x74>)
 80054a8:	4a11      	ldr	r2, [pc, #68]	; (80054f0 <prvCheckForValidListAndQueue+0x78>)
 80054aa:	2110      	movs	r1, #16
 80054ac:	200a      	movs	r0, #10
 80054ae:	f7fe f929 	bl	8003704 <xQueueGenericCreateStatic>
 80054b2:	4603      	mov	r3, r0
 80054b4:	4a08      	ldr	r2, [pc, #32]	; (80054d8 <prvCheckForValidListAndQueue+0x60>)
 80054b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80054b8:	4b07      	ldr	r3, [pc, #28]	; (80054d8 <prvCheckForValidListAndQueue+0x60>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d005      	beq.n	80054cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80054c0:	4b05      	ldr	r3, [pc, #20]	; (80054d8 <prvCheckForValidListAndQueue+0x60>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	490b      	ldr	r1, [pc, #44]	; (80054f4 <prvCheckForValidListAndQueue+0x7c>)
 80054c6:	4618      	mov	r0, r3
 80054c8:	f7fe fd42 	bl	8003f50 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80054cc:	f000 f972 	bl	80057b4 <vPortExitCritical>
}
 80054d0:	bf00      	nop
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	20000e7c 	.word	0x20000e7c
 80054dc:	20000e4c 	.word	0x20000e4c
 80054e0:	20000e60 	.word	0x20000e60
 80054e4:	20000e74 	.word	0x20000e74
 80054e8:	20000e78 	.word	0x20000e78
 80054ec:	20000f28 	.word	0x20000f28
 80054f0:	20000e88 	.word	0x20000e88
 80054f4:	08006f34 	.word	0x08006f34

080054f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80054f8:	b480      	push	{r7}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	3b04      	subs	r3, #4
 8005508:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005510:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	3b04      	subs	r3, #4
 8005516:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	f023 0201 	bic.w	r2, r3, #1
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	3b04      	subs	r3, #4
 8005526:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005528:	4a0c      	ldr	r2, [pc, #48]	; (800555c <pxPortInitialiseStack+0x64>)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	3b14      	subs	r3, #20
 8005532:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	3b04      	subs	r3, #4
 800553e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f06f 0202 	mvn.w	r2, #2
 8005546:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	3b20      	subs	r3, #32
 800554c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800554e:	68fb      	ldr	r3, [r7, #12]
}
 8005550:	4618      	mov	r0, r3
 8005552:	3714      	adds	r7, #20
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr
 800555c:	08005561 	.word	0x08005561

08005560 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005560:	b480      	push	{r7}
 8005562:	b085      	sub	sp, #20
 8005564:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005566:	2300      	movs	r3, #0
 8005568:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800556a:	4b12      	ldr	r3, [pc, #72]	; (80055b4 <prvTaskExitError+0x54>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005572:	d00a      	beq.n	800558a <prvTaskExitError+0x2a>
	__asm volatile
 8005574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005578:	f383 8811 	msr	BASEPRI, r3
 800557c:	f3bf 8f6f 	isb	sy
 8005580:	f3bf 8f4f 	dsb	sy
 8005584:	60fb      	str	r3, [r7, #12]
}
 8005586:	bf00      	nop
 8005588:	e7fe      	b.n	8005588 <prvTaskExitError+0x28>
	__asm volatile
 800558a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558e:	f383 8811 	msr	BASEPRI, r3
 8005592:	f3bf 8f6f 	isb	sy
 8005596:	f3bf 8f4f 	dsb	sy
 800559a:	60bb      	str	r3, [r7, #8]
}
 800559c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800559e:	bf00      	nop
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d0fc      	beq.n	80055a0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80055a6:	bf00      	nop
 80055a8:	bf00      	nop
 80055aa:	3714      	adds	r7, #20
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr
 80055b4:	2000000c 	.word	0x2000000c
	...

080055c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80055c0:	4b07      	ldr	r3, [pc, #28]	; (80055e0 <pxCurrentTCBConst2>)
 80055c2:	6819      	ldr	r1, [r3, #0]
 80055c4:	6808      	ldr	r0, [r1, #0]
 80055c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055ca:	f380 8809 	msr	PSP, r0
 80055ce:	f3bf 8f6f 	isb	sy
 80055d2:	f04f 0000 	mov.w	r0, #0
 80055d6:	f380 8811 	msr	BASEPRI, r0
 80055da:	4770      	bx	lr
 80055dc:	f3af 8000 	nop.w

080055e0 <pxCurrentTCBConst2>:
 80055e0:	2000094c 	.word	0x2000094c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80055e4:	bf00      	nop
 80055e6:	bf00      	nop

080055e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80055e8:	4808      	ldr	r0, [pc, #32]	; (800560c <prvPortStartFirstTask+0x24>)
 80055ea:	6800      	ldr	r0, [r0, #0]
 80055ec:	6800      	ldr	r0, [r0, #0]
 80055ee:	f380 8808 	msr	MSP, r0
 80055f2:	f04f 0000 	mov.w	r0, #0
 80055f6:	f380 8814 	msr	CONTROL, r0
 80055fa:	b662      	cpsie	i
 80055fc:	b661      	cpsie	f
 80055fe:	f3bf 8f4f 	dsb	sy
 8005602:	f3bf 8f6f 	isb	sy
 8005606:	df00      	svc	0
 8005608:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800560a:	bf00      	nop
 800560c:	e000ed08 	.word	0xe000ed08

08005610 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b086      	sub	sp, #24
 8005614:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005616:	4b46      	ldr	r3, [pc, #280]	; (8005730 <xPortStartScheduler+0x120>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a46      	ldr	r2, [pc, #280]	; (8005734 <xPortStartScheduler+0x124>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d10a      	bne.n	8005636 <xPortStartScheduler+0x26>
	__asm volatile
 8005620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005624:	f383 8811 	msr	BASEPRI, r3
 8005628:	f3bf 8f6f 	isb	sy
 800562c:	f3bf 8f4f 	dsb	sy
 8005630:	613b      	str	r3, [r7, #16]
}
 8005632:	bf00      	nop
 8005634:	e7fe      	b.n	8005634 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005636:	4b3e      	ldr	r3, [pc, #248]	; (8005730 <xPortStartScheduler+0x120>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a3f      	ldr	r2, [pc, #252]	; (8005738 <xPortStartScheduler+0x128>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d10a      	bne.n	8005656 <xPortStartScheduler+0x46>
	__asm volatile
 8005640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005644:	f383 8811 	msr	BASEPRI, r3
 8005648:	f3bf 8f6f 	isb	sy
 800564c:	f3bf 8f4f 	dsb	sy
 8005650:	60fb      	str	r3, [r7, #12]
}
 8005652:	bf00      	nop
 8005654:	e7fe      	b.n	8005654 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005656:	4b39      	ldr	r3, [pc, #228]	; (800573c <xPortStartScheduler+0x12c>)
 8005658:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	b2db      	uxtb	r3, r3
 8005660:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	22ff      	movs	r2, #255	; 0xff
 8005666:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	b2db      	uxtb	r3, r3
 800566e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005670:	78fb      	ldrb	r3, [r7, #3]
 8005672:	b2db      	uxtb	r3, r3
 8005674:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005678:	b2da      	uxtb	r2, r3
 800567a:	4b31      	ldr	r3, [pc, #196]	; (8005740 <xPortStartScheduler+0x130>)
 800567c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800567e:	4b31      	ldr	r3, [pc, #196]	; (8005744 <xPortStartScheduler+0x134>)
 8005680:	2207      	movs	r2, #7
 8005682:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005684:	e009      	b.n	800569a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005686:	4b2f      	ldr	r3, [pc, #188]	; (8005744 <xPortStartScheduler+0x134>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	3b01      	subs	r3, #1
 800568c:	4a2d      	ldr	r2, [pc, #180]	; (8005744 <xPortStartScheduler+0x134>)
 800568e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005690:	78fb      	ldrb	r3, [r7, #3]
 8005692:	b2db      	uxtb	r3, r3
 8005694:	005b      	lsls	r3, r3, #1
 8005696:	b2db      	uxtb	r3, r3
 8005698:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800569a:	78fb      	ldrb	r3, [r7, #3]
 800569c:	b2db      	uxtb	r3, r3
 800569e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a2:	2b80      	cmp	r3, #128	; 0x80
 80056a4:	d0ef      	beq.n	8005686 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80056a6:	4b27      	ldr	r3, [pc, #156]	; (8005744 <xPortStartScheduler+0x134>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f1c3 0307 	rsb	r3, r3, #7
 80056ae:	2b04      	cmp	r3, #4
 80056b0:	d00a      	beq.n	80056c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80056b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b6:	f383 8811 	msr	BASEPRI, r3
 80056ba:	f3bf 8f6f 	isb	sy
 80056be:	f3bf 8f4f 	dsb	sy
 80056c2:	60bb      	str	r3, [r7, #8]
}
 80056c4:	bf00      	nop
 80056c6:	e7fe      	b.n	80056c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80056c8:	4b1e      	ldr	r3, [pc, #120]	; (8005744 <xPortStartScheduler+0x134>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	021b      	lsls	r3, r3, #8
 80056ce:	4a1d      	ldr	r2, [pc, #116]	; (8005744 <xPortStartScheduler+0x134>)
 80056d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80056d2:	4b1c      	ldr	r3, [pc, #112]	; (8005744 <xPortStartScheduler+0x134>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80056da:	4a1a      	ldr	r2, [pc, #104]	; (8005744 <xPortStartScheduler+0x134>)
 80056dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	b2da      	uxtb	r2, r3
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80056e6:	4b18      	ldr	r3, [pc, #96]	; (8005748 <xPortStartScheduler+0x138>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a17      	ldr	r2, [pc, #92]	; (8005748 <xPortStartScheduler+0x138>)
 80056ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80056f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80056f2:	4b15      	ldr	r3, [pc, #84]	; (8005748 <xPortStartScheduler+0x138>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a14      	ldr	r2, [pc, #80]	; (8005748 <xPortStartScheduler+0x138>)
 80056f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80056fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80056fe:	f000 f8dd 	bl	80058bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005702:	4b12      	ldr	r3, [pc, #72]	; (800574c <xPortStartScheduler+0x13c>)
 8005704:	2200      	movs	r2, #0
 8005706:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005708:	f000 f8fc 	bl	8005904 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800570c:	4b10      	ldr	r3, [pc, #64]	; (8005750 <xPortStartScheduler+0x140>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a0f      	ldr	r2, [pc, #60]	; (8005750 <xPortStartScheduler+0x140>)
 8005712:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005716:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005718:	f7ff ff66 	bl	80055e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800571c:	f7ff f848 	bl	80047b0 <vTaskSwitchContext>
	prvTaskExitError();
 8005720:	f7ff ff1e 	bl	8005560 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3718      	adds	r7, #24
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	e000ed00 	.word	0xe000ed00
 8005734:	410fc271 	.word	0x410fc271
 8005738:	410fc270 	.word	0x410fc270
 800573c:	e000e400 	.word	0xe000e400
 8005740:	20000f78 	.word	0x20000f78
 8005744:	20000f7c 	.word	0x20000f7c
 8005748:	e000ed20 	.word	0xe000ed20
 800574c:	2000000c 	.word	0x2000000c
 8005750:	e000ef34 	.word	0xe000ef34

08005754 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
	__asm volatile
 800575a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575e:	f383 8811 	msr	BASEPRI, r3
 8005762:	f3bf 8f6f 	isb	sy
 8005766:	f3bf 8f4f 	dsb	sy
 800576a:	607b      	str	r3, [r7, #4]
}
 800576c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800576e:	4b0f      	ldr	r3, [pc, #60]	; (80057ac <vPortEnterCritical+0x58>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	3301      	adds	r3, #1
 8005774:	4a0d      	ldr	r2, [pc, #52]	; (80057ac <vPortEnterCritical+0x58>)
 8005776:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005778:	4b0c      	ldr	r3, [pc, #48]	; (80057ac <vPortEnterCritical+0x58>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2b01      	cmp	r3, #1
 800577e:	d10f      	bne.n	80057a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005780:	4b0b      	ldr	r3, [pc, #44]	; (80057b0 <vPortEnterCritical+0x5c>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	b2db      	uxtb	r3, r3
 8005786:	2b00      	cmp	r3, #0
 8005788:	d00a      	beq.n	80057a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800578a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578e:	f383 8811 	msr	BASEPRI, r3
 8005792:	f3bf 8f6f 	isb	sy
 8005796:	f3bf 8f4f 	dsb	sy
 800579a:	603b      	str	r3, [r7, #0]
}
 800579c:	bf00      	nop
 800579e:	e7fe      	b.n	800579e <vPortEnterCritical+0x4a>
	}
}
 80057a0:	bf00      	nop
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr
 80057ac:	2000000c 	.word	0x2000000c
 80057b0:	e000ed04 	.word	0xe000ed04

080057b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80057ba:	4b12      	ldr	r3, [pc, #72]	; (8005804 <vPortExitCritical+0x50>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d10a      	bne.n	80057d8 <vPortExitCritical+0x24>
	__asm volatile
 80057c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c6:	f383 8811 	msr	BASEPRI, r3
 80057ca:	f3bf 8f6f 	isb	sy
 80057ce:	f3bf 8f4f 	dsb	sy
 80057d2:	607b      	str	r3, [r7, #4]
}
 80057d4:	bf00      	nop
 80057d6:	e7fe      	b.n	80057d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80057d8:	4b0a      	ldr	r3, [pc, #40]	; (8005804 <vPortExitCritical+0x50>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	3b01      	subs	r3, #1
 80057de:	4a09      	ldr	r2, [pc, #36]	; (8005804 <vPortExitCritical+0x50>)
 80057e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80057e2:	4b08      	ldr	r3, [pc, #32]	; (8005804 <vPortExitCritical+0x50>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d105      	bne.n	80057f6 <vPortExitCritical+0x42>
 80057ea:	2300      	movs	r3, #0
 80057ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	f383 8811 	msr	BASEPRI, r3
}
 80057f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80057f6:	bf00      	nop
 80057f8:	370c      	adds	r7, #12
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop
 8005804:	2000000c 	.word	0x2000000c
	...

08005810 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005810:	f3ef 8009 	mrs	r0, PSP
 8005814:	f3bf 8f6f 	isb	sy
 8005818:	4b15      	ldr	r3, [pc, #84]	; (8005870 <pxCurrentTCBConst>)
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	f01e 0f10 	tst.w	lr, #16
 8005820:	bf08      	it	eq
 8005822:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005826:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800582a:	6010      	str	r0, [r2, #0]
 800582c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005830:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005834:	f380 8811 	msr	BASEPRI, r0
 8005838:	f3bf 8f4f 	dsb	sy
 800583c:	f3bf 8f6f 	isb	sy
 8005840:	f7fe ffb6 	bl	80047b0 <vTaskSwitchContext>
 8005844:	f04f 0000 	mov.w	r0, #0
 8005848:	f380 8811 	msr	BASEPRI, r0
 800584c:	bc09      	pop	{r0, r3}
 800584e:	6819      	ldr	r1, [r3, #0]
 8005850:	6808      	ldr	r0, [r1, #0]
 8005852:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005856:	f01e 0f10 	tst.w	lr, #16
 800585a:	bf08      	it	eq
 800585c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005860:	f380 8809 	msr	PSP, r0
 8005864:	f3bf 8f6f 	isb	sy
 8005868:	4770      	bx	lr
 800586a:	bf00      	nop
 800586c:	f3af 8000 	nop.w

08005870 <pxCurrentTCBConst>:
 8005870:	2000094c 	.word	0x2000094c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005874:	bf00      	nop
 8005876:	bf00      	nop

08005878 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
	__asm volatile
 800587e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005882:	f383 8811 	msr	BASEPRI, r3
 8005886:	f3bf 8f6f 	isb	sy
 800588a:	f3bf 8f4f 	dsb	sy
 800588e:	607b      	str	r3, [r7, #4]
}
 8005890:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005892:	f7fe fed3 	bl	800463c <xTaskIncrementTick>
 8005896:	4603      	mov	r3, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d003      	beq.n	80058a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800589c:	4b06      	ldr	r3, [pc, #24]	; (80058b8 <xPortSysTickHandler+0x40>)
 800589e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058a2:	601a      	str	r2, [r3, #0]
 80058a4:	2300      	movs	r3, #0
 80058a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	f383 8811 	msr	BASEPRI, r3
}
 80058ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80058b0:	bf00      	nop
 80058b2:	3708      	adds	r7, #8
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	e000ed04 	.word	0xe000ed04

080058bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80058bc:	b480      	push	{r7}
 80058be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80058c0:	4b0b      	ldr	r3, [pc, #44]	; (80058f0 <vPortSetupTimerInterrupt+0x34>)
 80058c2:	2200      	movs	r2, #0
 80058c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80058c6:	4b0b      	ldr	r3, [pc, #44]	; (80058f4 <vPortSetupTimerInterrupt+0x38>)
 80058c8:	2200      	movs	r2, #0
 80058ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80058cc:	4b0a      	ldr	r3, [pc, #40]	; (80058f8 <vPortSetupTimerInterrupt+0x3c>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a0a      	ldr	r2, [pc, #40]	; (80058fc <vPortSetupTimerInterrupt+0x40>)
 80058d2:	fba2 2303 	umull	r2, r3, r2, r3
 80058d6:	099b      	lsrs	r3, r3, #6
 80058d8:	4a09      	ldr	r2, [pc, #36]	; (8005900 <vPortSetupTimerInterrupt+0x44>)
 80058da:	3b01      	subs	r3, #1
 80058dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80058de:	4b04      	ldr	r3, [pc, #16]	; (80058f0 <vPortSetupTimerInterrupt+0x34>)
 80058e0:	2207      	movs	r2, #7
 80058e2:	601a      	str	r2, [r3, #0]
}
 80058e4:	bf00      	nop
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop
 80058f0:	e000e010 	.word	0xe000e010
 80058f4:	e000e018 	.word	0xe000e018
 80058f8:	20000000 	.word	0x20000000
 80058fc:	10624dd3 	.word	0x10624dd3
 8005900:	e000e014 	.word	0xe000e014

08005904 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005904:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005914 <vPortEnableVFP+0x10>
 8005908:	6801      	ldr	r1, [r0, #0]
 800590a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800590e:	6001      	str	r1, [r0, #0]
 8005910:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005912:	bf00      	nop
 8005914:	e000ed88 	.word	0xe000ed88

08005918 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800591e:	f3ef 8305 	mrs	r3, IPSR
 8005922:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2b0f      	cmp	r3, #15
 8005928:	d914      	bls.n	8005954 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800592a:	4a17      	ldr	r2, [pc, #92]	; (8005988 <vPortValidateInterruptPriority+0x70>)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	4413      	add	r3, r2
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005934:	4b15      	ldr	r3, [pc, #84]	; (800598c <vPortValidateInterruptPriority+0x74>)
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	7afa      	ldrb	r2, [r7, #11]
 800593a:	429a      	cmp	r2, r3
 800593c:	d20a      	bcs.n	8005954 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800593e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005942:	f383 8811 	msr	BASEPRI, r3
 8005946:	f3bf 8f6f 	isb	sy
 800594a:	f3bf 8f4f 	dsb	sy
 800594e:	607b      	str	r3, [r7, #4]
}
 8005950:	bf00      	nop
 8005952:	e7fe      	b.n	8005952 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005954:	4b0e      	ldr	r3, [pc, #56]	; (8005990 <vPortValidateInterruptPriority+0x78>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800595c:	4b0d      	ldr	r3, [pc, #52]	; (8005994 <vPortValidateInterruptPriority+0x7c>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	429a      	cmp	r2, r3
 8005962:	d90a      	bls.n	800597a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005968:	f383 8811 	msr	BASEPRI, r3
 800596c:	f3bf 8f6f 	isb	sy
 8005970:	f3bf 8f4f 	dsb	sy
 8005974:	603b      	str	r3, [r7, #0]
}
 8005976:	bf00      	nop
 8005978:	e7fe      	b.n	8005978 <vPortValidateInterruptPriority+0x60>
	}
 800597a:	bf00      	nop
 800597c:	3714      	adds	r7, #20
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop
 8005988:	e000e3f0 	.word	0xe000e3f0
 800598c:	20000f78 	.word	0x20000f78
 8005990:	e000ed0c 	.word	0xe000ed0c
 8005994:	20000f7c 	.word	0x20000f7c

08005998 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b08a      	sub	sp, #40	; 0x28
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80059a0:	2300      	movs	r3, #0
 80059a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80059a4:	f7fe fd8e 	bl	80044c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80059a8:	4b5b      	ldr	r3, [pc, #364]	; (8005b18 <pvPortMalloc+0x180>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d101      	bne.n	80059b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80059b0:	f000 f920 	bl	8005bf4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80059b4:	4b59      	ldr	r3, [pc, #356]	; (8005b1c <pvPortMalloc+0x184>)
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4013      	ands	r3, r2
 80059bc:	2b00      	cmp	r3, #0
 80059be:	f040 8093 	bne.w	8005ae8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d01d      	beq.n	8005a04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80059c8:	2208      	movs	r2, #8
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4413      	add	r3, r2
 80059ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f003 0307 	and.w	r3, r3, #7
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d014      	beq.n	8005a04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f023 0307 	bic.w	r3, r3, #7
 80059e0:	3308      	adds	r3, #8
 80059e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f003 0307 	and.w	r3, r3, #7
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00a      	beq.n	8005a04 <pvPortMalloc+0x6c>
	__asm volatile
 80059ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f2:	f383 8811 	msr	BASEPRI, r3
 80059f6:	f3bf 8f6f 	isb	sy
 80059fa:	f3bf 8f4f 	dsb	sy
 80059fe:	617b      	str	r3, [r7, #20]
}
 8005a00:	bf00      	nop
 8005a02:	e7fe      	b.n	8005a02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d06e      	beq.n	8005ae8 <pvPortMalloc+0x150>
 8005a0a:	4b45      	ldr	r3, [pc, #276]	; (8005b20 <pvPortMalloc+0x188>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d869      	bhi.n	8005ae8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005a14:	4b43      	ldr	r3, [pc, #268]	; (8005b24 <pvPortMalloc+0x18c>)
 8005a16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005a18:	4b42      	ldr	r3, [pc, #264]	; (8005b24 <pvPortMalloc+0x18c>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a1e:	e004      	b.n	8005a2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d903      	bls.n	8005a3c <pvPortMalloc+0xa4>
 8005a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d1f1      	bne.n	8005a20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005a3c:	4b36      	ldr	r3, [pc, #216]	; (8005b18 <pvPortMalloc+0x180>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d050      	beq.n	8005ae8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005a46:	6a3b      	ldr	r3, [r7, #32]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2208      	movs	r2, #8
 8005a4c:	4413      	add	r3, r2
 8005a4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	6a3b      	ldr	r3, [r7, #32]
 8005a56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5a:	685a      	ldr	r2, [r3, #4]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	1ad2      	subs	r2, r2, r3
 8005a60:	2308      	movs	r3, #8
 8005a62:	005b      	lsls	r3, r3, #1
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d91f      	bls.n	8005aa8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	f003 0307 	and.w	r3, r3, #7
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00a      	beq.n	8005a90 <pvPortMalloc+0xf8>
	__asm volatile
 8005a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a7e:	f383 8811 	msr	BASEPRI, r3
 8005a82:	f3bf 8f6f 	isb	sy
 8005a86:	f3bf 8f4f 	dsb	sy
 8005a8a:	613b      	str	r3, [r7, #16]
}
 8005a8c:	bf00      	nop
 8005a8e:	e7fe      	b.n	8005a8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a92:	685a      	ldr	r2, [r3, #4]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	1ad2      	subs	r2, r2, r3
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005aa2:	69b8      	ldr	r0, [r7, #24]
 8005aa4:	f000 f908 	bl	8005cb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005aa8:	4b1d      	ldr	r3, [pc, #116]	; (8005b20 <pvPortMalloc+0x188>)
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	4a1b      	ldr	r2, [pc, #108]	; (8005b20 <pvPortMalloc+0x188>)
 8005ab4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005ab6:	4b1a      	ldr	r3, [pc, #104]	; (8005b20 <pvPortMalloc+0x188>)
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	4b1b      	ldr	r3, [pc, #108]	; (8005b28 <pvPortMalloc+0x190>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d203      	bcs.n	8005aca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005ac2:	4b17      	ldr	r3, [pc, #92]	; (8005b20 <pvPortMalloc+0x188>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a18      	ldr	r2, [pc, #96]	; (8005b28 <pvPortMalloc+0x190>)
 8005ac8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005acc:	685a      	ldr	r2, [r3, #4]
 8005ace:	4b13      	ldr	r3, [pc, #76]	; (8005b1c <pvPortMalloc+0x184>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	431a      	orrs	r2, r3
 8005ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ada:	2200      	movs	r2, #0
 8005adc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005ade:	4b13      	ldr	r3, [pc, #76]	; (8005b2c <pvPortMalloc+0x194>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	4a11      	ldr	r2, [pc, #68]	; (8005b2c <pvPortMalloc+0x194>)
 8005ae6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005ae8:	f7fe fcfa 	bl	80044e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	f003 0307 	and.w	r3, r3, #7
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d00a      	beq.n	8005b0c <pvPortMalloc+0x174>
	__asm volatile
 8005af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005afa:	f383 8811 	msr	BASEPRI, r3
 8005afe:	f3bf 8f6f 	isb	sy
 8005b02:	f3bf 8f4f 	dsb	sy
 8005b06:	60fb      	str	r3, [r7, #12]
}
 8005b08:	bf00      	nop
 8005b0a:	e7fe      	b.n	8005b0a <pvPortMalloc+0x172>
	return pvReturn;
 8005b0c:	69fb      	ldr	r3, [r7, #28]
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3728      	adds	r7, #40	; 0x28
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	20004b88 	.word	0x20004b88
 8005b1c:	20004b9c 	.word	0x20004b9c
 8005b20:	20004b8c 	.word	0x20004b8c
 8005b24:	20004b80 	.word	0x20004b80
 8005b28:	20004b90 	.word	0x20004b90
 8005b2c:	20004b94 	.word	0x20004b94

08005b30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b086      	sub	sp, #24
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d04d      	beq.n	8005bde <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005b42:	2308      	movs	r3, #8
 8005b44:	425b      	negs	r3, r3
 8005b46:	697a      	ldr	r2, [r7, #20]
 8005b48:	4413      	add	r3, r2
 8005b4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	685a      	ldr	r2, [r3, #4]
 8005b54:	4b24      	ldr	r3, [pc, #144]	; (8005be8 <vPortFree+0xb8>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4013      	ands	r3, r2
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d10a      	bne.n	8005b74 <vPortFree+0x44>
	__asm volatile
 8005b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b62:	f383 8811 	msr	BASEPRI, r3
 8005b66:	f3bf 8f6f 	isb	sy
 8005b6a:	f3bf 8f4f 	dsb	sy
 8005b6e:	60fb      	str	r3, [r7, #12]
}
 8005b70:	bf00      	nop
 8005b72:	e7fe      	b.n	8005b72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d00a      	beq.n	8005b92 <vPortFree+0x62>
	__asm volatile
 8005b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b80:	f383 8811 	msr	BASEPRI, r3
 8005b84:	f3bf 8f6f 	isb	sy
 8005b88:	f3bf 8f4f 	dsb	sy
 8005b8c:	60bb      	str	r3, [r7, #8]
}
 8005b8e:	bf00      	nop
 8005b90:	e7fe      	b.n	8005b90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	685a      	ldr	r2, [r3, #4]
 8005b96:	4b14      	ldr	r3, [pc, #80]	; (8005be8 <vPortFree+0xb8>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d01e      	beq.n	8005bde <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d11a      	bne.n	8005bde <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	685a      	ldr	r2, [r3, #4]
 8005bac:	4b0e      	ldr	r3, [pc, #56]	; (8005be8 <vPortFree+0xb8>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	43db      	mvns	r3, r3
 8005bb2:	401a      	ands	r2, r3
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005bb8:	f7fe fc84 	bl	80044c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	685a      	ldr	r2, [r3, #4]
 8005bc0:	4b0a      	ldr	r3, [pc, #40]	; (8005bec <vPortFree+0xbc>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	4a09      	ldr	r2, [pc, #36]	; (8005bec <vPortFree+0xbc>)
 8005bc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005bca:	6938      	ldr	r0, [r7, #16]
 8005bcc:	f000 f874 	bl	8005cb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005bd0:	4b07      	ldr	r3, [pc, #28]	; (8005bf0 <vPortFree+0xc0>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	4a06      	ldr	r2, [pc, #24]	; (8005bf0 <vPortFree+0xc0>)
 8005bd8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005bda:	f7fe fc81 	bl	80044e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005bde:	bf00      	nop
 8005be0:	3718      	adds	r7, #24
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	20004b9c 	.word	0x20004b9c
 8005bec:	20004b8c 	.word	0x20004b8c
 8005bf0:	20004b98 	.word	0x20004b98

08005bf4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b085      	sub	sp, #20
 8005bf8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005bfa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005bfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005c00:	4b27      	ldr	r3, [pc, #156]	; (8005ca0 <prvHeapInit+0xac>)
 8005c02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f003 0307 	and.w	r3, r3, #7
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00c      	beq.n	8005c28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	3307      	adds	r3, #7
 8005c12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f023 0307 	bic.w	r3, r3, #7
 8005c1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005c1c:	68ba      	ldr	r2, [r7, #8]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	4a1f      	ldr	r2, [pc, #124]	; (8005ca0 <prvHeapInit+0xac>)
 8005c24:	4413      	add	r3, r2
 8005c26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005c2c:	4a1d      	ldr	r2, [pc, #116]	; (8005ca4 <prvHeapInit+0xb0>)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005c32:	4b1c      	ldr	r3, [pc, #112]	; (8005ca4 <prvHeapInit+0xb0>)
 8005c34:	2200      	movs	r2, #0
 8005c36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	68ba      	ldr	r2, [r7, #8]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005c40:	2208      	movs	r2, #8
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	1a9b      	subs	r3, r3, r2
 8005c46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f023 0307 	bic.w	r3, r3, #7
 8005c4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	4a15      	ldr	r2, [pc, #84]	; (8005ca8 <prvHeapInit+0xb4>)
 8005c54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005c56:	4b14      	ldr	r3, [pc, #80]	; (8005ca8 <prvHeapInit+0xb4>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005c5e:	4b12      	ldr	r3, [pc, #72]	; (8005ca8 <prvHeapInit+0xb4>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2200      	movs	r2, #0
 8005c64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	1ad2      	subs	r2, r2, r3
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005c74:	4b0c      	ldr	r3, [pc, #48]	; (8005ca8 <prvHeapInit+0xb4>)
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	4a0a      	ldr	r2, [pc, #40]	; (8005cac <prvHeapInit+0xb8>)
 8005c82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	4a09      	ldr	r2, [pc, #36]	; (8005cb0 <prvHeapInit+0xbc>)
 8005c8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005c8c:	4b09      	ldr	r3, [pc, #36]	; (8005cb4 <prvHeapInit+0xc0>)
 8005c8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005c92:	601a      	str	r2, [r3, #0]
}
 8005c94:	bf00      	nop
 8005c96:	3714      	adds	r7, #20
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr
 8005ca0:	20000f80 	.word	0x20000f80
 8005ca4:	20004b80 	.word	0x20004b80
 8005ca8:	20004b88 	.word	0x20004b88
 8005cac:	20004b90 	.word	0x20004b90
 8005cb0:	20004b8c 	.word	0x20004b8c
 8005cb4:	20004b9c 	.word	0x20004b9c

08005cb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005cc0:	4b28      	ldr	r3, [pc, #160]	; (8005d64 <prvInsertBlockIntoFreeList+0xac>)
 8005cc2:	60fb      	str	r3, [r7, #12]
 8005cc4:	e002      	b.n	8005ccc <prvInsertBlockIntoFreeList+0x14>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	60fb      	str	r3, [r7, #12]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d8f7      	bhi.n	8005cc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	68ba      	ldr	r2, [r7, #8]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d108      	bne.n	8005cfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	685a      	ldr	r2, [r3, #4]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	441a      	add	r2, r3
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	68ba      	ldr	r2, [r7, #8]
 8005d04:	441a      	add	r2, r3
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d118      	bne.n	8005d40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	4b15      	ldr	r3, [pc, #84]	; (8005d68 <prvInsertBlockIntoFreeList+0xb0>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d00d      	beq.n	8005d36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	685a      	ldr	r2, [r3, #4]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	441a      	add	r2, r3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	601a      	str	r2, [r3, #0]
 8005d34:	e008      	b.n	8005d48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005d36:	4b0c      	ldr	r3, [pc, #48]	; (8005d68 <prvInsertBlockIntoFreeList+0xb0>)
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	601a      	str	r2, [r3, #0]
 8005d3e:	e003      	b.n	8005d48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d002      	beq.n	8005d56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d56:	bf00      	nop
 8005d58:	3714      	adds	r7, #20
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop
 8005d64:	20004b80 	.word	0x20004b80
 8005d68:	20004b88 	.word	0x20004b88

08005d6c <__errno>:
 8005d6c:	4b01      	ldr	r3, [pc, #4]	; (8005d74 <__errno+0x8>)
 8005d6e:	6818      	ldr	r0, [r3, #0]
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	20000010 	.word	0x20000010

08005d78 <std>:
 8005d78:	2300      	movs	r3, #0
 8005d7a:	b510      	push	{r4, lr}
 8005d7c:	4604      	mov	r4, r0
 8005d7e:	e9c0 3300 	strd	r3, r3, [r0]
 8005d82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d86:	6083      	str	r3, [r0, #8]
 8005d88:	8181      	strh	r1, [r0, #12]
 8005d8a:	6643      	str	r3, [r0, #100]	; 0x64
 8005d8c:	81c2      	strh	r2, [r0, #14]
 8005d8e:	6183      	str	r3, [r0, #24]
 8005d90:	4619      	mov	r1, r3
 8005d92:	2208      	movs	r2, #8
 8005d94:	305c      	adds	r0, #92	; 0x5c
 8005d96:	f000 f91a 	bl	8005fce <memset>
 8005d9a:	4b05      	ldr	r3, [pc, #20]	; (8005db0 <std+0x38>)
 8005d9c:	6263      	str	r3, [r4, #36]	; 0x24
 8005d9e:	4b05      	ldr	r3, [pc, #20]	; (8005db4 <std+0x3c>)
 8005da0:	62a3      	str	r3, [r4, #40]	; 0x28
 8005da2:	4b05      	ldr	r3, [pc, #20]	; (8005db8 <std+0x40>)
 8005da4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005da6:	4b05      	ldr	r3, [pc, #20]	; (8005dbc <std+0x44>)
 8005da8:	6224      	str	r4, [r4, #32]
 8005daa:	6323      	str	r3, [r4, #48]	; 0x30
 8005dac:	bd10      	pop	{r4, pc}
 8005dae:	bf00      	nop
 8005db0:	08006319 	.word	0x08006319
 8005db4:	0800633b 	.word	0x0800633b
 8005db8:	08006373 	.word	0x08006373
 8005dbc:	08006397 	.word	0x08006397

08005dc0 <_cleanup_r>:
 8005dc0:	4901      	ldr	r1, [pc, #4]	; (8005dc8 <_cleanup_r+0x8>)
 8005dc2:	f000 b8af 	b.w	8005f24 <_fwalk_reent>
 8005dc6:	bf00      	nop
 8005dc8:	08006671 	.word	0x08006671

08005dcc <__sfmoreglue>:
 8005dcc:	b570      	push	{r4, r5, r6, lr}
 8005dce:	2268      	movs	r2, #104	; 0x68
 8005dd0:	1e4d      	subs	r5, r1, #1
 8005dd2:	4355      	muls	r5, r2
 8005dd4:	460e      	mov	r6, r1
 8005dd6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005dda:	f000 f921 	bl	8006020 <_malloc_r>
 8005dde:	4604      	mov	r4, r0
 8005de0:	b140      	cbz	r0, 8005df4 <__sfmoreglue+0x28>
 8005de2:	2100      	movs	r1, #0
 8005de4:	e9c0 1600 	strd	r1, r6, [r0]
 8005de8:	300c      	adds	r0, #12
 8005dea:	60a0      	str	r0, [r4, #8]
 8005dec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005df0:	f000 f8ed 	bl	8005fce <memset>
 8005df4:	4620      	mov	r0, r4
 8005df6:	bd70      	pop	{r4, r5, r6, pc}

08005df8 <__sfp_lock_acquire>:
 8005df8:	4801      	ldr	r0, [pc, #4]	; (8005e00 <__sfp_lock_acquire+0x8>)
 8005dfa:	f000 b8d8 	b.w	8005fae <__retarget_lock_acquire_recursive>
 8005dfe:	bf00      	nop
 8005e00:	20004ba1 	.word	0x20004ba1

08005e04 <__sfp_lock_release>:
 8005e04:	4801      	ldr	r0, [pc, #4]	; (8005e0c <__sfp_lock_release+0x8>)
 8005e06:	f000 b8d3 	b.w	8005fb0 <__retarget_lock_release_recursive>
 8005e0a:	bf00      	nop
 8005e0c:	20004ba1 	.word	0x20004ba1

08005e10 <__sinit_lock_acquire>:
 8005e10:	4801      	ldr	r0, [pc, #4]	; (8005e18 <__sinit_lock_acquire+0x8>)
 8005e12:	f000 b8cc 	b.w	8005fae <__retarget_lock_acquire_recursive>
 8005e16:	bf00      	nop
 8005e18:	20004ba2 	.word	0x20004ba2

08005e1c <__sinit_lock_release>:
 8005e1c:	4801      	ldr	r0, [pc, #4]	; (8005e24 <__sinit_lock_release+0x8>)
 8005e1e:	f000 b8c7 	b.w	8005fb0 <__retarget_lock_release_recursive>
 8005e22:	bf00      	nop
 8005e24:	20004ba2 	.word	0x20004ba2

08005e28 <__sinit>:
 8005e28:	b510      	push	{r4, lr}
 8005e2a:	4604      	mov	r4, r0
 8005e2c:	f7ff fff0 	bl	8005e10 <__sinit_lock_acquire>
 8005e30:	69a3      	ldr	r3, [r4, #24]
 8005e32:	b11b      	cbz	r3, 8005e3c <__sinit+0x14>
 8005e34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e38:	f7ff bff0 	b.w	8005e1c <__sinit_lock_release>
 8005e3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005e40:	6523      	str	r3, [r4, #80]	; 0x50
 8005e42:	4b13      	ldr	r3, [pc, #76]	; (8005e90 <__sinit+0x68>)
 8005e44:	4a13      	ldr	r2, [pc, #76]	; (8005e94 <__sinit+0x6c>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	62a2      	str	r2, [r4, #40]	; 0x28
 8005e4a:	42a3      	cmp	r3, r4
 8005e4c:	bf04      	itt	eq
 8005e4e:	2301      	moveq	r3, #1
 8005e50:	61a3      	streq	r3, [r4, #24]
 8005e52:	4620      	mov	r0, r4
 8005e54:	f000 f820 	bl	8005e98 <__sfp>
 8005e58:	6060      	str	r0, [r4, #4]
 8005e5a:	4620      	mov	r0, r4
 8005e5c:	f000 f81c 	bl	8005e98 <__sfp>
 8005e60:	60a0      	str	r0, [r4, #8]
 8005e62:	4620      	mov	r0, r4
 8005e64:	f000 f818 	bl	8005e98 <__sfp>
 8005e68:	2200      	movs	r2, #0
 8005e6a:	60e0      	str	r0, [r4, #12]
 8005e6c:	2104      	movs	r1, #4
 8005e6e:	6860      	ldr	r0, [r4, #4]
 8005e70:	f7ff ff82 	bl	8005d78 <std>
 8005e74:	68a0      	ldr	r0, [r4, #8]
 8005e76:	2201      	movs	r2, #1
 8005e78:	2109      	movs	r1, #9
 8005e7a:	f7ff ff7d 	bl	8005d78 <std>
 8005e7e:	68e0      	ldr	r0, [r4, #12]
 8005e80:	2202      	movs	r2, #2
 8005e82:	2112      	movs	r1, #18
 8005e84:	f7ff ff78 	bl	8005d78 <std>
 8005e88:	2301      	movs	r3, #1
 8005e8a:	61a3      	str	r3, [r4, #24]
 8005e8c:	e7d2      	b.n	8005e34 <__sinit+0xc>
 8005e8e:	bf00      	nop
 8005e90:	08007004 	.word	0x08007004
 8005e94:	08005dc1 	.word	0x08005dc1

08005e98 <__sfp>:
 8005e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e9a:	4607      	mov	r7, r0
 8005e9c:	f7ff ffac 	bl	8005df8 <__sfp_lock_acquire>
 8005ea0:	4b1e      	ldr	r3, [pc, #120]	; (8005f1c <__sfp+0x84>)
 8005ea2:	681e      	ldr	r6, [r3, #0]
 8005ea4:	69b3      	ldr	r3, [r6, #24]
 8005ea6:	b913      	cbnz	r3, 8005eae <__sfp+0x16>
 8005ea8:	4630      	mov	r0, r6
 8005eaa:	f7ff ffbd 	bl	8005e28 <__sinit>
 8005eae:	3648      	adds	r6, #72	; 0x48
 8005eb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005eb4:	3b01      	subs	r3, #1
 8005eb6:	d503      	bpl.n	8005ec0 <__sfp+0x28>
 8005eb8:	6833      	ldr	r3, [r6, #0]
 8005eba:	b30b      	cbz	r3, 8005f00 <__sfp+0x68>
 8005ebc:	6836      	ldr	r6, [r6, #0]
 8005ebe:	e7f7      	b.n	8005eb0 <__sfp+0x18>
 8005ec0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005ec4:	b9d5      	cbnz	r5, 8005efc <__sfp+0x64>
 8005ec6:	4b16      	ldr	r3, [pc, #88]	; (8005f20 <__sfp+0x88>)
 8005ec8:	60e3      	str	r3, [r4, #12]
 8005eca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005ece:	6665      	str	r5, [r4, #100]	; 0x64
 8005ed0:	f000 f86c 	bl	8005fac <__retarget_lock_init_recursive>
 8005ed4:	f7ff ff96 	bl	8005e04 <__sfp_lock_release>
 8005ed8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005edc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005ee0:	6025      	str	r5, [r4, #0]
 8005ee2:	61a5      	str	r5, [r4, #24]
 8005ee4:	2208      	movs	r2, #8
 8005ee6:	4629      	mov	r1, r5
 8005ee8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005eec:	f000 f86f 	bl	8005fce <memset>
 8005ef0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005ef4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005ef8:	4620      	mov	r0, r4
 8005efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005efc:	3468      	adds	r4, #104	; 0x68
 8005efe:	e7d9      	b.n	8005eb4 <__sfp+0x1c>
 8005f00:	2104      	movs	r1, #4
 8005f02:	4638      	mov	r0, r7
 8005f04:	f7ff ff62 	bl	8005dcc <__sfmoreglue>
 8005f08:	4604      	mov	r4, r0
 8005f0a:	6030      	str	r0, [r6, #0]
 8005f0c:	2800      	cmp	r0, #0
 8005f0e:	d1d5      	bne.n	8005ebc <__sfp+0x24>
 8005f10:	f7ff ff78 	bl	8005e04 <__sfp_lock_release>
 8005f14:	230c      	movs	r3, #12
 8005f16:	603b      	str	r3, [r7, #0]
 8005f18:	e7ee      	b.n	8005ef8 <__sfp+0x60>
 8005f1a:	bf00      	nop
 8005f1c:	08007004 	.word	0x08007004
 8005f20:	ffff0001 	.word	0xffff0001

08005f24 <_fwalk_reent>:
 8005f24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f28:	4606      	mov	r6, r0
 8005f2a:	4688      	mov	r8, r1
 8005f2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005f30:	2700      	movs	r7, #0
 8005f32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f36:	f1b9 0901 	subs.w	r9, r9, #1
 8005f3a:	d505      	bpl.n	8005f48 <_fwalk_reent+0x24>
 8005f3c:	6824      	ldr	r4, [r4, #0]
 8005f3e:	2c00      	cmp	r4, #0
 8005f40:	d1f7      	bne.n	8005f32 <_fwalk_reent+0xe>
 8005f42:	4638      	mov	r0, r7
 8005f44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f48:	89ab      	ldrh	r3, [r5, #12]
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d907      	bls.n	8005f5e <_fwalk_reent+0x3a>
 8005f4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f52:	3301      	adds	r3, #1
 8005f54:	d003      	beq.n	8005f5e <_fwalk_reent+0x3a>
 8005f56:	4629      	mov	r1, r5
 8005f58:	4630      	mov	r0, r6
 8005f5a:	47c0      	blx	r8
 8005f5c:	4307      	orrs	r7, r0
 8005f5e:	3568      	adds	r5, #104	; 0x68
 8005f60:	e7e9      	b.n	8005f36 <_fwalk_reent+0x12>
	...

08005f64 <__libc_init_array>:
 8005f64:	b570      	push	{r4, r5, r6, lr}
 8005f66:	4d0d      	ldr	r5, [pc, #52]	; (8005f9c <__libc_init_array+0x38>)
 8005f68:	4c0d      	ldr	r4, [pc, #52]	; (8005fa0 <__libc_init_array+0x3c>)
 8005f6a:	1b64      	subs	r4, r4, r5
 8005f6c:	10a4      	asrs	r4, r4, #2
 8005f6e:	2600      	movs	r6, #0
 8005f70:	42a6      	cmp	r6, r4
 8005f72:	d109      	bne.n	8005f88 <__libc_init_array+0x24>
 8005f74:	4d0b      	ldr	r5, [pc, #44]	; (8005fa4 <__libc_init_array+0x40>)
 8005f76:	4c0c      	ldr	r4, [pc, #48]	; (8005fa8 <__libc_init_array+0x44>)
 8005f78:	f000 ffa8 	bl	8006ecc <_init>
 8005f7c:	1b64      	subs	r4, r4, r5
 8005f7e:	10a4      	asrs	r4, r4, #2
 8005f80:	2600      	movs	r6, #0
 8005f82:	42a6      	cmp	r6, r4
 8005f84:	d105      	bne.n	8005f92 <__libc_init_array+0x2e>
 8005f86:	bd70      	pop	{r4, r5, r6, pc}
 8005f88:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f8c:	4798      	blx	r3
 8005f8e:	3601      	adds	r6, #1
 8005f90:	e7ee      	b.n	8005f70 <__libc_init_array+0xc>
 8005f92:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f96:	4798      	blx	r3
 8005f98:	3601      	adds	r6, #1
 8005f9a:	e7f2      	b.n	8005f82 <__libc_init_array+0x1e>
 8005f9c:	08007044 	.word	0x08007044
 8005fa0:	08007044 	.word	0x08007044
 8005fa4:	08007044 	.word	0x08007044
 8005fa8:	08007048 	.word	0x08007048

08005fac <__retarget_lock_init_recursive>:
 8005fac:	4770      	bx	lr

08005fae <__retarget_lock_acquire_recursive>:
 8005fae:	4770      	bx	lr

08005fb0 <__retarget_lock_release_recursive>:
 8005fb0:	4770      	bx	lr

08005fb2 <memcpy>:
 8005fb2:	440a      	add	r2, r1
 8005fb4:	4291      	cmp	r1, r2
 8005fb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8005fba:	d100      	bne.n	8005fbe <memcpy+0xc>
 8005fbc:	4770      	bx	lr
 8005fbe:	b510      	push	{r4, lr}
 8005fc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fc8:	4291      	cmp	r1, r2
 8005fca:	d1f9      	bne.n	8005fc0 <memcpy+0xe>
 8005fcc:	bd10      	pop	{r4, pc}

08005fce <memset>:
 8005fce:	4402      	add	r2, r0
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d100      	bne.n	8005fd8 <memset+0xa>
 8005fd6:	4770      	bx	lr
 8005fd8:	f803 1b01 	strb.w	r1, [r3], #1
 8005fdc:	e7f9      	b.n	8005fd2 <memset+0x4>
	...

08005fe0 <sbrk_aligned>:
 8005fe0:	b570      	push	{r4, r5, r6, lr}
 8005fe2:	4e0e      	ldr	r6, [pc, #56]	; (800601c <sbrk_aligned+0x3c>)
 8005fe4:	460c      	mov	r4, r1
 8005fe6:	6831      	ldr	r1, [r6, #0]
 8005fe8:	4605      	mov	r5, r0
 8005fea:	b911      	cbnz	r1, 8005ff2 <sbrk_aligned+0x12>
 8005fec:	f000 f984 	bl	80062f8 <_sbrk_r>
 8005ff0:	6030      	str	r0, [r6, #0]
 8005ff2:	4621      	mov	r1, r4
 8005ff4:	4628      	mov	r0, r5
 8005ff6:	f000 f97f 	bl	80062f8 <_sbrk_r>
 8005ffa:	1c43      	adds	r3, r0, #1
 8005ffc:	d00a      	beq.n	8006014 <sbrk_aligned+0x34>
 8005ffe:	1cc4      	adds	r4, r0, #3
 8006000:	f024 0403 	bic.w	r4, r4, #3
 8006004:	42a0      	cmp	r0, r4
 8006006:	d007      	beq.n	8006018 <sbrk_aligned+0x38>
 8006008:	1a21      	subs	r1, r4, r0
 800600a:	4628      	mov	r0, r5
 800600c:	f000 f974 	bl	80062f8 <_sbrk_r>
 8006010:	3001      	adds	r0, #1
 8006012:	d101      	bne.n	8006018 <sbrk_aligned+0x38>
 8006014:	f04f 34ff 	mov.w	r4, #4294967295
 8006018:	4620      	mov	r0, r4
 800601a:	bd70      	pop	{r4, r5, r6, pc}
 800601c:	20004ba8 	.word	0x20004ba8

08006020 <_malloc_r>:
 8006020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006024:	1ccd      	adds	r5, r1, #3
 8006026:	f025 0503 	bic.w	r5, r5, #3
 800602a:	3508      	adds	r5, #8
 800602c:	2d0c      	cmp	r5, #12
 800602e:	bf38      	it	cc
 8006030:	250c      	movcc	r5, #12
 8006032:	2d00      	cmp	r5, #0
 8006034:	4607      	mov	r7, r0
 8006036:	db01      	blt.n	800603c <_malloc_r+0x1c>
 8006038:	42a9      	cmp	r1, r5
 800603a:	d905      	bls.n	8006048 <_malloc_r+0x28>
 800603c:	230c      	movs	r3, #12
 800603e:	603b      	str	r3, [r7, #0]
 8006040:	2600      	movs	r6, #0
 8006042:	4630      	mov	r0, r6
 8006044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006048:	4e2e      	ldr	r6, [pc, #184]	; (8006104 <_malloc_r+0xe4>)
 800604a:	f000 fbc5 	bl	80067d8 <__malloc_lock>
 800604e:	6833      	ldr	r3, [r6, #0]
 8006050:	461c      	mov	r4, r3
 8006052:	bb34      	cbnz	r4, 80060a2 <_malloc_r+0x82>
 8006054:	4629      	mov	r1, r5
 8006056:	4638      	mov	r0, r7
 8006058:	f7ff ffc2 	bl	8005fe0 <sbrk_aligned>
 800605c:	1c43      	adds	r3, r0, #1
 800605e:	4604      	mov	r4, r0
 8006060:	d14d      	bne.n	80060fe <_malloc_r+0xde>
 8006062:	6834      	ldr	r4, [r6, #0]
 8006064:	4626      	mov	r6, r4
 8006066:	2e00      	cmp	r6, #0
 8006068:	d140      	bne.n	80060ec <_malloc_r+0xcc>
 800606a:	6823      	ldr	r3, [r4, #0]
 800606c:	4631      	mov	r1, r6
 800606e:	4638      	mov	r0, r7
 8006070:	eb04 0803 	add.w	r8, r4, r3
 8006074:	f000 f940 	bl	80062f8 <_sbrk_r>
 8006078:	4580      	cmp	r8, r0
 800607a:	d13a      	bne.n	80060f2 <_malloc_r+0xd2>
 800607c:	6821      	ldr	r1, [r4, #0]
 800607e:	3503      	adds	r5, #3
 8006080:	1a6d      	subs	r5, r5, r1
 8006082:	f025 0503 	bic.w	r5, r5, #3
 8006086:	3508      	adds	r5, #8
 8006088:	2d0c      	cmp	r5, #12
 800608a:	bf38      	it	cc
 800608c:	250c      	movcc	r5, #12
 800608e:	4629      	mov	r1, r5
 8006090:	4638      	mov	r0, r7
 8006092:	f7ff ffa5 	bl	8005fe0 <sbrk_aligned>
 8006096:	3001      	adds	r0, #1
 8006098:	d02b      	beq.n	80060f2 <_malloc_r+0xd2>
 800609a:	6823      	ldr	r3, [r4, #0]
 800609c:	442b      	add	r3, r5
 800609e:	6023      	str	r3, [r4, #0]
 80060a0:	e00e      	b.n	80060c0 <_malloc_r+0xa0>
 80060a2:	6822      	ldr	r2, [r4, #0]
 80060a4:	1b52      	subs	r2, r2, r5
 80060a6:	d41e      	bmi.n	80060e6 <_malloc_r+0xc6>
 80060a8:	2a0b      	cmp	r2, #11
 80060aa:	d916      	bls.n	80060da <_malloc_r+0xba>
 80060ac:	1961      	adds	r1, r4, r5
 80060ae:	42a3      	cmp	r3, r4
 80060b0:	6025      	str	r5, [r4, #0]
 80060b2:	bf18      	it	ne
 80060b4:	6059      	strne	r1, [r3, #4]
 80060b6:	6863      	ldr	r3, [r4, #4]
 80060b8:	bf08      	it	eq
 80060ba:	6031      	streq	r1, [r6, #0]
 80060bc:	5162      	str	r2, [r4, r5]
 80060be:	604b      	str	r3, [r1, #4]
 80060c0:	4638      	mov	r0, r7
 80060c2:	f104 060b 	add.w	r6, r4, #11
 80060c6:	f000 fb8d 	bl	80067e4 <__malloc_unlock>
 80060ca:	f026 0607 	bic.w	r6, r6, #7
 80060ce:	1d23      	adds	r3, r4, #4
 80060d0:	1af2      	subs	r2, r6, r3
 80060d2:	d0b6      	beq.n	8006042 <_malloc_r+0x22>
 80060d4:	1b9b      	subs	r3, r3, r6
 80060d6:	50a3      	str	r3, [r4, r2]
 80060d8:	e7b3      	b.n	8006042 <_malloc_r+0x22>
 80060da:	6862      	ldr	r2, [r4, #4]
 80060dc:	42a3      	cmp	r3, r4
 80060de:	bf0c      	ite	eq
 80060e0:	6032      	streq	r2, [r6, #0]
 80060e2:	605a      	strne	r2, [r3, #4]
 80060e4:	e7ec      	b.n	80060c0 <_malloc_r+0xa0>
 80060e6:	4623      	mov	r3, r4
 80060e8:	6864      	ldr	r4, [r4, #4]
 80060ea:	e7b2      	b.n	8006052 <_malloc_r+0x32>
 80060ec:	4634      	mov	r4, r6
 80060ee:	6876      	ldr	r6, [r6, #4]
 80060f0:	e7b9      	b.n	8006066 <_malloc_r+0x46>
 80060f2:	230c      	movs	r3, #12
 80060f4:	603b      	str	r3, [r7, #0]
 80060f6:	4638      	mov	r0, r7
 80060f8:	f000 fb74 	bl	80067e4 <__malloc_unlock>
 80060fc:	e7a1      	b.n	8006042 <_malloc_r+0x22>
 80060fe:	6025      	str	r5, [r4, #0]
 8006100:	e7de      	b.n	80060c0 <_malloc_r+0xa0>
 8006102:	bf00      	nop
 8006104:	20004ba4 	.word	0x20004ba4

08006108 <iprintf>:
 8006108:	b40f      	push	{r0, r1, r2, r3}
 800610a:	4b0a      	ldr	r3, [pc, #40]	; (8006134 <iprintf+0x2c>)
 800610c:	b513      	push	{r0, r1, r4, lr}
 800610e:	681c      	ldr	r4, [r3, #0]
 8006110:	b124      	cbz	r4, 800611c <iprintf+0x14>
 8006112:	69a3      	ldr	r3, [r4, #24]
 8006114:	b913      	cbnz	r3, 800611c <iprintf+0x14>
 8006116:	4620      	mov	r0, r4
 8006118:	f7ff fe86 	bl	8005e28 <__sinit>
 800611c:	ab05      	add	r3, sp, #20
 800611e:	9a04      	ldr	r2, [sp, #16]
 8006120:	68a1      	ldr	r1, [r4, #8]
 8006122:	9301      	str	r3, [sp, #4]
 8006124:	4620      	mov	r0, r4
 8006126:	f000 fbd9 	bl	80068dc <_vfiprintf_r>
 800612a:	b002      	add	sp, #8
 800612c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006130:	b004      	add	sp, #16
 8006132:	4770      	bx	lr
 8006134:	20000010 	.word	0x20000010

08006138 <_puts_r>:
 8006138:	b570      	push	{r4, r5, r6, lr}
 800613a:	460e      	mov	r6, r1
 800613c:	4605      	mov	r5, r0
 800613e:	b118      	cbz	r0, 8006148 <_puts_r+0x10>
 8006140:	6983      	ldr	r3, [r0, #24]
 8006142:	b90b      	cbnz	r3, 8006148 <_puts_r+0x10>
 8006144:	f7ff fe70 	bl	8005e28 <__sinit>
 8006148:	69ab      	ldr	r3, [r5, #24]
 800614a:	68ac      	ldr	r4, [r5, #8]
 800614c:	b913      	cbnz	r3, 8006154 <_puts_r+0x1c>
 800614e:	4628      	mov	r0, r5
 8006150:	f7ff fe6a 	bl	8005e28 <__sinit>
 8006154:	4b2c      	ldr	r3, [pc, #176]	; (8006208 <_puts_r+0xd0>)
 8006156:	429c      	cmp	r4, r3
 8006158:	d120      	bne.n	800619c <_puts_r+0x64>
 800615a:	686c      	ldr	r4, [r5, #4]
 800615c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800615e:	07db      	lsls	r3, r3, #31
 8006160:	d405      	bmi.n	800616e <_puts_r+0x36>
 8006162:	89a3      	ldrh	r3, [r4, #12]
 8006164:	0598      	lsls	r0, r3, #22
 8006166:	d402      	bmi.n	800616e <_puts_r+0x36>
 8006168:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800616a:	f7ff ff20 	bl	8005fae <__retarget_lock_acquire_recursive>
 800616e:	89a3      	ldrh	r3, [r4, #12]
 8006170:	0719      	lsls	r1, r3, #28
 8006172:	d51d      	bpl.n	80061b0 <_puts_r+0x78>
 8006174:	6923      	ldr	r3, [r4, #16]
 8006176:	b1db      	cbz	r3, 80061b0 <_puts_r+0x78>
 8006178:	3e01      	subs	r6, #1
 800617a:	68a3      	ldr	r3, [r4, #8]
 800617c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006180:	3b01      	subs	r3, #1
 8006182:	60a3      	str	r3, [r4, #8]
 8006184:	bb39      	cbnz	r1, 80061d6 <_puts_r+0x9e>
 8006186:	2b00      	cmp	r3, #0
 8006188:	da38      	bge.n	80061fc <_puts_r+0xc4>
 800618a:	4622      	mov	r2, r4
 800618c:	210a      	movs	r1, #10
 800618e:	4628      	mov	r0, r5
 8006190:	f000 f906 	bl	80063a0 <__swbuf_r>
 8006194:	3001      	adds	r0, #1
 8006196:	d011      	beq.n	80061bc <_puts_r+0x84>
 8006198:	250a      	movs	r5, #10
 800619a:	e011      	b.n	80061c0 <_puts_r+0x88>
 800619c:	4b1b      	ldr	r3, [pc, #108]	; (800620c <_puts_r+0xd4>)
 800619e:	429c      	cmp	r4, r3
 80061a0:	d101      	bne.n	80061a6 <_puts_r+0x6e>
 80061a2:	68ac      	ldr	r4, [r5, #8]
 80061a4:	e7da      	b.n	800615c <_puts_r+0x24>
 80061a6:	4b1a      	ldr	r3, [pc, #104]	; (8006210 <_puts_r+0xd8>)
 80061a8:	429c      	cmp	r4, r3
 80061aa:	bf08      	it	eq
 80061ac:	68ec      	ldreq	r4, [r5, #12]
 80061ae:	e7d5      	b.n	800615c <_puts_r+0x24>
 80061b0:	4621      	mov	r1, r4
 80061b2:	4628      	mov	r0, r5
 80061b4:	f000 f958 	bl	8006468 <__swsetup_r>
 80061b8:	2800      	cmp	r0, #0
 80061ba:	d0dd      	beq.n	8006178 <_puts_r+0x40>
 80061bc:	f04f 35ff 	mov.w	r5, #4294967295
 80061c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061c2:	07da      	lsls	r2, r3, #31
 80061c4:	d405      	bmi.n	80061d2 <_puts_r+0x9a>
 80061c6:	89a3      	ldrh	r3, [r4, #12]
 80061c8:	059b      	lsls	r3, r3, #22
 80061ca:	d402      	bmi.n	80061d2 <_puts_r+0x9a>
 80061cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061ce:	f7ff feef 	bl	8005fb0 <__retarget_lock_release_recursive>
 80061d2:	4628      	mov	r0, r5
 80061d4:	bd70      	pop	{r4, r5, r6, pc}
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	da04      	bge.n	80061e4 <_puts_r+0xac>
 80061da:	69a2      	ldr	r2, [r4, #24]
 80061dc:	429a      	cmp	r2, r3
 80061de:	dc06      	bgt.n	80061ee <_puts_r+0xb6>
 80061e0:	290a      	cmp	r1, #10
 80061e2:	d004      	beq.n	80061ee <_puts_r+0xb6>
 80061e4:	6823      	ldr	r3, [r4, #0]
 80061e6:	1c5a      	adds	r2, r3, #1
 80061e8:	6022      	str	r2, [r4, #0]
 80061ea:	7019      	strb	r1, [r3, #0]
 80061ec:	e7c5      	b.n	800617a <_puts_r+0x42>
 80061ee:	4622      	mov	r2, r4
 80061f0:	4628      	mov	r0, r5
 80061f2:	f000 f8d5 	bl	80063a0 <__swbuf_r>
 80061f6:	3001      	adds	r0, #1
 80061f8:	d1bf      	bne.n	800617a <_puts_r+0x42>
 80061fa:	e7df      	b.n	80061bc <_puts_r+0x84>
 80061fc:	6823      	ldr	r3, [r4, #0]
 80061fe:	250a      	movs	r5, #10
 8006200:	1c5a      	adds	r2, r3, #1
 8006202:	6022      	str	r2, [r4, #0]
 8006204:	701d      	strb	r5, [r3, #0]
 8006206:	e7db      	b.n	80061c0 <_puts_r+0x88>
 8006208:	08006fc4 	.word	0x08006fc4
 800620c:	08006fe4 	.word	0x08006fe4
 8006210:	08006fa4 	.word	0x08006fa4

08006214 <puts>:
 8006214:	4b02      	ldr	r3, [pc, #8]	; (8006220 <puts+0xc>)
 8006216:	4601      	mov	r1, r0
 8006218:	6818      	ldr	r0, [r3, #0]
 800621a:	f7ff bf8d 	b.w	8006138 <_puts_r>
 800621e:	bf00      	nop
 8006220:	20000010 	.word	0x20000010

08006224 <cleanup_glue>:
 8006224:	b538      	push	{r3, r4, r5, lr}
 8006226:	460c      	mov	r4, r1
 8006228:	6809      	ldr	r1, [r1, #0]
 800622a:	4605      	mov	r5, r0
 800622c:	b109      	cbz	r1, 8006232 <cleanup_glue+0xe>
 800622e:	f7ff fff9 	bl	8006224 <cleanup_glue>
 8006232:	4621      	mov	r1, r4
 8006234:	4628      	mov	r0, r5
 8006236:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800623a:	f000 bad9 	b.w	80067f0 <_free_r>
	...

08006240 <_reclaim_reent>:
 8006240:	4b2c      	ldr	r3, [pc, #176]	; (80062f4 <_reclaim_reent+0xb4>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4283      	cmp	r3, r0
 8006246:	b570      	push	{r4, r5, r6, lr}
 8006248:	4604      	mov	r4, r0
 800624a:	d051      	beq.n	80062f0 <_reclaim_reent+0xb0>
 800624c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800624e:	b143      	cbz	r3, 8006262 <_reclaim_reent+0x22>
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d14a      	bne.n	80062ec <_reclaim_reent+0xac>
 8006256:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006258:	6819      	ldr	r1, [r3, #0]
 800625a:	b111      	cbz	r1, 8006262 <_reclaim_reent+0x22>
 800625c:	4620      	mov	r0, r4
 800625e:	f000 fac7 	bl	80067f0 <_free_r>
 8006262:	6961      	ldr	r1, [r4, #20]
 8006264:	b111      	cbz	r1, 800626c <_reclaim_reent+0x2c>
 8006266:	4620      	mov	r0, r4
 8006268:	f000 fac2 	bl	80067f0 <_free_r>
 800626c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800626e:	b111      	cbz	r1, 8006276 <_reclaim_reent+0x36>
 8006270:	4620      	mov	r0, r4
 8006272:	f000 fabd 	bl	80067f0 <_free_r>
 8006276:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006278:	b111      	cbz	r1, 8006280 <_reclaim_reent+0x40>
 800627a:	4620      	mov	r0, r4
 800627c:	f000 fab8 	bl	80067f0 <_free_r>
 8006280:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006282:	b111      	cbz	r1, 800628a <_reclaim_reent+0x4a>
 8006284:	4620      	mov	r0, r4
 8006286:	f000 fab3 	bl	80067f0 <_free_r>
 800628a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800628c:	b111      	cbz	r1, 8006294 <_reclaim_reent+0x54>
 800628e:	4620      	mov	r0, r4
 8006290:	f000 faae 	bl	80067f0 <_free_r>
 8006294:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006296:	b111      	cbz	r1, 800629e <_reclaim_reent+0x5e>
 8006298:	4620      	mov	r0, r4
 800629a:	f000 faa9 	bl	80067f0 <_free_r>
 800629e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80062a0:	b111      	cbz	r1, 80062a8 <_reclaim_reent+0x68>
 80062a2:	4620      	mov	r0, r4
 80062a4:	f000 faa4 	bl	80067f0 <_free_r>
 80062a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80062aa:	b111      	cbz	r1, 80062b2 <_reclaim_reent+0x72>
 80062ac:	4620      	mov	r0, r4
 80062ae:	f000 fa9f 	bl	80067f0 <_free_r>
 80062b2:	69a3      	ldr	r3, [r4, #24]
 80062b4:	b1e3      	cbz	r3, 80062f0 <_reclaim_reent+0xb0>
 80062b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80062b8:	4620      	mov	r0, r4
 80062ba:	4798      	blx	r3
 80062bc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80062be:	b1b9      	cbz	r1, 80062f0 <_reclaim_reent+0xb0>
 80062c0:	4620      	mov	r0, r4
 80062c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80062c6:	f7ff bfad 	b.w	8006224 <cleanup_glue>
 80062ca:	5949      	ldr	r1, [r1, r5]
 80062cc:	b941      	cbnz	r1, 80062e0 <_reclaim_reent+0xa0>
 80062ce:	3504      	adds	r5, #4
 80062d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062d2:	2d80      	cmp	r5, #128	; 0x80
 80062d4:	68d9      	ldr	r1, [r3, #12]
 80062d6:	d1f8      	bne.n	80062ca <_reclaim_reent+0x8a>
 80062d8:	4620      	mov	r0, r4
 80062da:	f000 fa89 	bl	80067f0 <_free_r>
 80062de:	e7ba      	b.n	8006256 <_reclaim_reent+0x16>
 80062e0:	680e      	ldr	r6, [r1, #0]
 80062e2:	4620      	mov	r0, r4
 80062e4:	f000 fa84 	bl	80067f0 <_free_r>
 80062e8:	4631      	mov	r1, r6
 80062ea:	e7ef      	b.n	80062cc <_reclaim_reent+0x8c>
 80062ec:	2500      	movs	r5, #0
 80062ee:	e7ef      	b.n	80062d0 <_reclaim_reent+0x90>
 80062f0:	bd70      	pop	{r4, r5, r6, pc}
 80062f2:	bf00      	nop
 80062f4:	20000010 	.word	0x20000010

080062f8 <_sbrk_r>:
 80062f8:	b538      	push	{r3, r4, r5, lr}
 80062fa:	4d06      	ldr	r5, [pc, #24]	; (8006314 <_sbrk_r+0x1c>)
 80062fc:	2300      	movs	r3, #0
 80062fe:	4604      	mov	r4, r0
 8006300:	4608      	mov	r0, r1
 8006302:	602b      	str	r3, [r5, #0]
 8006304:	f7fa fc68 	bl	8000bd8 <_sbrk>
 8006308:	1c43      	adds	r3, r0, #1
 800630a:	d102      	bne.n	8006312 <_sbrk_r+0x1a>
 800630c:	682b      	ldr	r3, [r5, #0]
 800630e:	b103      	cbz	r3, 8006312 <_sbrk_r+0x1a>
 8006310:	6023      	str	r3, [r4, #0]
 8006312:	bd38      	pop	{r3, r4, r5, pc}
 8006314:	20004bac 	.word	0x20004bac

08006318 <__sread>:
 8006318:	b510      	push	{r4, lr}
 800631a:	460c      	mov	r4, r1
 800631c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006320:	f000 fda0 	bl	8006e64 <_read_r>
 8006324:	2800      	cmp	r0, #0
 8006326:	bfab      	itete	ge
 8006328:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800632a:	89a3      	ldrhlt	r3, [r4, #12]
 800632c:	181b      	addge	r3, r3, r0
 800632e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006332:	bfac      	ite	ge
 8006334:	6563      	strge	r3, [r4, #84]	; 0x54
 8006336:	81a3      	strhlt	r3, [r4, #12]
 8006338:	bd10      	pop	{r4, pc}

0800633a <__swrite>:
 800633a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800633e:	461f      	mov	r7, r3
 8006340:	898b      	ldrh	r3, [r1, #12]
 8006342:	05db      	lsls	r3, r3, #23
 8006344:	4605      	mov	r5, r0
 8006346:	460c      	mov	r4, r1
 8006348:	4616      	mov	r6, r2
 800634a:	d505      	bpl.n	8006358 <__swrite+0x1e>
 800634c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006350:	2302      	movs	r3, #2
 8006352:	2200      	movs	r2, #0
 8006354:	f000 f9c8 	bl	80066e8 <_lseek_r>
 8006358:	89a3      	ldrh	r3, [r4, #12]
 800635a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800635e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006362:	81a3      	strh	r3, [r4, #12]
 8006364:	4632      	mov	r2, r6
 8006366:	463b      	mov	r3, r7
 8006368:	4628      	mov	r0, r5
 800636a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800636e:	f000 b869 	b.w	8006444 <_write_r>

08006372 <__sseek>:
 8006372:	b510      	push	{r4, lr}
 8006374:	460c      	mov	r4, r1
 8006376:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800637a:	f000 f9b5 	bl	80066e8 <_lseek_r>
 800637e:	1c43      	adds	r3, r0, #1
 8006380:	89a3      	ldrh	r3, [r4, #12]
 8006382:	bf15      	itete	ne
 8006384:	6560      	strne	r0, [r4, #84]	; 0x54
 8006386:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800638a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800638e:	81a3      	strheq	r3, [r4, #12]
 8006390:	bf18      	it	ne
 8006392:	81a3      	strhne	r3, [r4, #12]
 8006394:	bd10      	pop	{r4, pc}

08006396 <__sclose>:
 8006396:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800639a:	f000 b8d3 	b.w	8006544 <_close_r>
	...

080063a0 <__swbuf_r>:
 80063a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063a2:	460e      	mov	r6, r1
 80063a4:	4614      	mov	r4, r2
 80063a6:	4605      	mov	r5, r0
 80063a8:	b118      	cbz	r0, 80063b2 <__swbuf_r+0x12>
 80063aa:	6983      	ldr	r3, [r0, #24]
 80063ac:	b90b      	cbnz	r3, 80063b2 <__swbuf_r+0x12>
 80063ae:	f7ff fd3b 	bl	8005e28 <__sinit>
 80063b2:	4b21      	ldr	r3, [pc, #132]	; (8006438 <__swbuf_r+0x98>)
 80063b4:	429c      	cmp	r4, r3
 80063b6:	d12b      	bne.n	8006410 <__swbuf_r+0x70>
 80063b8:	686c      	ldr	r4, [r5, #4]
 80063ba:	69a3      	ldr	r3, [r4, #24]
 80063bc:	60a3      	str	r3, [r4, #8]
 80063be:	89a3      	ldrh	r3, [r4, #12]
 80063c0:	071a      	lsls	r2, r3, #28
 80063c2:	d52f      	bpl.n	8006424 <__swbuf_r+0x84>
 80063c4:	6923      	ldr	r3, [r4, #16]
 80063c6:	b36b      	cbz	r3, 8006424 <__swbuf_r+0x84>
 80063c8:	6923      	ldr	r3, [r4, #16]
 80063ca:	6820      	ldr	r0, [r4, #0]
 80063cc:	1ac0      	subs	r0, r0, r3
 80063ce:	6963      	ldr	r3, [r4, #20]
 80063d0:	b2f6      	uxtb	r6, r6
 80063d2:	4283      	cmp	r3, r0
 80063d4:	4637      	mov	r7, r6
 80063d6:	dc04      	bgt.n	80063e2 <__swbuf_r+0x42>
 80063d8:	4621      	mov	r1, r4
 80063da:	4628      	mov	r0, r5
 80063dc:	f000 f948 	bl	8006670 <_fflush_r>
 80063e0:	bb30      	cbnz	r0, 8006430 <__swbuf_r+0x90>
 80063e2:	68a3      	ldr	r3, [r4, #8]
 80063e4:	3b01      	subs	r3, #1
 80063e6:	60a3      	str	r3, [r4, #8]
 80063e8:	6823      	ldr	r3, [r4, #0]
 80063ea:	1c5a      	adds	r2, r3, #1
 80063ec:	6022      	str	r2, [r4, #0]
 80063ee:	701e      	strb	r6, [r3, #0]
 80063f0:	6963      	ldr	r3, [r4, #20]
 80063f2:	3001      	adds	r0, #1
 80063f4:	4283      	cmp	r3, r0
 80063f6:	d004      	beq.n	8006402 <__swbuf_r+0x62>
 80063f8:	89a3      	ldrh	r3, [r4, #12]
 80063fa:	07db      	lsls	r3, r3, #31
 80063fc:	d506      	bpl.n	800640c <__swbuf_r+0x6c>
 80063fe:	2e0a      	cmp	r6, #10
 8006400:	d104      	bne.n	800640c <__swbuf_r+0x6c>
 8006402:	4621      	mov	r1, r4
 8006404:	4628      	mov	r0, r5
 8006406:	f000 f933 	bl	8006670 <_fflush_r>
 800640a:	b988      	cbnz	r0, 8006430 <__swbuf_r+0x90>
 800640c:	4638      	mov	r0, r7
 800640e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006410:	4b0a      	ldr	r3, [pc, #40]	; (800643c <__swbuf_r+0x9c>)
 8006412:	429c      	cmp	r4, r3
 8006414:	d101      	bne.n	800641a <__swbuf_r+0x7a>
 8006416:	68ac      	ldr	r4, [r5, #8]
 8006418:	e7cf      	b.n	80063ba <__swbuf_r+0x1a>
 800641a:	4b09      	ldr	r3, [pc, #36]	; (8006440 <__swbuf_r+0xa0>)
 800641c:	429c      	cmp	r4, r3
 800641e:	bf08      	it	eq
 8006420:	68ec      	ldreq	r4, [r5, #12]
 8006422:	e7ca      	b.n	80063ba <__swbuf_r+0x1a>
 8006424:	4621      	mov	r1, r4
 8006426:	4628      	mov	r0, r5
 8006428:	f000 f81e 	bl	8006468 <__swsetup_r>
 800642c:	2800      	cmp	r0, #0
 800642e:	d0cb      	beq.n	80063c8 <__swbuf_r+0x28>
 8006430:	f04f 37ff 	mov.w	r7, #4294967295
 8006434:	e7ea      	b.n	800640c <__swbuf_r+0x6c>
 8006436:	bf00      	nop
 8006438:	08006fc4 	.word	0x08006fc4
 800643c:	08006fe4 	.word	0x08006fe4
 8006440:	08006fa4 	.word	0x08006fa4

08006444 <_write_r>:
 8006444:	b538      	push	{r3, r4, r5, lr}
 8006446:	4d07      	ldr	r5, [pc, #28]	; (8006464 <_write_r+0x20>)
 8006448:	4604      	mov	r4, r0
 800644a:	4608      	mov	r0, r1
 800644c:	4611      	mov	r1, r2
 800644e:	2200      	movs	r2, #0
 8006450:	602a      	str	r2, [r5, #0]
 8006452:	461a      	mov	r2, r3
 8006454:	f7fa fc08 	bl	8000c68 <_write>
 8006458:	1c43      	adds	r3, r0, #1
 800645a:	d102      	bne.n	8006462 <_write_r+0x1e>
 800645c:	682b      	ldr	r3, [r5, #0]
 800645e:	b103      	cbz	r3, 8006462 <_write_r+0x1e>
 8006460:	6023      	str	r3, [r4, #0]
 8006462:	bd38      	pop	{r3, r4, r5, pc}
 8006464:	20004bac 	.word	0x20004bac

08006468 <__swsetup_r>:
 8006468:	4b32      	ldr	r3, [pc, #200]	; (8006534 <__swsetup_r+0xcc>)
 800646a:	b570      	push	{r4, r5, r6, lr}
 800646c:	681d      	ldr	r5, [r3, #0]
 800646e:	4606      	mov	r6, r0
 8006470:	460c      	mov	r4, r1
 8006472:	b125      	cbz	r5, 800647e <__swsetup_r+0x16>
 8006474:	69ab      	ldr	r3, [r5, #24]
 8006476:	b913      	cbnz	r3, 800647e <__swsetup_r+0x16>
 8006478:	4628      	mov	r0, r5
 800647a:	f7ff fcd5 	bl	8005e28 <__sinit>
 800647e:	4b2e      	ldr	r3, [pc, #184]	; (8006538 <__swsetup_r+0xd0>)
 8006480:	429c      	cmp	r4, r3
 8006482:	d10f      	bne.n	80064a4 <__swsetup_r+0x3c>
 8006484:	686c      	ldr	r4, [r5, #4]
 8006486:	89a3      	ldrh	r3, [r4, #12]
 8006488:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800648c:	0719      	lsls	r1, r3, #28
 800648e:	d42c      	bmi.n	80064ea <__swsetup_r+0x82>
 8006490:	06dd      	lsls	r5, r3, #27
 8006492:	d411      	bmi.n	80064b8 <__swsetup_r+0x50>
 8006494:	2309      	movs	r3, #9
 8006496:	6033      	str	r3, [r6, #0]
 8006498:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800649c:	81a3      	strh	r3, [r4, #12]
 800649e:	f04f 30ff 	mov.w	r0, #4294967295
 80064a2:	e03e      	b.n	8006522 <__swsetup_r+0xba>
 80064a4:	4b25      	ldr	r3, [pc, #148]	; (800653c <__swsetup_r+0xd4>)
 80064a6:	429c      	cmp	r4, r3
 80064a8:	d101      	bne.n	80064ae <__swsetup_r+0x46>
 80064aa:	68ac      	ldr	r4, [r5, #8]
 80064ac:	e7eb      	b.n	8006486 <__swsetup_r+0x1e>
 80064ae:	4b24      	ldr	r3, [pc, #144]	; (8006540 <__swsetup_r+0xd8>)
 80064b0:	429c      	cmp	r4, r3
 80064b2:	bf08      	it	eq
 80064b4:	68ec      	ldreq	r4, [r5, #12]
 80064b6:	e7e6      	b.n	8006486 <__swsetup_r+0x1e>
 80064b8:	0758      	lsls	r0, r3, #29
 80064ba:	d512      	bpl.n	80064e2 <__swsetup_r+0x7a>
 80064bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064be:	b141      	cbz	r1, 80064d2 <__swsetup_r+0x6a>
 80064c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064c4:	4299      	cmp	r1, r3
 80064c6:	d002      	beq.n	80064ce <__swsetup_r+0x66>
 80064c8:	4630      	mov	r0, r6
 80064ca:	f000 f991 	bl	80067f0 <_free_r>
 80064ce:	2300      	movs	r3, #0
 80064d0:	6363      	str	r3, [r4, #52]	; 0x34
 80064d2:	89a3      	ldrh	r3, [r4, #12]
 80064d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80064d8:	81a3      	strh	r3, [r4, #12]
 80064da:	2300      	movs	r3, #0
 80064dc:	6063      	str	r3, [r4, #4]
 80064de:	6923      	ldr	r3, [r4, #16]
 80064e0:	6023      	str	r3, [r4, #0]
 80064e2:	89a3      	ldrh	r3, [r4, #12]
 80064e4:	f043 0308 	orr.w	r3, r3, #8
 80064e8:	81a3      	strh	r3, [r4, #12]
 80064ea:	6923      	ldr	r3, [r4, #16]
 80064ec:	b94b      	cbnz	r3, 8006502 <__swsetup_r+0x9a>
 80064ee:	89a3      	ldrh	r3, [r4, #12]
 80064f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80064f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064f8:	d003      	beq.n	8006502 <__swsetup_r+0x9a>
 80064fa:	4621      	mov	r1, r4
 80064fc:	4630      	mov	r0, r6
 80064fe:	f000 f92b 	bl	8006758 <__smakebuf_r>
 8006502:	89a0      	ldrh	r0, [r4, #12]
 8006504:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006508:	f010 0301 	ands.w	r3, r0, #1
 800650c:	d00a      	beq.n	8006524 <__swsetup_r+0xbc>
 800650e:	2300      	movs	r3, #0
 8006510:	60a3      	str	r3, [r4, #8]
 8006512:	6963      	ldr	r3, [r4, #20]
 8006514:	425b      	negs	r3, r3
 8006516:	61a3      	str	r3, [r4, #24]
 8006518:	6923      	ldr	r3, [r4, #16]
 800651a:	b943      	cbnz	r3, 800652e <__swsetup_r+0xc6>
 800651c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006520:	d1ba      	bne.n	8006498 <__swsetup_r+0x30>
 8006522:	bd70      	pop	{r4, r5, r6, pc}
 8006524:	0781      	lsls	r1, r0, #30
 8006526:	bf58      	it	pl
 8006528:	6963      	ldrpl	r3, [r4, #20]
 800652a:	60a3      	str	r3, [r4, #8]
 800652c:	e7f4      	b.n	8006518 <__swsetup_r+0xb0>
 800652e:	2000      	movs	r0, #0
 8006530:	e7f7      	b.n	8006522 <__swsetup_r+0xba>
 8006532:	bf00      	nop
 8006534:	20000010 	.word	0x20000010
 8006538:	08006fc4 	.word	0x08006fc4
 800653c:	08006fe4 	.word	0x08006fe4
 8006540:	08006fa4 	.word	0x08006fa4

08006544 <_close_r>:
 8006544:	b538      	push	{r3, r4, r5, lr}
 8006546:	4d06      	ldr	r5, [pc, #24]	; (8006560 <_close_r+0x1c>)
 8006548:	2300      	movs	r3, #0
 800654a:	4604      	mov	r4, r0
 800654c:	4608      	mov	r0, r1
 800654e:	602b      	str	r3, [r5, #0]
 8006550:	f7fa fb0d 	bl	8000b6e <_close>
 8006554:	1c43      	adds	r3, r0, #1
 8006556:	d102      	bne.n	800655e <_close_r+0x1a>
 8006558:	682b      	ldr	r3, [r5, #0]
 800655a:	b103      	cbz	r3, 800655e <_close_r+0x1a>
 800655c:	6023      	str	r3, [r4, #0]
 800655e:	bd38      	pop	{r3, r4, r5, pc}
 8006560:	20004bac 	.word	0x20004bac

08006564 <__sflush_r>:
 8006564:	898a      	ldrh	r2, [r1, #12]
 8006566:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800656a:	4605      	mov	r5, r0
 800656c:	0710      	lsls	r0, r2, #28
 800656e:	460c      	mov	r4, r1
 8006570:	d458      	bmi.n	8006624 <__sflush_r+0xc0>
 8006572:	684b      	ldr	r3, [r1, #4]
 8006574:	2b00      	cmp	r3, #0
 8006576:	dc05      	bgt.n	8006584 <__sflush_r+0x20>
 8006578:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800657a:	2b00      	cmp	r3, #0
 800657c:	dc02      	bgt.n	8006584 <__sflush_r+0x20>
 800657e:	2000      	movs	r0, #0
 8006580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006584:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006586:	2e00      	cmp	r6, #0
 8006588:	d0f9      	beq.n	800657e <__sflush_r+0x1a>
 800658a:	2300      	movs	r3, #0
 800658c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006590:	682f      	ldr	r7, [r5, #0]
 8006592:	602b      	str	r3, [r5, #0]
 8006594:	d032      	beq.n	80065fc <__sflush_r+0x98>
 8006596:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006598:	89a3      	ldrh	r3, [r4, #12]
 800659a:	075a      	lsls	r2, r3, #29
 800659c:	d505      	bpl.n	80065aa <__sflush_r+0x46>
 800659e:	6863      	ldr	r3, [r4, #4]
 80065a0:	1ac0      	subs	r0, r0, r3
 80065a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80065a4:	b10b      	cbz	r3, 80065aa <__sflush_r+0x46>
 80065a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80065a8:	1ac0      	subs	r0, r0, r3
 80065aa:	2300      	movs	r3, #0
 80065ac:	4602      	mov	r2, r0
 80065ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80065b0:	6a21      	ldr	r1, [r4, #32]
 80065b2:	4628      	mov	r0, r5
 80065b4:	47b0      	blx	r6
 80065b6:	1c43      	adds	r3, r0, #1
 80065b8:	89a3      	ldrh	r3, [r4, #12]
 80065ba:	d106      	bne.n	80065ca <__sflush_r+0x66>
 80065bc:	6829      	ldr	r1, [r5, #0]
 80065be:	291d      	cmp	r1, #29
 80065c0:	d82c      	bhi.n	800661c <__sflush_r+0xb8>
 80065c2:	4a2a      	ldr	r2, [pc, #168]	; (800666c <__sflush_r+0x108>)
 80065c4:	40ca      	lsrs	r2, r1
 80065c6:	07d6      	lsls	r6, r2, #31
 80065c8:	d528      	bpl.n	800661c <__sflush_r+0xb8>
 80065ca:	2200      	movs	r2, #0
 80065cc:	6062      	str	r2, [r4, #4]
 80065ce:	04d9      	lsls	r1, r3, #19
 80065d0:	6922      	ldr	r2, [r4, #16]
 80065d2:	6022      	str	r2, [r4, #0]
 80065d4:	d504      	bpl.n	80065e0 <__sflush_r+0x7c>
 80065d6:	1c42      	adds	r2, r0, #1
 80065d8:	d101      	bne.n	80065de <__sflush_r+0x7a>
 80065da:	682b      	ldr	r3, [r5, #0]
 80065dc:	b903      	cbnz	r3, 80065e0 <__sflush_r+0x7c>
 80065de:	6560      	str	r0, [r4, #84]	; 0x54
 80065e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80065e2:	602f      	str	r7, [r5, #0]
 80065e4:	2900      	cmp	r1, #0
 80065e6:	d0ca      	beq.n	800657e <__sflush_r+0x1a>
 80065e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80065ec:	4299      	cmp	r1, r3
 80065ee:	d002      	beq.n	80065f6 <__sflush_r+0x92>
 80065f0:	4628      	mov	r0, r5
 80065f2:	f000 f8fd 	bl	80067f0 <_free_r>
 80065f6:	2000      	movs	r0, #0
 80065f8:	6360      	str	r0, [r4, #52]	; 0x34
 80065fa:	e7c1      	b.n	8006580 <__sflush_r+0x1c>
 80065fc:	6a21      	ldr	r1, [r4, #32]
 80065fe:	2301      	movs	r3, #1
 8006600:	4628      	mov	r0, r5
 8006602:	47b0      	blx	r6
 8006604:	1c41      	adds	r1, r0, #1
 8006606:	d1c7      	bne.n	8006598 <__sflush_r+0x34>
 8006608:	682b      	ldr	r3, [r5, #0]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d0c4      	beq.n	8006598 <__sflush_r+0x34>
 800660e:	2b1d      	cmp	r3, #29
 8006610:	d001      	beq.n	8006616 <__sflush_r+0xb2>
 8006612:	2b16      	cmp	r3, #22
 8006614:	d101      	bne.n	800661a <__sflush_r+0xb6>
 8006616:	602f      	str	r7, [r5, #0]
 8006618:	e7b1      	b.n	800657e <__sflush_r+0x1a>
 800661a:	89a3      	ldrh	r3, [r4, #12]
 800661c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006620:	81a3      	strh	r3, [r4, #12]
 8006622:	e7ad      	b.n	8006580 <__sflush_r+0x1c>
 8006624:	690f      	ldr	r7, [r1, #16]
 8006626:	2f00      	cmp	r7, #0
 8006628:	d0a9      	beq.n	800657e <__sflush_r+0x1a>
 800662a:	0793      	lsls	r3, r2, #30
 800662c:	680e      	ldr	r6, [r1, #0]
 800662e:	bf08      	it	eq
 8006630:	694b      	ldreq	r3, [r1, #20]
 8006632:	600f      	str	r7, [r1, #0]
 8006634:	bf18      	it	ne
 8006636:	2300      	movne	r3, #0
 8006638:	eba6 0807 	sub.w	r8, r6, r7
 800663c:	608b      	str	r3, [r1, #8]
 800663e:	f1b8 0f00 	cmp.w	r8, #0
 8006642:	dd9c      	ble.n	800657e <__sflush_r+0x1a>
 8006644:	6a21      	ldr	r1, [r4, #32]
 8006646:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006648:	4643      	mov	r3, r8
 800664a:	463a      	mov	r2, r7
 800664c:	4628      	mov	r0, r5
 800664e:	47b0      	blx	r6
 8006650:	2800      	cmp	r0, #0
 8006652:	dc06      	bgt.n	8006662 <__sflush_r+0xfe>
 8006654:	89a3      	ldrh	r3, [r4, #12]
 8006656:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800665a:	81a3      	strh	r3, [r4, #12]
 800665c:	f04f 30ff 	mov.w	r0, #4294967295
 8006660:	e78e      	b.n	8006580 <__sflush_r+0x1c>
 8006662:	4407      	add	r7, r0
 8006664:	eba8 0800 	sub.w	r8, r8, r0
 8006668:	e7e9      	b.n	800663e <__sflush_r+0xda>
 800666a:	bf00      	nop
 800666c:	20400001 	.word	0x20400001

08006670 <_fflush_r>:
 8006670:	b538      	push	{r3, r4, r5, lr}
 8006672:	690b      	ldr	r3, [r1, #16]
 8006674:	4605      	mov	r5, r0
 8006676:	460c      	mov	r4, r1
 8006678:	b913      	cbnz	r3, 8006680 <_fflush_r+0x10>
 800667a:	2500      	movs	r5, #0
 800667c:	4628      	mov	r0, r5
 800667e:	bd38      	pop	{r3, r4, r5, pc}
 8006680:	b118      	cbz	r0, 800668a <_fflush_r+0x1a>
 8006682:	6983      	ldr	r3, [r0, #24]
 8006684:	b90b      	cbnz	r3, 800668a <_fflush_r+0x1a>
 8006686:	f7ff fbcf 	bl	8005e28 <__sinit>
 800668a:	4b14      	ldr	r3, [pc, #80]	; (80066dc <_fflush_r+0x6c>)
 800668c:	429c      	cmp	r4, r3
 800668e:	d11b      	bne.n	80066c8 <_fflush_r+0x58>
 8006690:	686c      	ldr	r4, [r5, #4]
 8006692:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d0ef      	beq.n	800667a <_fflush_r+0xa>
 800669a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800669c:	07d0      	lsls	r0, r2, #31
 800669e:	d404      	bmi.n	80066aa <_fflush_r+0x3a>
 80066a0:	0599      	lsls	r1, r3, #22
 80066a2:	d402      	bmi.n	80066aa <_fflush_r+0x3a>
 80066a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066a6:	f7ff fc82 	bl	8005fae <__retarget_lock_acquire_recursive>
 80066aa:	4628      	mov	r0, r5
 80066ac:	4621      	mov	r1, r4
 80066ae:	f7ff ff59 	bl	8006564 <__sflush_r>
 80066b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80066b4:	07da      	lsls	r2, r3, #31
 80066b6:	4605      	mov	r5, r0
 80066b8:	d4e0      	bmi.n	800667c <_fflush_r+0xc>
 80066ba:	89a3      	ldrh	r3, [r4, #12]
 80066bc:	059b      	lsls	r3, r3, #22
 80066be:	d4dd      	bmi.n	800667c <_fflush_r+0xc>
 80066c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066c2:	f7ff fc75 	bl	8005fb0 <__retarget_lock_release_recursive>
 80066c6:	e7d9      	b.n	800667c <_fflush_r+0xc>
 80066c8:	4b05      	ldr	r3, [pc, #20]	; (80066e0 <_fflush_r+0x70>)
 80066ca:	429c      	cmp	r4, r3
 80066cc:	d101      	bne.n	80066d2 <_fflush_r+0x62>
 80066ce:	68ac      	ldr	r4, [r5, #8]
 80066d0:	e7df      	b.n	8006692 <_fflush_r+0x22>
 80066d2:	4b04      	ldr	r3, [pc, #16]	; (80066e4 <_fflush_r+0x74>)
 80066d4:	429c      	cmp	r4, r3
 80066d6:	bf08      	it	eq
 80066d8:	68ec      	ldreq	r4, [r5, #12]
 80066da:	e7da      	b.n	8006692 <_fflush_r+0x22>
 80066dc:	08006fc4 	.word	0x08006fc4
 80066e0:	08006fe4 	.word	0x08006fe4
 80066e4:	08006fa4 	.word	0x08006fa4

080066e8 <_lseek_r>:
 80066e8:	b538      	push	{r3, r4, r5, lr}
 80066ea:	4d07      	ldr	r5, [pc, #28]	; (8006708 <_lseek_r+0x20>)
 80066ec:	4604      	mov	r4, r0
 80066ee:	4608      	mov	r0, r1
 80066f0:	4611      	mov	r1, r2
 80066f2:	2200      	movs	r2, #0
 80066f4:	602a      	str	r2, [r5, #0]
 80066f6:	461a      	mov	r2, r3
 80066f8:	f7fa fa60 	bl	8000bbc <_lseek>
 80066fc:	1c43      	adds	r3, r0, #1
 80066fe:	d102      	bne.n	8006706 <_lseek_r+0x1e>
 8006700:	682b      	ldr	r3, [r5, #0]
 8006702:	b103      	cbz	r3, 8006706 <_lseek_r+0x1e>
 8006704:	6023      	str	r3, [r4, #0]
 8006706:	bd38      	pop	{r3, r4, r5, pc}
 8006708:	20004bac 	.word	0x20004bac

0800670c <__swhatbuf_r>:
 800670c:	b570      	push	{r4, r5, r6, lr}
 800670e:	460e      	mov	r6, r1
 8006710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006714:	2900      	cmp	r1, #0
 8006716:	b096      	sub	sp, #88	; 0x58
 8006718:	4614      	mov	r4, r2
 800671a:	461d      	mov	r5, r3
 800671c:	da08      	bge.n	8006730 <__swhatbuf_r+0x24>
 800671e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006722:	2200      	movs	r2, #0
 8006724:	602a      	str	r2, [r5, #0]
 8006726:	061a      	lsls	r2, r3, #24
 8006728:	d410      	bmi.n	800674c <__swhatbuf_r+0x40>
 800672a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800672e:	e00e      	b.n	800674e <__swhatbuf_r+0x42>
 8006730:	466a      	mov	r2, sp
 8006732:	f000 fba9 	bl	8006e88 <_fstat_r>
 8006736:	2800      	cmp	r0, #0
 8006738:	dbf1      	blt.n	800671e <__swhatbuf_r+0x12>
 800673a:	9a01      	ldr	r2, [sp, #4]
 800673c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006740:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006744:	425a      	negs	r2, r3
 8006746:	415a      	adcs	r2, r3
 8006748:	602a      	str	r2, [r5, #0]
 800674a:	e7ee      	b.n	800672a <__swhatbuf_r+0x1e>
 800674c:	2340      	movs	r3, #64	; 0x40
 800674e:	2000      	movs	r0, #0
 8006750:	6023      	str	r3, [r4, #0]
 8006752:	b016      	add	sp, #88	; 0x58
 8006754:	bd70      	pop	{r4, r5, r6, pc}
	...

08006758 <__smakebuf_r>:
 8006758:	898b      	ldrh	r3, [r1, #12]
 800675a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800675c:	079d      	lsls	r5, r3, #30
 800675e:	4606      	mov	r6, r0
 8006760:	460c      	mov	r4, r1
 8006762:	d507      	bpl.n	8006774 <__smakebuf_r+0x1c>
 8006764:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006768:	6023      	str	r3, [r4, #0]
 800676a:	6123      	str	r3, [r4, #16]
 800676c:	2301      	movs	r3, #1
 800676e:	6163      	str	r3, [r4, #20]
 8006770:	b002      	add	sp, #8
 8006772:	bd70      	pop	{r4, r5, r6, pc}
 8006774:	ab01      	add	r3, sp, #4
 8006776:	466a      	mov	r2, sp
 8006778:	f7ff ffc8 	bl	800670c <__swhatbuf_r>
 800677c:	9900      	ldr	r1, [sp, #0]
 800677e:	4605      	mov	r5, r0
 8006780:	4630      	mov	r0, r6
 8006782:	f7ff fc4d 	bl	8006020 <_malloc_r>
 8006786:	b948      	cbnz	r0, 800679c <__smakebuf_r+0x44>
 8006788:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800678c:	059a      	lsls	r2, r3, #22
 800678e:	d4ef      	bmi.n	8006770 <__smakebuf_r+0x18>
 8006790:	f023 0303 	bic.w	r3, r3, #3
 8006794:	f043 0302 	orr.w	r3, r3, #2
 8006798:	81a3      	strh	r3, [r4, #12]
 800679a:	e7e3      	b.n	8006764 <__smakebuf_r+0xc>
 800679c:	4b0d      	ldr	r3, [pc, #52]	; (80067d4 <__smakebuf_r+0x7c>)
 800679e:	62b3      	str	r3, [r6, #40]	; 0x28
 80067a0:	89a3      	ldrh	r3, [r4, #12]
 80067a2:	6020      	str	r0, [r4, #0]
 80067a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067a8:	81a3      	strh	r3, [r4, #12]
 80067aa:	9b00      	ldr	r3, [sp, #0]
 80067ac:	6163      	str	r3, [r4, #20]
 80067ae:	9b01      	ldr	r3, [sp, #4]
 80067b0:	6120      	str	r0, [r4, #16]
 80067b2:	b15b      	cbz	r3, 80067cc <__smakebuf_r+0x74>
 80067b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067b8:	4630      	mov	r0, r6
 80067ba:	f000 fb77 	bl	8006eac <_isatty_r>
 80067be:	b128      	cbz	r0, 80067cc <__smakebuf_r+0x74>
 80067c0:	89a3      	ldrh	r3, [r4, #12]
 80067c2:	f023 0303 	bic.w	r3, r3, #3
 80067c6:	f043 0301 	orr.w	r3, r3, #1
 80067ca:	81a3      	strh	r3, [r4, #12]
 80067cc:	89a0      	ldrh	r0, [r4, #12]
 80067ce:	4305      	orrs	r5, r0
 80067d0:	81a5      	strh	r5, [r4, #12]
 80067d2:	e7cd      	b.n	8006770 <__smakebuf_r+0x18>
 80067d4:	08005dc1 	.word	0x08005dc1

080067d8 <__malloc_lock>:
 80067d8:	4801      	ldr	r0, [pc, #4]	; (80067e0 <__malloc_lock+0x8>)
 80067da:	f7ff bbe8 	b.w	8005fae <__retarget_lock_acquire_recursive>
 80067de:	bf00      	nop
 80067e0:	20004ba0 	.word	0x20004ba0

080067e4 <__malloc_unlock>:
 80067e4:	4801      	ldr	r0, [pc, #4]	; (80067ec <__malloc_unlock+0x8>)
 80067e6:	f7ff bbe3 	b.w	8005fb0 <__retarget_lock_release_recursive>
 80067ea:	bf00      	nop
 80067ec:	20004ba0 	.word	0x20004ba0

080067f0 <_free_r>:
 80067f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80067f2:	2900      	cmp	r1, #0
 80067f4:	d044      	beq.n	8006880 <_free_r+0x90>
 80067f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067fa:	9001      	str	r0, [sp, #4]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f1a1 0404 	sub.w	r4, r1, #4
 8006802:	bfb8      	it	lt
 8006804:	18e4      	addlt	r4, r4, r3
 8006806:	f7ff ffe7 	bl	80067d8 <__malloc_lock>
 800680a:	4a1e      	ldr	r2, [pc, #120]	; (8006884 <_free_r+0x94>)
 800680c:	9801      	ldr	r0, [sp, #4]
 800680e:	6813      	ldr	r3, [r2, #0]
 8006810:	b933      	cbnz	r3, 8006820 <_free_r+0x30>
 8006812:	6063      	str	r3, [r4, #4]
 8006814:	6014      	str	r4, [r2, #0]
 8006816:	b003      	add	sp, #12
 8006818:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800681c:	f7ff bfe2 	b.w	80067e4 <__malloc_unlock>
 8006820:	42a3      	cmp	r3, r4
 8006822:	d908      	bls.n	8006836 <_free_r+0x46>
 8006824:	6825      	ldr	r5, [r4, #0]
 8006826:	1961      	adds	r1, r4, r5
 8006828:	428b      	cmp	r3, r1
 800682a:	bf01      	itttt	eq
 800682c:	6819      	ldreq	r1, [r3, #0]
 800682e:	685b      	ldreq	r3, [r3, #4]
 8006830:	1949      	addeq	r1, r1, r5
 8006832:	6021      	streq	r1, [r4, #0]
 8006834:	e7ed      	b.n	8006812 <_free_r+0x22>
 8006836:	461a      	mov	r2, r3
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	b10b      	cbz	r3, 8006840 <_free_r+0x50>
 800683c:	42a3      	cmp	r3, r4
 800683e:	d9fa      	bls.n	8006836 <_free_r+0x46>
 8006840:	6811      	ldr	r1, [r2, #0]
 8006842:	1855      	adds	r5, r2, r1
 8006844:	42a5      	cmp	r5, r4
 8006846:	d10b      	bne.n	8006860 <_free_r+0x70>
 8006848:	6824      	ldr	r4, [r4, #0]
 800684a:	4421      	add	r1, r4
 800684c:	1854      	adds	r4, r2, r1
 800684e:	42a3      	cmp	r3, r4
 8006850:	6011      	str	r1, [r2, #0]
 8006852:	d1e0      	bne.n	8006816 <_free_r+0x26>
 8006854:	681c      	ldr	r4, [r3, #0]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	6053      	str	r3, [r2, #4]
 800685a:	4421      	add	r1, r4
 800685c:	6011      	str	r1, [r2, #0]
 800685e:	e7da      	b.n	8006816 <_free_r+0x26>
 8006860:	d902      	bls.n	8006868 <_free_r+0x78>
 8006862:	230c      	movs	r3, #12
 8006864:	6003      	str	r3, [r0, #0]
 8006866:	e7d6      	b.n	8006816 <_free_r+0x26>
 8006868:	6825      	ldr	r5, [r4, #0]
 800686a:	1961      	adds	r1, r4, r5
 800686c:	428b      	cmp	r3, r1
 800686e:	bf04      	itt	eq
 8006870:	6819      	ldreq	r1, [r3, #0]
 8006872:	685b      	ldreq	r3, [r3, #4]
 8006874:	6063      	str	r3, [r4, #4]
 8006876:	bf04      	itt	eq
 8006878:	1949      	addeq	r1, r1, r5
 800687a:	6021      	streq	r1, [r4, #0]
 800687c:	6054      	str	r4, [r2, #4]
 800687e:	e7ca      	b.n	8006816 <_free_r+0x26>
 8006880:	b003      	add	sp, #12
 8006882:	bd30      	pop	{r4, r5, pc}
 8006884:	20004ba4 	.word	0x20004ba4

08006888 <__sfputc_r>:
 8006888:	6893      	ldr	r3, [r2, #8]
 800688a:	3b01      	subs	r3, #1
 800688c:	2b00      	cmp	r3, #0
 800688e:	b410      	push	{r4}
 8006890:	6093      	str	r3, [r2, #8]
 8006892:	da08      	bge.n	80068a6 <__sfputc_r+0x1e>
 8006894:	6994      	ldr	r4, [r2, #24]
 8006896:	42a3      	cmp	r3, r4
 8006898:	db01      	blt.n	800689e <__sfputc_r+0x16>
 800689a:	290a      	cmp	r1, #10
 800689c:	d103      	bne.n	80068a6 <__sfputc_r+0x1e>
 800689e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80068a2:	f7ff bd7d 	b.w	80063a0 <__swbuf_r>
 80068a6:	6813      	ldr	r3, [r2, #0]
 80068a8:	1c58      	adds	r0, r3, #1
 80068aa:	6010      	str	r0, [r2, #0]
 80068ac:	7019      	strb	r1, [r3, #0]
 80068ae:	4608      	mov	r0, r1
 80068b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80068b4:	4770      	bx	lr

080068b6 <__sfputs_r>:
 80068b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068b8:	4606      	mov	r6, r0
 80068ba:	460f      	mov	r7, r1
 80068bc:	4614      	mov	r4, r2
 80068be:	18d5      	adds	r5, r2, r3
 80068c0:	42ac      	cmp	r4, r5
 80068c2:	d101      	bne.n	80068c8 <__sfputs_r+0x12>
 80068c4:	2000      	movs	r0, #0
 80068c6:	e007      	b.n	80068d8 <__sfputs_r+0x22>
 80068c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068cc:	463a      	mov	r2, r7
 80068ce:	4630      	mov	r0, r6
 80068d0:	f7ff ffda 	bl	8006888 <__sfputc_r>
 80068d4:	1c43      	adds	r3, r0, #1
 80068d6:	d1f3      	bne.n	80068c0 <__sfputs_r+0xa>
 80068d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080068dc <_vfiprintf_r>:
 80068dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068e0:	460d      	mov	r5, r1
 80068e2:	b09d      	sub	sp, #116	; 0x74
 80068e4:	4614      	mov	r4, r2
 80068e6:	4698      	mov	r8, r3
 80068e8:	4606      	mov	r6, r0
 80068ea:	b118      	cbz	r0, 80068f4 <_vfiprintf_r+0x18>
 80068ec:	6983      	ldr	r3, [r0, #24]
 80068ee:	b90b      	cbnz	r3, 80068f4 <_vfiprintf_r+0x18>
 80068f0:	f7ff fa9a 	bl	8005e28 <__sinit>
 80068f4:	4b89      	ldr	r3, [pc, #548]	; (8006b1c <_vfiprintf_r+0x240>)
 80068f6:	429d      	cmp	r5, r3
 80068f8:	d11b      	bne.n	8006932 <_vfiprintf_r+0x56>
 80068fa:	6875      	ldr	r5, [r6, #4]
 80068fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068fe:	07d9      	lsls	r1, r3, #31
 8006900:	d405      	bmi.n	800690e <_vfiprintf_r+0x32>
 8006902:	89ab      	ldrh	r3, [r5, #12]
 8006904:	059a      	lsls	r2, r3, #22
 8006906:	d402      	bmi.n	800690e <_vfiprintf_r+0x32>
 8006908:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800690a:	f7ff fb50 	bl	8005fae <__retarget_lock_acquire_recursive>
 800690e:	89ab      	ldrh	r3, [r5, #12]
 8006910:	071b      	lsls	r3, r3, #28
 8006912:	d501      	bpl.n	8006918 <_vfiprintf_r+0x3c>
 8006914:	692b      	ldr	r3, [r5, #16]
 8006916:	b9eb      	cbnz	r3, 8006954 <_vfiprintf_r+0x78>
 8006918:	4629      	mov	r1, r5
 800691a:	4630      	mov	r0, r6
 800691c:	f7ff fda4 	bl	8006468 <__swsetup_r>
 8006920:	b1c0      	cbz	r0, 8006954 <_vfiprintf_r+0x78>
 8006922:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006924:	07dc      	lsls	r4, r3, #31
 8006926:	d50e      	bpl.n	8006946 <_vfiprintf_r+0x6a>
 8006928:	f04f 30ff 	mov.w	r0, #4294967295
 800692c:	b01d      	add	sp, #116	; 0x74
 800692e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006932:	4b7b      	ldr	r3, [pc, #492]	; (8006b20 <_vfiprintf_r+0x244>)
 8006934:	429d      	cmp	r5, r3
 8006936:	d101      	bne.n	800693c <_vfiprintf_r+0x60>
 8006938:	68b5      	ldr	r5, [r6, #8]
 800693a:	e7df      	b.n	80068fc <_vfiprintf_r+0x20>
 800693c:	4b79      	ldr	r3, [pc, #484]	; (8006b24 <_vfiprintf_r+0x248>)
 800693e:	429d      	cmp	r5, r3
 8006940:	bf08      	it	eq
 8006942:	68f5      	ldreq	r5, [r6, #12]
 8006944:	e7da      	b.n	80068fc <_vfiprintf_r+0x20>
 8006946:	89ab      	ldrh	r3, [r5, #12]
 8006948:	0598      	lsls	r0, r3, #22
 800694a:	d4ed      	bmi.n	8006928 <_vfiprintf_r+0x4c>
 800694c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800694e:	f7ff fb2f 	bl	8005fb0 <__retarget_lock_release_recursive>
 8006952:	e7e9      	b.n	8006928 <_vfiprintf_r+0x4c>
 8006954:	2300      	movs	r3, #0
 8006956:	9309      	str	r3, [sp, #36]	; 0x24
 8006958:	2320      	movs	r3, #32
 800695a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800695e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006962:	2330      	movs	r3, #48	; 0x30
 8006964:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006b28 <_vfiprintf_r+0x24c>
 8006968:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800696c:	f04f 0901 	mov.w	r9, #1
 8006970:	4623      	mov	r3, r4
 8006972:	469a      	mov	sl, r3
 8006974:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006978:	b10a      	cbz	r2, 800697e <_vfiprintf_r+0xa2>
 800697a:	2a25      	cmp	r2, #37	; 0x25
 800697c:	d1f9      	bne.n	8006972 <_vfiprintf_r+0x96>
 800697e:	ebba 0b04 	subs.w	fp, sl, r4
 8006982:	d00b      	beq.n	800699c <_vfiprintf_r+0xc0>
 8006984:	465b      	mov	r3, fp
 8006986:	4622      	mov	r2, r4
 8006988:	4629      	mov	r1, r5
 800698a:	4630      	mov	r0, r6
 800698c:	f7ff ff93 	bl	80068b6 <__sfputs_r>
 8006990:	3001      	adds	r0, #1
 8006992:	f000 80aa 	beq.w	8006aea <_vfiprintf_r+0x20e>
 8006996:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006998:	445a      	add	r2, fp
 800699a:	9209      	str	r2, [sp, #36]	; 0x24
 800699c:	f89a 3000 	ldrb.w	r3, [sl]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	f000 80a2 	beq.w	8006aea <_vfiprintf_r+0x20e>
 80069a6:	2300      	movs	r3, #0
 80069a8:	f04f 32ff 	mov.w	r2, #4294967295
 80069ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069b0:	f10a 0a01 	add.w	sl, sl, #1
 80069b4:	9304      	str	r3, [sp, #16]
 80069b6:	9307      	str	r3, [sp, #28]
 80069b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80069bc:	931a      	str	r3, [sp, #104]	; 0x68
 80069be:	4654      	mov	r4, sl
 80069c0:	2205      	movs	r2, #5
 80069c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069c6:	4858      	ldr	r0, [pc, #352]	; (8006b28 <_vfiprintf_r+0x24c>)
 80069c8:	f7f9 fc0a 	bl	80001e0 <memchr>
 80069cc:	9a04      	ldr	r2, [sp, #16]
 80069ce:	b9d8      	cbnz	r0, 8006a08 <_vfiprintf_r+0x12c>
 80069d0:	06d1      	lsls	r1, r2, #27
 80069d2:	bf44      	itt	mi
 80069d4:	2320      	movmi	r3, #32
 80069d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069da:	0713      	lsls	r3, r2, #28
 80069dc:	bf44      	itt	mi
 80069de:	232b      	movmi	r3, #43	; 0x2b
 80069e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069e4:	f89a 3000 	ldrb.w	r3, [sl]
 80069e8:	2b2a      	cmp	r3, #42	; 0x2a
 80069ea:	d015      	beq.n	8006a18 <_vfiprintf_r+0x13c>
 80069ec:	9a07      	ldr	r2, [sp, #28]
 80069ee:	4654      	mov	r4, sl
 80069f0:	2000      	movs	r0, #0
 80069f2:	f04f 0c0a 	mov.w	ip, #10
 80069f6:	4621      	mov	r1, r4
 80069f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069fc:	3b30      	subs	r3, #48	; 0x30
 80069fe:	2b09      	cmp	r3, #9
 8006a00:	d94e      	bls.n	8006aa0 <_vfiprintf_r+0x1c4>
 8006a02:	b1b0      	cbz	r0, 8006a32 <_vfiprintf_r+0x156>
 8006a04:	9207      	str	r2, [sp, #28]
 8006a06:	e014      	b.n	8006a32 <_vfiprintf_r+0x156>
 8006a08:	eba0 0308 	sub.w	r3, r0, r8
 8006a0c:	fa09 f303 	lsl.w	r3, r9, r3
 8006a10:	4313      	orrs	r3, r2
 8006a12:	9304      	str	r3, [sp, #16]
 8006a14:	46a2      	mov	sl, r4
 8006a16:	e7d2      	b.n	80069be <_vfiprintf_r+0xe2>
 8006a18:	9b03      	ldr	r3, [sp, #12]
 8006a1a:	1d19      	adds	r1, r3, #4
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	9103      	str	r1, [sp, #12]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	bfbb      	ittet	lt
 8006a24:	425b      	neglt	r3, r3
 8006a26:	f042 0202 	orrlt.w	r2, r2, #2
 8006a2a:	9307      	strge	r3, [sp, #28]
 8006a2c:	9307      	strlt	r3, [sp, #28]
 8006a2e:	bfb8      	it	lt
 8006a30:	9204      	strlt	r2, [sp, #16]
 8006a32:	7823      	ldrb	r3, [r4, #0]
 8006a34:	2b2e      	cmp	r3, #46	; 0x2e
 8006a36:	d10c      	bne.n	8006a52 <_vfiprintf_r+0x176>
 8006a38:	7863      	ldrb	r3, [r4, #1]
 8006a3a:	2b2a      	cmp	r3, #42	; 0x2a
 8006a3c:	d135      	bne.n	8006aaa <_vfiprintf_r+0x1ce>
 8006a3e:	9b03      	ldr	r3, [sp, #12]
 8006a40:	1d1a      	adds	r2, r3, #4
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	9203      	str	r2, [sp, #12]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	bfb8      	it	lt
 8006a4a:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a4e:	3402      	adds	r4, #2
 8006a50:	9305      	str	r3, [sp, #20]
 8006a52:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006b38 <_vfiprintf_r+0x25c>
 8006a56:	7821      	ldrb	r1, [r4, #0]
 8006a58:	2203      	movs	r2, #3
 8006a5a:	4650      	mov	r0, sl
 8006a5c:	f7f9 fbc0 	bl	80001e0 <memchr>
 8006a60:	b140      	cbz	r0, 8006a74 <_vfiprintf_r+0x198>
 8006a62:	2340      	movs	r3, #64	; 0x40
 8006a64:	eba0 000a 	sub.w	r0, r0, sl
 8006a68:	fa03 f000 	lsl.w	r0, r3, r0
 8006a6c:	9b04      	ldr	r3, [sp, #16]
 8006a6e:	4303      	orrs	r3, r0
 8006a70:	3401      	adds	r4, #1
 8006a72:	9304      	str	r3, [sp, #16]
 8006a74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a78:	482c      	ldr	r0, [pc, #176]	; (8006b2c <_vfiprintf_r+0x250>)
 8006a7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a7e:	2206      	movs	r2, #6
 8006a80:	f7f9 fbae 	bl	80001e0 <memchr>
 8006a84:	2800      	cmp	r0, #0
 8006a86:	d03f      	beq.n	8006b08 <_vfiprintf_r+0x22c>
 8006a88:	4b29      	ldr	r3, [pc, #164]	; (8006b30 <_vfiprintf_r+0x254>)
 8006a8a:	bb1b      	cbnz	r3, 8006ad4 <_vfiprintf_r+0x1f8>
 8006a8c:	9b03      	ldr	r3, [sp, #12]
 8006a8e:	3307      	adds	r3, #7
 8006a90:	f023 0307 	bic.w	r3, r3, #7
 8006a94:	3308      	adds	r3, #8
 8006a96:	9303      	str	r3, [sp, #12]
 8006a98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a9a:	443b      	add	r3, r7
 8006a9c:	9309      	str	r3, [sp, #36]	; 0x24
 8006a9e:	e767      	b.n	8006970 <_vfiprintf_r+0x94>
 8006aa0:	fb0c 3202 	mla	r2, ip, r2, r3
 8006aa4:	460c      	mov	r4, r1
 8006aa6:	2001      	movs	r0, #1
 8006aa8:	e7a5      	b.n	80069f6 <_vfiprintf_r+0x11a>
 8006aaa:	2300      	movs	r3, #0
 8006aac:	3401      	adds	r4, #1
 8006aae:	9305      	str	r3, [sp, #20]
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	f04f 0c0a 	mov.w	ip, #10
 8006ab6:	4620      	mov	r0, r4
 8006ab8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006abc:	3a30      	subs	r2, #48	; 0x30
 8006abe:	2a09      	cmp	r2, #9
 8006ac0:	d903      	bls.n	8006aca <_vfiprintf_r+0x1ee>
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d0c5      	beq.n	8006a52 <_vfiprintf_r+0x176>
 8006ac6:	9105      	str	r1, [sp, #20]
 8006ac8:	e7c3      	b.n	8006a52 <_vfiprintf_r+0x176>
 8006aca:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ace:	4604      	mov	r4, r0
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e7f0      	b.n	8006ab6 <_vfiprintf_r+0x1da>
 8006ad4:	ab03      	add	r3, sp, #12
 8006ad6:	9300      	str	r3, [sp, #0]
 8006ad8:	462a      	mov	r2, r5
 8006ada:	4b16      	ldr	r3, [pc, #88]	; (8006b34 <_vfiprintf_r+0x258>)
 8006adc:	a904      	add	r1, sp, #16
 8006ade:	4630      	mov	r0, r6
 8006ae0:	f3af 8000 	nop.w
 8006ae4:	4607      	mov	r7, r0
 8006ae6:	1c78      	adds	r0, r7, #1
 8006ae8:	d1d6      	bne.n	8006a98 <_vfiprintf_r+0x1bc>
 8006aea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006aec:	07d9      	lsls	r1, r3, #31
 8006aee:	d405      	bmi.n	8006afc <_vfiprintf_r+0x220>
 8006af0:	89ab      	ldrh	r3, [r5, #12]
 8006af2:	059a      	lsls	r2, r3, #22
 8006af4:	d402      	bmi.n	8006afc <_vfiprintf_r+0x220>
 8006af6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006af8:	f7ff fa5a 	bl	8005fb0 <__retarget_lock_release_recursive>
 8006afc:	89ab      	ldrh	r3, [r5, #12]
 8006afe:	065b      	lsls	r3, r3, #25
 8006b00:	f53f af12 	bmi.w	8006928 <_vfiprintf_r+0x4c>
 8006b04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b06:	e711      	b.n	800692c <_vfiprintf_r+0x50>
 8006b08:	ab03      	add	r3, sp, #12
 8006b0a:	9300      	str	r3, [sp, #0]
 8006b0c:	462a      	mov	r2, r5
 8006b0e:	4b09      	ldr	r3, [pc, #36]	; (8006b34 <_vfiprintf_r+0x258>)
 8006b10:	a904      	add	r1, sp, #16
 8006b12:	4630      	mov	r0, r6
 8006b14:	f000 f880 	bl	8006c18 <_printf_i>
 8006b18:	e7e4      	b.n	8006ae4 <_vfiprintf_r+0x208>
 8006b1a:	bf00      	nop
 8006b1c:	08006fc4 	.word	0x08006fc4
 8006b20:	08006fe4 	.word	0x08006fe4
 8006b24:	08006fa4 	.word	0x08006fa4
 8006b28:	08007008 	.word	0x08007008
 8006b2c:	08007012 	.word	0x08007012
 8006b30:	00000000 	.word	0x00000000
 8006b34:	080068b7 	.word	0x080068b7
 8006b38:	0800700e 	.word	0x0800700e

08006b3c <_printf_common>:
 8006b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b40:	4616      	mov	r6, r2
 8006b42:	4699      	mov	r9, r3
 8006b44:	688a      	ldr	r2, [r1, #8]
 8006b46:	690b      	ldr	r3, [r1, #16]
 8006b48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	bfb8      	it	lt
 8006b50:	4613      	movlt	r3, r2
 8006b52:	6033      	str	r3, [r6, #0]
 8006b54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b58:	4607      	mov	r7, r0
 8006b5a:	460c      	mov	r4, r1
 8006b5c:	b10a      	cbz	r2, 8006b62 <_printf_common+0x26>
 8006b5e:	3301      	adds	r3, #1
 8006b60:	6033      	str	r3, [r6, #0]
 8006b62:	6823      	ldr	r3, [r4, #0]
 8006b64:	0699      	lsls	r1, r3, #26
 8006b66:	bf42      	ittt	mi
 8006b68:	6833      	ldrmi	r3, [r6, #0]
 8006b6a:	3302      	addmi	r3, #2
 8006b6c:	6033      	strmi	r3, [r6, #0]
 8006b6e:	6825      	ldr	r5, [r4, #0]
 8006b70:	f015 0506 	ands.w	r5, r5, #6
 8006b74:	d106      	bne.n	8006b84 <_printf_common+0x48>
 8006b76:	f104 0a19 	add.w	sl, r4, #25
 8006b7a:	68e3      	ldr	r3, [r4, #12]
 8006b7c:	6832      	ldr	r2, [r6, #0]
 8006b7e:	1a9b      	subs	r3, r3, r2
 8006b80:	42ab      	cmp	r3, r5
 8006b82:	dc26      	bgt.n	8006bd2 <_printf_common+0x96>
 8006b84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b88:	1e13      	subs	r3, r2, #0
 8006b8a:	6822      	ldr	r2, [r4, #0]
 8006b8c:	bf18      	it	ne
 8006b8e:	2301      	movne	r3, #1
 8006b90:	0692      	lsls	r2, r2, #26
 8006b92:	d42b      	bmi.n	8006bec <_printf_common+0xb0>
 8006b94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b98:	4649      	mov	r1, r9
 8006b9a:	4638      	mov	r0, r7
 8006b9c:	47c0      	blx	r8
 8006b9e:	3001      	adds	r0, #1
 8006ba0:	d01e      	beq.n	8006be0 <_printf_common+0xa4>
 8006ba2:	6823      	ldr	r3, [r4, #0]
 8006ba4:	68e5      	ldr	r5, [r4, #12]
 8006ba6:	6832      	ldr	r2, [r6, #0]
 8006ba8:	f003 0306 	and.w	r3, r3, #6
 8006bac:	2b04      	cmp	r3, #4
 8006bae:	bf08      	it	eq
 8006bb0:	1aad      	subeq	r5, r5, r2
 8006bb2:	68a3      	ldr	r3, [r4, #8]
 8006bb4:	6922      	ldr	r2, [r4, #16]
 8006bb6:	bf0c      	ite	eq
 8006bb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006bbc:	2500      	movne	r5, #0
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	bfc4      	itt	gt
 8006bc2:	1a9b      	subgt	r3, r3, r2
 8006bc4:	18ed      	addgt	r5, r5, r3
 8006bc6:	2600      	movs	r6, #0
 8006bc8:	341a      	adds	r4, #26
 8006bca:	42b5      	cmp	r5, r6
 8006bcc:	d11a      	bne.n	8006c04 <_printf_common+0xc8>
 8006bce:	2000      	movs	r0, #0
 8006bd0:	e008      	b.n	8006be4 <_printf_common+0xa8>
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	4652      	mov	r2, sl
 8006bd6:	4649      	mov	r1, r9
 8006bd8:	4638      	mov	r0, r7
 8006bda:	47c0      	blx	r8
 8006bdc:	3001      	adds	r0, #1
 8006bde:	d103      	bne.n	8006be8 <_printf_common+0xac>
 8006be0:	f04f 30ff 	mov.w	r0, #4294967295
 8006be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006be8:	3501      	adds	r5, #1
 8006bea:	e7c6      	b.n	8006b7a <_printf_common+0x3e>
 8006bec:	18e1      	adds	r1, r4, r3
 8006bee:	1c5a      	adds	r2, r3, #1
 8006bf0:	2030      	movs	r0, #48	; 0x30
 8006bf2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006bf6:	4422      	add	r2, r4
 8006bf8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006bfc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c00:	3302      	adds	r3, #2
 8006c02:	e7c7      	b.n	8006b94 <_printf_common+0x58>
 8006c04:	2301      	movs	r3, #1
 8006c06:	4622      	mov	r2, r4
 8006c08:	4649      	mov	r1, r9
 8006c0a:	4638      	mov	r0, r7
 8006c0c:	47c0      	blx	r8
 8006c0e:	3001      	adds	r0, #1
 8006c10:	d0e6      	beq.n	8006be0 <_printf_common+0xa4>
 8006c12:	3601      	adds	r6, #1
 8006c14:	e7d9      	b.n	8006bca <_printf_common+0x8e>
	...

08006c18 <_printf_i>:
 8006c18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c1c:	7e0f      	ldrb	r7, [r1, #24]
 8006c1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006c20:	2f78      	cmp	r7, #120	; 0x78
 8006c22:	4691      	mov	r9, r2
 8006c24:	4680      	mov	r8, r0
 8006c26:	460c      	mov	r4, r1
 8006c28:	469a      	mov	sl, r3
 8006c2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006c2e:	d807      	bhi.n	8006c40 <_printf_i+0x28>
 8006c30:	2f62      	cmp	r7, #98	; 0x62
 8006c32:	d80a      	bhi.n	8006c4a <_printf_i+0x32>
 8006c34:	2f00      	cmp	r7, #0
 8006c36:	f000 80d8 	beq.w	8006dea <_printf_i+0x1d2>
 8006c3a:	2f58      	cmp	r7, #88	; 0x58
 8006c3c:	f000 80a3 	beq.w	8006d86 <_printf_i+0x16e>
 8006c40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006c48:	e03a      	b.n	8006cc0 <_printf_i+0xa8>
 8006c4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c4e:	2b15      	cmp	r3, #21
 8006c50:	d8f6      	bhi.n	8006c40 <_printf_i+0x28>
 8006c52:	a101      	add	r1, pc, #4	; (adr r1, 8006c58 <_printf_i+0x40>)
 8006c54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c58:	08006cb1 	.word	0x08006cb1
 8006c5c:	08006cc5 	.word	0x08006cc5
 8006c60:	08006c41 	.word	0x08006c41
 8006c64:	08006c41 	.word	0x08006c41
 8006c68:	08006c41 	.word	0x08006c41
 8006c6c:	08006c41 	.word	0x08006c41
 8006c70:	08006cc5 	.word	0x08006cc5
 8006c74:	08006c41 	.word	0x08006c41
 8006c78:	08006c41 	.word	0x08006c41
 8006c7c:	08006c41 	.word	0x08006c41
 8006c80:	08006c41 	.word	0x08006c41
 8006c84:	08006dd1 	.word	0x08006dd1
 8006c88:	08006cf5 	.word	0x08006cf5
 8006c8c:	08006db3 	.word	0x08006db3
 8006c90:	08006c41 	.word	0x08006c41
 8006c94:	08006c41 	.word	0x08006c41
 8006c98:	08006df3 	.word	0x08006df3
 8006c9c:	08006c41 	.word	0x08006c41
 8006ca0:	08006cf5 	.word	0x08006cf5
 8006ca4:	08006c41 	.word	0x08006c41
 8006ca8:	08006c41 	.word	0x08006c41
 8006cac:	08006dbb 	.word	0x08006dbb
 8006cb0:	682b      	ldr	r3, [r5, #0]
 8006cb2:	1d1a      	adds	r2, r3, #4
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	602a      	str	r2, [r5, #0]
 8006cb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006cbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e0a3      	b.n	8006e0c <_printf_i+0x1f4>
 8006cc4:	6820      	ldr	r0, [r4, #0]
 8006cc6:	6829      	ldr	r1, [r5, #0]
 8006cc8:	0606      	lsls	r6, r0, #24
 8006cca:	f101 0304 	add.w	r3, r1, #4
 8006cce:	d50a      	bpl.n	8006ce6 <_printf_i+0xce>
 8006cd0:	680e      	ldr	r6, [r1, #0]
 8006cd2:	602b      	str	r3, [r5, #0]
 8006cd4:	2e00      	cmp	r6, #0
 8006cd6:	da03      	bge.n	8006ce0 <_printf_i+0xc8>
 8006cd8:	232d      	movs	r3, #45	; 0x2d
 8006cda:	4276      	negs	r6, r6
 8006cdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ce0:	485e      	ldr	r0, [pc, #376]	; (8006e5c <_printf_i+0x244>)
 8006ce2:	230a      	movs	r3, #10
 8006ce4:	e019      	b.n	8006d1a <_printf_i+0x102>
 8006ce6:	680e      	ldr	r6, [r1, #0]
 8006ce8:	602b      	str	r3, [r5, #0]
 8006cea:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006cee:	bf18      	it	ne
 8006cf0:	b236      	sxthne	r6, r6
 8006cf2:	e7ef      	b.n	8006cd4 <_printf_i+0xbc>
 8006cf4:	682b      	ldr	r3, [r5, #0]
 8006cf6:	6820      	ldr	r0, [r4, #0]
 8006cf8:	1d19      	adds	r1, r3, #4
 8006cfa:	6029      	str	r1, [r5, #0]
 8006cfc:	0601      	lsls	r1, r0, #24
 8006cfe:	d501      	bpl.n	8006d04 <_printf_i+0xec>
 8006d00:	681e      	ldr	r6, [r3, #0]
 8006d02:	e002      	b.n	8006d0a <_printf_i+0xf2>
 8006d04:	0646      	lsls	r6, r0, #25
 8006d06:	d5fb      	bpl.n	8006d00 <_printf_i+0xe8>
 8006d08:	881e      	ldrh	r6, [r3, #0]
 8006d0a:	4854      	ldr	r0, [pc, #336]	; (8006e5c <_printf_i+0x244>)
 8006d0c:	2f6f      	cmp	r7, #111	; 0x6f
 8006d0e:	bf0c      	ite	eq
 8006d10:	2308      	moveq	r3, #8
 8006d12:	230a      	movne	r3, #10
 8006d14:	2100      	movs	r1, #0
 8006d16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d1a:	6865      	ldr	r5, [r4, #4]
 8006d1c:	60a5      	str	r5, [r4, #8]
 8006d1e:	2d00      	cmp	r5, #0
 8006d20:	bfa2      	ittt	ge
 8006d22:	6821      	ldrge	r1, [r4, #0]
 8006d24:	f021 0104 	bicge.w	r1, r1, #4
 8006d28:	6021      	strge	r1, [r4, #0]
 8006d2a:	b90e      	cbnz	r6, 8006d30 <_printf_i+0x118>
 8006d2c:	2d00      	cmp	r5, #0
 8006d2e:	d04d      	beq.n	8006dcc <_printf_i+0x1b4>
 8006d30:	4615      	mov	r5, r2
 8006d32:	fbb6 f1f3 	udiv	r1, r6, r3
 8006d36:	fb03 6711 	mls	r7, r3, r1, r6
 8006d3a:	5dc7      	ldrb	r7, [r0, r7]
 8006d3c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006d40:	4637      	mov	r7, r6
 8006d42:	42bb      	cmp	r3, r7
 8006d44:	460e      	mov	r6, r1
 8006d46:	d9f4      	bls.n	8006d32 <_printf_i+0x11a>
 8006d48:	2b08      	cmp	r3, #8
 8006d4a:	d10b      	bne.n	8006d64 <_printf_i+0x14c>
 8006d4c:	6823      	ldr	r3, [r4, #0]
 8006d4e:	07de      	lsls	r6, r3, #31
 8006d50:	d508      	bpl.n	8006d64 <_printf_i+0x14c>
 8006d52:	6923      	ldr	r3, [r4, #16]
 8006d54:	6861      	ldr	r1, [r4, #4]
 8006d56:	4299      	cmp	r1, r3
 8006d58:	bfde      	ittt	le
 8006d5a:	2330      	movle	r3, #48	; 0x30
 8006d5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006d60:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006d64:	1b52      	subs	r2, r2, r5
 8006d66:	6122      	str	r2, [r4, #16]
 8006d68:	f8cd a000 	str.w	sl, [sp]
 8006d6c:	464b      	mov	r3, r9
 8006d6e:	aa03      	add	r2, sp, #12
 8006d70:	4621      	mov	r1, r4
 8006d72:	4640      	mov	r0, r8
 8006d74:	f7ff fee2 	bl	8006b3c <_printf_common>
 8006d78:	3001      	adds	r0, #1
 8006d7a:	d14c      	bne.n	8006e16 <_printf_i+0x1fe>
 8006d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d80:	b004      	add	sp, #16
 8006d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d86:	4835      	ldr	r0, [pc, #212]	; (8006e5c <_printf_i+0x244>)
 8006d88:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006d8c:	6829      	ldr	r1, [r5, #0]
 8006d8e:	6823      	ldr	r3, [r4, #0]
 8006d90:	f851 6b04 	ldr.w	r6, [r1], #4
 8006d94:	6029      	str	r1, [r5, #0]
 8006d96:	061d      	lsls	r5, r3, #24
 8006d98:	d514      	bpl.n	8006dc4 <_printf_i+0x1ac>
 8006d9a:	07df      	lsls	r7, r3, #31
 8006d9c:	bf44      	itt	mi
 8006d9e:	f043 0320 	orrmi.w	r3, r3, #32
 8006da2:	6023      	strmi	r3, [r4, #0]
 8006da4:	b91e      	cbnz	r6, 8006dae <_printf_i+0x196>
 8006da6:	6823      	ldr	r3, [r4, #0]
 8006da8:	f023 0320 	bic.w	r3, r3, #32
 8006dac:	6023      	str	r3, [r4, #0]
 8006dae:	2310      	movs	r3, #16
 8006db0:	e7b0      	b.n	8006d14 <_printf_i+0xfc>
 8006db2:	6823      	ldr	r3, [r4, #0]
 8006db4:	f043 0320 	orr.w	r3, r3, #32
 8006db8:	6023      	str	r3, [r4, #0]
 8006dba:	2378      	movs	r3, #120	; 0x78
 8006dbc:	4828      	ldr	r0, [pc, #160]	; (8006e60 <_printf_i+0x248>)
 8006dbe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006dc2:	e7e3      	b.n	8006d8c <_printf_i+0x174>
 8006dc4:	0659      	lsls	r1, r3, #25
 8006dc6:	bf48      	it	mi
 8006dc8:	b2b6      	uxthmi	r6, r6
 8006dca:	e7e6      	b.n	8006d9a <_printf_i+0x182>
 8006dcc:	4615      	mov	r5, r2
 8006dce:	e7bb      	b.n	8006d48 <_printf_i+0x130>
 8006dd0:	682b      	ldr	r3, [r5, #0]
 8006dd2:	6826      	ldr	r6, [r4, #0]
 8006dd4:	6961      	ldr	r1, [r4, #20]
 8006dd6:	1d18      	adds	r0, r3, #4
 8006dd8:	6028      	str	r0, [r5, #0]
 8006dda:	0635      	lsls	r5, r6, #24
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	d501      	bpl.n	8006de4 <_printf_i+0x1cc>
 8006de0:	6019      	str	r1, [r3, #0]
 8006de2:	e002      	b.n	8006dea <_printf_i+0x1d2>
 8006de4:	0670      	lsls	r0, r6, #25
 8006de6:	d5fb      	bpl.n	8006de0 <_printf_i+0x1c8>
 8006de8:	8019      	strh	r1, [r3, #0]
 8006dea:	2300      	movs	r3, #0
 8006dec:	6123      	str	r3, [r4, #16]
 8006dee:	4615      	mov	r5, r2
 8006df0:	e7ba      	b.n	8006d68 <_printf_i+0x150>
 8006df2:	682b      	ldr	r3, [r5, #0]
 8006df4:	1d1a      	adds	r2, r3, #4
 8006df6:	602a      	str	r2, [r5, #0]
 8006df8:	681d      	ldr	r5, [r3, #0]
 8006dfa:	6862      	ldr	r2, [r4, #4]
 8006dfc:	2100      	movs	r1, #0
 8006dfe:	4628      	mov	r0, r5
 8006e00:	f7f9 f9ee 	bl	80001e0 <memchr>
 8006e04:	b108      	cbz	r0, 8006e0a <_printf_i+0x1f2>
 8006e06:	1b40      	subs	r0, r0, r5
 8006e08:	6060      	str	r0, [r4, #4]
 8006e0a:	6863      	ldr	r3, [r4, #4]
 8006e0c:	6123      	str	r3, [r4, #16]
 8006e0e:	2300      	movs	r3, #0
 8006e10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e14:	e7a8      	b.n	8006d68 <_printf_i+0x150>
 8006e16:	6923      	ldr	r3, [r4, #16]
 8006e18:	462a      	mov	r2, r5
 8006e1a:	4649      	mov	r1, r9
 8006e1c:	4640      	mov	r0, r8
 8006e1e:	47d0      	blx	sl
 8006e20:	3001      	adds	r0, #1
 8006e22:	d0ab      	beq.n	8006d7c <_printf_i+0x164>
 8006e24:	6823      	ldr	r3, [r4, #0]
 8006e26:	079b      	lsls	r3, r3, #30
 8006e28:	d413      	bmi.n	8006e52 <_printf_i+0x23a>
 8006e2a:	68e0      	ldr	r0, [r4, #12]
 8006e2c:	9b03      	ldr	r3, [sp, #12]
 8006e2e:	4298      	cmp	r0, r3
 8006e30:	bfb8      	it	lt
 8006e32:	4618      	movlt	r0, r3
 8006e34:	e7a4      	b.n	8006d80 <_printf_i+0x168>
 8006e36:	2301      	movs	r3, #1
 8006e38:	4632      	mov	r2, r6
 8006e3a:	4649      	mov	r1, r9
 8006e3c:	4640      	mov	r0, r8
 8006e3e:	47d0      	blx	sl
 8006e40:	3001      	adds	r0, #1
 8006e42:	d09b      	beq.n	8006d7c <_printf_i+0x164>
 8006e44:	3501      	adds	r5, #1
 8006e46:	68e3      	ldr	r3, [r4, #12]
 8006e48:	9903      	ldr	r1, [sp, #12]
 8006e4a:	1a5b      	subs	r3, r3, r1
 8006e4c:	42ab      	cmp	r3, r5
 8006e4e:	dcf2      	bgt.n	8006e36 <_printf_i+0x21e>
 8006e50:	e7eb      	b.n	8006e2a <_printf_i+0x212>
 8006e52:	2500      	movs	r5, #0
 8006e54:	f104 0619 	add.w	r6, r4, #25
 8006e58:	e7f5      	b.n	8006e46 <_printf_i+0x22e>
 8006e5a:	bf00      	nop
 8006e5c:	08007019 	.word	0x08007019
 8006e60:	0800702a 	.word	0x0800702a

08006e64 <_read_r>:
 8006e64:	b538      	push	{r3, r4, r5, lr}
 8006e66:	4d07      	ldr	r5, [pc, #28]	; (8006e84 <_read_r+0x20>)
 8006e68:	4604      	mov	r4, r0
 8006e6a:	4608      	mov	r0, r1
 8006e6c:	4611      	mov	r1, r2
 8006e6e:	2200      	movs	r2, #0
 8006e70:	602a      	str	r2, [r5, #0]
 8006e72:	461a      	mov	r2, r3
 8006e74:	f7f9 fe5e 	bl	8000b34 <_read>
 8006e78:	1c43      	adds	r3, r0, #1
 8006e7a:	d102      	bne.n	8006e82 <_read_r+0x1e>
 8006e7c:	682b      	ldr	r3, [r5, #0]
 8006e7e:	b103      	cbz	r3, 8006e82 <_read_r+0x1e>
 8006e80:	6023      	str	r3, [r4, #0]
 8006e82:	bd38      	pop	{r3, r4, r5, pc}
 8006e84:	20004bac 	.word	0x20004bac

08006e88 <_fstat_r>:
 8006e88:	b538      	push	{r3, r4, r5, lr}
 8006e8a:	4d07      	ldr	r5, [pc, #28]	; (8006ea8 <_fstat_r+0x20>)
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	4604      	mov	r4, r0
 8006e90:	4608      	mov	r0, r1
 8006e92:	4611      	mov	r1, r2
 8006e94:	602b      	str	r3, [r5, #0]
 8006e96:	f7f9 fe76 	bl	8000b86 <_fstat>
 8006e9a:	1c43      	adds	r3, r0, #1
 8006e9c:	d102      	bne.n	8006ea4 <_fstat_r+0x1c>
 8006e9e:	682b      	ldr	r3, [r5, #0]
 8006ea0:	b103      	cbz	r3, 8006ea4 <_fstat_r+0x1c>
 8006ea2:	6023      	str	r3, [r4, #0]
 8006ea4:	bd38      	pop	{r3, r4, r5, pc}
 8006ea6:	bf00      	nop
 8006ea8:	20004bac 	.word	0x20004bac

08006eac <_isatty_r>:
 8006eac:	b538      	push	{r3, r4, r5, lr}
 8006eae:	4d06      	ldr	r5, [pc, #24]	; (8006ec8 <_isatty_r+0x1c>)
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	4604      	mov	r4, r0
 8006eb4:	4608      	mov	r0, r1
 8006eb6:	602b      	str	r3, [r5, #0]
 8006eb8:	f7f9 fe75 	bl	8000ba6 <_isatty>
 8006ebc:	1c43      	adds	r3, r0, #1
 8006ebe:	d102      	bne.n	8006ec6 <_isatty_r+0x1a>
 8006ec0:	682b      	ldr	r3, [r5, #0]
 8006ec2:	b103      	cbz	r3, 8006ec6 <_isatty_r+0x1a>
 8006ec4:	6023      	str	r3, [r4, #0]
 8006ec6:	bd38      	pop	{r3, r4, r5, pc}
 8006ec8:	20004bac 	.word	0x20004bac

08006ecc <_init>:
 8006ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ece:	bf00      	nop
 8006ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ed2:	bc08      	pop	{r3}
 8006ed4:	469e      	mov	lr, r3
 8006ed6:	4770      	bx	lr

08006ed8 <_fini>:
 8006ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eda:	bf00      	nop
 8006edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ede:	bc08      	pop	{r3}
 8006ee0:	469e      	mov	lr, r3
 8006ee2:	4770      	bx	lr
